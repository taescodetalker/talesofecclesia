//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.86;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.86] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * ---
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 * 
 * <Under>
 * 
 * - Used for: Animation Name Tags
 * - If this tag is found in an animation's name, the animation will appear
 *   under battlers while in battle.
 * - This effect only applies to battlers in the battle scene.
 * - Under effect is NOT applied to status window portraits.
 * - Under effect is NOT applied to projectile animations.
 * 
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Status
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 * 
 * - Status
 *   - Adds a status command to view the current inputting actor's status.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * <Help Description>
 *  text
 *  text
 * </Help Description>
 *
 * - Used for: State Notetags
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - This is used as a common notetag between Battle Core's state descriptions
 *   and State Tooltips' state descriptions.
 * 
 * ---
 * 
 * <In-Battle Status Description>
 *  text
 *  text
 * </In-Battle Status Description>
 * - Assigns a help description for the state that's displayed under the
 *   "Status" actor command.
 * - Replace 'text' with text you want displayed for the help window.
 * - This best works with one line for compatibility with other plugins.
 * - Insert %1 into the help description to show any data that would otherwise
 *   be shown as the state display, such as Absorption Barrier count.
 * - The description used here will not be used for State Tooltips.
 * - If both <Help Description> and <In-Battle Status Description> notetags
 *   exist in the same state, priority will be given to this one for the
 *   In-Battle Status Window.
 *
 * ---
 * 
 * <Exclude From Status Listing>
 * 
 * - Used for: State Notetags
 * - Excludes the state from being displayed in the status listing.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 *
 * ---
 * 
 * <Target: Ally or Enemy>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target allies or enemies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to allies first.
 * - Ignored when used by enemies and will be treated as an ally scope.
 * - Auto-battle actors will also treat this action as an ally scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Target: Enemy or Ally>
 * 
 * - Used for: Skill, Item Notetags
 * - Allows the player to target enemies or allies with the skill/item.
 *   - Keep in mind this does NOT allow you to select dead party members.
 * - This will overwrite the existing database scope and ignore the database's
 *   existing scope in favor of this.
 * - Target selection emphasis will go to enemies first.
 * - Ignored when used by enemies and will be treated as an enemy scope.
 * - Auto-battle actors will also treat this action as an enemy scope.
 * - For certain battle layouts in frontview, this will open the Actor Select
 *   window in order for Touch Input to be able to select actors.
 * 
 * ---
 * 
 * <Single or Multiple Select>
 * 
 * - Used for: Skill, Item Notetags
 * - Requires an original scope that can select individual targets.
 * - This will allow the skill/item to be able to select either single targets
 *   or multiple targets at once.
 *   - In order to select "all enemies", the player must press the "Page Up"
 *     keyboard button or the visual on screen "All Enemies" button.
 *   - In order to select "all allies", the player must press the "Page Down"
 *     keyboard button or the visual on screen "All Allies" button.
 *   - Those wondering why this isn't regulated to a command left or right of
 *     the enemies and actors is because mouse controls and touch controls
 *     would not be able to select all enemies or all allies that way.
 *   - This can NOT be used with single dead ally scopes.
 * - If there is an enemy with Taunt or Provoke, the option to select
 *   "All Enemies" does not become possible.
 * - The enemy AI and Auto-Battle actor AI will NOT make use of the ability to
 *   toggle between single and multiple target scopes. They will only use the
 *   single target versions of these skills.
 * 
 * ---
 * 
 * <Disperse Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause any damage dealt by this skill to be split equally amongst
 *   all targets of the skill including repeats.
 *   - For basic attacks, any damage reduction added attack trait totals will
 *     by reverted.
 * - This does NOT have to be used with <Single or Multiple Select> notetag and
 *   can be used by itself for an "All" scope, making the skill/item deal less
 *   damage if there's more enemies and more damage if there's less enemies.
 * 
 * ---
 * 
 * <Cannot Target User>
 * 
 * - Used for: Skill, Item Notetags
 * - This will cause the action to be unable to select the user as the target.
 * - This is not a targeting scope. Instead, it is used in addition to any
 *   other targeting scopes out there.
 * - When used with "All" scopes, the user is removed from the target pool.
 * - This is also applied outside of battle.
 * - If the user somehow enters the target pool, the user is then replaced by
 *   a random ally found in the party.
 * 
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Accuracy>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy>
 * 
 * - Used for: Skill, Item Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the accuracy hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - Works best with VisuMZ Core Engine's "Improved Accuracy" QoL formula in
 *   order to consolidate both HIT and EVA.
 * 
 * ---
 * 
 * <JS Accuracy as User>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as User>
 * 
 * <JS Accuracy as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Accuracy as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   accuracy hit success rate.
 *   - Base value comes from Game_Action.itemHit
 *   - Skill/Item <JS Accuracy> runs
 *   - Then <JS Accuracy as User/Target> notetags run
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * 
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 *   - This is NOT used for filtering out who the player can or cannot select.
 *   - This determines a final result.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 * 
 * <Popup Position: Head>
 * <Popup Position: Center>
 * <Popup Position: Base>
 * 
 * - Used for: Enemy Notetags
 * - Determines the popup starting position for this enemy.
 *   - Head makes the popups start at the top of the ennemy.
 *   - Center makes the popups start at the center of the ennemy.
 *   - Base makes the popups start at the bottom of the ennemy.
 * - If this notetag is not used, refer to the default Plugin Parameter setting
 *   found in Damage Settings.
 * 
 * ---
 * 
 * <Popup Offset X: +x>
 * <Popup Offset X: -x>
 * <Popup Offset Y: +y>
 * <Popup Offset Y: -y>
 * 
 * - Used for: Enemy Notetags
 * - Alters the popup x/y position offset for this enemy.
 * - Replace 'x' with a number representing the horizontal position x offset.
 *   - Negative: left. Positive: right.
 * - Replace 'y' with a number representing the vertical position y offset.
 *   - Negative: up. Positive: down.
 * - If these notetags are not used, refer to the default Plugin Parameter
 *   settings found in Damage Settings.
 * 
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Rate as User>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as User>
 *
 * <JS Critical Rate as Target>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate as Target>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Only applies during battle.
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 *   - Base value comes from Game_Action.itemCri
 *   - Skill/Item <JS Critical Rate> runs
 *   - Then <JS Critical Rate as User/Target> notetags run
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 * 
 * === Life Steal-Related Notetags ===
 * 
 * ---
 * 
 * <HP Life Steal: x%>
 * <MP Life Steal: x%>
 * 
 * - Used for: Skill, Item Notetags
 * - Causes this skill/item to have Life Steal properties, allowing the user to
 *   take x% of the HP/MP Damage as recovered HP/MP.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take MP from dealt MP damage.
 * - Replace 'x' with a number representing the percentage of the dealt damage
 *   used as HP/MP recovery.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <HP Life Steal Certain Hit: +x%>
 * <HP Life Steal Physical Hit: +x%>
 * <HP Life Steal Magical Hit: +x%>
 * 
 * <HP Life Steal Certain Hit: -x%>
 * <HP Life Steal Physical Hit: -x%>
 * <HP Life Steal Magical Hit: -x%>
 * 
 * <MP Life Steal Certain Hit: +x%>
 * <MP Life Steal Physical Hit: +x%>
 * <MP Life Steal Magical Hit: +x%>
 * 
 * <MP Life Steal Certain Hit: -x%>
 * <MP Life Steal Physical Hit: -x%>
 * <MP Life Steal Magical Hit: -x%>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - The related battler's various trait properties can have passive life steal
 *   properties that will trigger upon using skills/items with matching hit
 *   types regardless of whether or not the skill/item innately has Life Steal.
 *   - Notetag variants with "Certain Hit" will only trigger from "Certain Hit"
 *     skill and item types. Same with "Physical" and "Magical" variants.
 *   - HP Life Steal can only take HP from dealt HP damage.
 *   - MP Life Steal can only take HP from dealt MP damage.
 * - Replace 'x' with a number representing the additive stacking percentage
 *   boost of the dealt damage used as HP/MP recovery. The effects will stack
 *   additively with other trait objects.
 * - This cannot be used with skills/items with HP Drain/MP Drain. Life Steal
 *   is a different mechanic from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Cancel Life Steal>
 * 
 * <Cancel HP Life Steal>
 * <Cancel MP Life Steal>
 * 
 * - Used for: Skill, Item Notetags
 * - Prevents this skill from allowing Life Steal effects to occur including
 *   the passive life steal calculators from the skill/item user.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Guard Life Steal>
 * 
 * <Guard HP Life Steal>
 * <Guard MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will prevent
 *   the Life Steal effects from taking effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Disarm Life Steal>
 * 
 * <Disarm HP Life Steal>
 * <Disarm MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - Makes the related battler unable to HP/MP Life Steal regardless of the
 *   skill/item and its related properties like equipment.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 * 
 * <Negative Life Steal>
 * 
 * <Negative HP Life Steal>
 * <Negative MP Life Steal>
 * 
 * - Used for: Used for: Actor, Class, Armor, Enemy, State Notetags
 * - If the related battler becomes the target of Life Steal, this will invert
 *   the healing properties of Life Steal, causing the Life Steal user to
 *   instead take HP/MP damage.
 *   - This does NOT heal the target related battler.
 * - This does not prevent skills/items with innate Life Steal from being used.
 *   Only the Life Steal part of the skill/item will have no effect.
 * - This does not affect HP Drain/MP Drain. Life Steal is a different mechanic
 *   from HP Drain/MP Drain.
 * 
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 * 
 * <Aspect Name: name>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'name' with text for how enemy aspect should be renamed.
 * 
 * ---
 * 
 * <Aspect Color: color>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect name color shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'color' with either a number from 0 to 31 representing the text
 *   color or in the format of '#rrggbb' to custom pick a hex color.
 * 
 * ---
 * 
 * <Aspect Icon: x>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect icon shown in the In-Battle Status and other
 *   supported plugin menus.
 *   - Requires <Aspect Description> in order to show.
 * - Replace 'x' with a number representing the icon index used to represent
 *   the enemy aspect.
 * 
 * ---
 * 
 * <Aspect Description>
 *  text
 *  text
 * </Aspect Description>
 * 
 * - Used for: Enemy Notetags
 * - Changes enemy's aspect description shown in the In-Battle Status and other
 *   supported plugin menus.
 * - Replace 'text' with the text you would like to appear as a description for
 *   the enemy's aspect.
 * 
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage being calculated up to this
 *   point (if any) and any changes made to the 'value' variable will reflect
 *   on the damage dealt/healed, too.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 * - The 'value' variable represents the damage/healing that has been last
 *   dealt through this action.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - Those with VisuMZ_3_FrontviewBattleUI can use 'frontview'.
 * - Those with VisuMZ_3_SideviewBattleUI can use 'sideview'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Size Tags ===
 * 
 * ---
 * 
 * <Extend: x>
 * <Extend: x, x, x>
 * 
 * - Used for: Troop Name Tags and Troop Comment Tags
 * - Adds enemies from another troop to the current troop.
 * - Enemies from another troop will retain their database positions.
 * - Replace 'x' with the ID of the database troop entry you wish to add enemy
 *   members from.
 *   - Insert multiple x's to add from more troops.
 * - Extended troop members will be added in the order they're listed.
 * - Be cautious of how many enemies you add as too many will lag the battle
 *   system. We are not responsible for frame drops due to this.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 * 
 * ANIM: Balloon Animation
 * - Plays a balloon animation on target(s).
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Balloon Type:
 *   - What kind of balloon should be played on target(s)?
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Single)
 * - Plays a balloon animation using an icon on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Range)
 * - Plays a balloon animation an icon range on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Starting Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Ending Icon Index:
 *   - Insert the ID of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 * 
 * ANIM: Balloon Icon (Specific)
 * - Plays a balloon animation with specific icons on target(s).
 * - Requires VisuMZ_4_IconBalloons!
 * 
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Icons:
 *   - Insert the ID(s) of the icon to show.
 *   - Tip: Right click > Insert Icon Index
 * 
 *   Wait for Completion:
 *   - Wait for balloon animation completion before continuing?
 * 
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Change Battle Portrait (JS)
 * - Changes the battle portrait of the actor through JavaScript.
 * - Can be used outside of battle/action sequences.
 * 
 *   JS: Actor ID:
 *   - Enter which Actor ID to affect.
 *   - Uses JavaScript code.
 * 
 *   JS: Filename:
 *   - Enter the filename you wish to use.
 *   - Uses JavaScript code.
 * 
 * ---
 *
 * ANIM: Guard Animation
 * - Plays the animation associated with the user's guard action (if any).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Item Animation
 * - Plays the animation associated with a specific item.
 * 
 *   Item ID:
 *   - Which item ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Show Animation JS
 * - Plays the a specific animation on unit(s).
 * - Uses JavaScript to determine animation ID.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   JS: Animation ID:
 *   - Select which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Skill Animation
 * - Plays the animation associated with a specific skill.
 * 
 *   Skill ID:
 *   - Which skill ID will the animation come from?
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 * 
 * === Action Sequences - Cutins ===
 * 
 * Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Add Visual Cutin Effect
 * - Adds the Visual Cutin Effect using these desired settings.
 * - Only one of each cutin-style type can be present at a time.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Basic Settings:
 * 
 *     Cutin Style Type:
 *     - What Visual Cutin Effect style type do you wish to use?
 *     - Only one of each cutin-style type can be present.
 *     - Refer to VisuMZ wiki for visuals on styles.
 * 
 *     Portrait Target:
 *     - Select unit(s) to grab the Visual Cutin Effect portrait data from.
 *     - First unit will be used to make portrait.
 * 
 *     Parallax Filename:
 *     - Pick a parallax to use for the Visual Cutin Effect.
 *     - Pick (None) to not use a parallax.
 * 
 *     Background Color:
 *     - Use #rrggbb for custom colors or regular numbers for text colors from
 *       the Window Skin.
 *
 *   Extra Settings:
 *   - Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 *   - An explanation for these settings are found in the Visual Cutin Effect
 *     help file and documentation.
 *   - Extra parameters are added for Parallax Scroll Inversion when the target
 *     is an enemy.
 * 
 *   Wait for Entrance:
 *   - Wait until cutin entrance is finished before performing the next
 *     event command?
 * 
 * ---
 *
 * CUTIN: End Visual Cutin Effect (All)
 * - Ends all Visual Cutin Effects currently present.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 *
 * CUTIN: End Visual Cutin Effect (Type)
 * - Ends the Visual Cutin Effect with the matching type.
 * - Requires VisuMZ_3_VisualCutinEffect!
 *
 *   Cutin Style Type:
 *   - What Visual Cutin Effect style type do you wish to end?
 * 
 *   Wait for Exit:
 *   - Wait until cutin exit is finished before performing the next
 *     event command?
 *
 * ---
 * 
 * CUTIN: Wait for Cutin Entrance
 * - Wait until all cutin entrances are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 * 
 * CUTIN: Wait for Cutin Exit
 * - Wait until all cutin exits are finished before performing the next
 *   event command.
 * - Requires VisuMZ_3_VisualCutinEffect!
 * 
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Grid ===
 * 
 * These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * ---
 * 
 * GRID: Action Animation at Node
 * - Plays action animation at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * GRID: Add Passive State(s) to Node
 * - Adds Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to add as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to add the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Passive State(s) to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Passive State(s) to.
 *
 * ---
 * 
 * GRID: Add Trigger to Node
 * - Adds Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Skill ID:
 *   - Select which Skill ID(s) to add as the trigger.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Add Trigger to Node JS
 * - Adds JS Trigger to target node.
 * - Target node cannot have battler.
 * - Each node can only contain ONE trigger! 
 * - Otherwise, newly placed triggers will overwrite the old ones.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   JS: Skill ID:
 *   - Use JavaScript to determine what skill ID to add to this node.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to add the Trigger Node effect for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to add a
 *       Trigger to.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to add a
 *       Trigger to.
 * 
 * ---
 * 
 * GRID: Animation ID at Node
 * - Plays specific animation ID at target node.
 * 
 *   Animation ID:
 *   - Play this animation at target node.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation JS at Node
 * - Uses JS to calculate which animation to play at target node.
 * 
 *   JS: Animation ID:
 *   - Calculate which animation to play on unit(s).
 *   - Uses JavaScript to determine animation ID.
 * 
 *     Mirror?:
 *     - Mirror this animation?
 * 
 *     Mute?:
 *     - Mute this animation?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Animation Type at Node
 * - Plays certain animation type at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Type:
 *   - What is the animation type you would like to play?
 *     - Attack
 *     - Guard
 *     - Item
 *     - Skill
 * 
 *     Slot (Attack Type):
 *     - Which weapon slot to get this data from?
 *     - Main-hand weapon is weapon slot 1.
 * 
 *     Item ID (Item Type):
 *     - Which item ID will the animation come from?
 * 
 *     Skill ID (Skill Type):
 *     - Which skill ID will the animation come from?
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit's Node do you want to play an animation on?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to play an
 *       animation on.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to play
 *       an animation on.
 * 
 *   Offset X:
 *   - Offsets the animation x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the animation y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 * 
 * GRID: Move Target(s) In Direction
 * - Moves target(s) in a specific direction to other Nodes.
 * - Requires VisuMZ_2_BattleGridSystem!
 * - This will bypass the "once per action" condition used for both the
 *   <rule Move User Node direction: x> & <rule Move Target Node direction: x>
 *   notetags as this is not a notetag effect.
 * 
 *   Targets:
 *   - Select unit(s) to move.
 * 
 *   Movement Type:
 *   - Select the Movement type rulings.
 *   - See VisuMZ_2_BattleGridSystem help file for details.
 * 
 *     Direction:
 *     - Select the movement direction.
 * 
 *     Distance:
 *     - The number of nodes to be moved.
 *     - You may use JavaScript code.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 *   Silent Change?:
 *   - Silent: Discreet changes shown. More apparent later.
 *   - Visual: Instant changes shown.
 * 
 * ---
 * 
 * GRID: Pull To Target Node
 * - Pulls battlers towards target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to pull on?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       pull to.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       pull to.
 * 
 *   Strength:
 *   - Input the strength level of the pull.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 * 
 * GRID: Push From Target Node
 * - Pushes battlers away from target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *
 *     Unit:
 *     - Which unit do you want to push from?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to
 *       push from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to
 *       push from.
 * 
 *   Strength:
 *   - Input the strength level of the push.
 * 
 *   Duration:
 *   - Input the number representing the frames used to move.
 * 
 * ---
 *
 * GRID: Remove All Passive States from Node
 * - Removes all Passive State effects at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to clear the Node for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Passive States from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Passive States from.
 *
 * ---
 *
 * GRID: Remove Passive State(s) from Node
 * - Remove Passive State(s) at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 *
 *   State ID(s):
 *   - Select which State ID(s) to remove as a Passive State.
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 *
 *     Unit:
 *     - Which unit do you want to remove the Passive State Node effect for?
 *
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to remove
 *       a Passive State(s) from.
 *
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to remove
 *       a Passive State(s) from.
 *
 * ---
 * 
 * GRID: Remove Trigger from Node
 * - Removes Trigger at target node.
 * - Requires VisuMZ_2_BattleGridSystem!
 * 
 *   Action-Selected Node?:
 *   - Use Action-Selected Node Coordinates if possible?
 *   - Requires "Empty" or "Any" for <Target: x Grid Node>
 *   - If the no action is in effect or the action doesn't use that target
 *     structure, use the node coordinates below:
 * 
 *     Unit:
 *     - Which unit do you want to clear Triggers for?
 * 
 *     Rank:
 *     - Input the number representing the Rank of the Node you want to clear
 *       Triggers from.
 * 
 *     Flank:
 *     - Input the number representing the Flank of the Node you want to clear
 *       Triggers from.
 * 
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Inject ===
 *
 * These Action Sequences are related to injecting sprite animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * ---
 * 
 * INJECT: Animation Begin
 * - Injects and plays a whole spritesheet animation.
 * - The spritesheet animation will play over the battler until it is finished.
 * - The battler's original sprite will be invisible until finished.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to inject the animation on.
 * 
 *   Filename:
 *   - Select the animation spritesheet file.
 *   - Located in the /img/sv_actors/ folder.
 * 
 *     Horizontal Cells:
 *     - How many horizontal cells (or columns) are there?
 * 
 *     Vertical Cells:
 *     - How many vertical cells (or rows) are there?
 * 
 *     Frame Delay:
 *     - How many frames are played inbetween cells?
 * 
 *     Smooth Bitmap?:
 *     - Smooth the spritesheet graphic?
 * 
 *   Offset:
 * 
 *     Offset X:
 *     - Offsets the X position of the injected animation.
 *     - Negative: left. Positive: right.
 * 
 *     Offset Y:
 *     - Offsets the Y position of the injected animation.
 *     - Negative: up. Positive: down.
 * 
 * ---
 * 
 * INJECT: Animation End
 * - Stops and ends any injected animations on target(s).
 * - Any inject animation will be prematurely terminated.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to stop injected animation(s).
 * 
 * ---
 * 
 * INJECT: Animation Pause/Resume
 * - Pauses/resumes any injected animations on target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 *   Targets:
 *   - Select unit(s) to pause/resume injected animation(s).
 * 
 *   Pause?:
 *   - Pause the injected animation?
 * 
 * ---
 * 
 * INJECT: Wait For Injected Animation
 * - Waits for injected animations to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 * 
 * MECH: Active Chain Input Disable
 * - Disables input for Active Chain Skills at this time.
 * - Requires VisuMZ_3_ActiveChainSkills!
 * 
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 * 
 * MECH: Emulate Attack Effect
 * - Emulate an "Action Effect" but using a the user's attack skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Guard Effect
 * - Emulate an "Action Effect" but using a the user's guard skill instead of
 *   the current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Item Effect
 * - Emulate an "Action Effect" but using a specific item instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Item ID:
 *   - Which item ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Cost
 * - Pick a skill for target(s) to emulate paying the cost of.
 * - Lets you cause characters to perform paying the costs of a specific skill
 *   without needing to actually use them.
 * - This will include Skill Cooldowns and Limited Skill Uses.
 * 
 *   Skill ID:
 *   - Which skill ID will have its cost paid for?
 *   - Use 0 for current action's skill.
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 * ---
 * 
 * MECH: Emulate Skill Effect
 * - Emulate an "Action Effect" but using a specific skill instead of the
 *   current action.
 * - Essentially lets you perform the mechanics of another action without
 *   having to use another action or needing to pay that action's costs.
 * 
 *   Skill ID:
 *   - Which skill ID will be emulated?
 * 
 *   User(s):
 *   - Select unit(s) to perform the action's effects.
 * 
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 * 
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: State Turns Change By
 * - Changes target(s) state turns by an amount.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns By:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if actor(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: State Turns Change To
 * - Changes target(s) state turns to a specific value.
 * - Requires VisuMZ_1_SkillsStatesCore!
 * 
 *   Targets:
 *   - Select unit(s) to affect state turns for.
 * 
 *   State ID:
 *   - What is the ID of the state you wish to change turns for?
 *   - Only works on states that can have turns.
 * 
 *   Change Turns To:
 *   - How many turns should the state be changed to?
 *   - You may use JavaScript code.
 * 
 *   Auto-Add State?:
 *   - Automatically adds state if target(s) does not have it applied?
 * 
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * - Only applies to sprite sheets.
 * - Does NOT work with Dragonbones.
 * - Use "DB: Dragonbones Time Scale" instead.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To JS Coordinates
 * - Change home position(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s)'s new home
 *     position.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face JS Coordinates
 * - Causes the unit(s) to face specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to face
 *     towards.
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To JS Coordinates
 * - Moves unit(s) to specified JS Coordinates.
 * - Sideview-only! Uses JavaScript!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   JS: Coordinates:
 *   - Code used to determine the coordinates for the target(s) to move to.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *     
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the projectile's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 * 
 *     Effect Emulation:
 * 
 *       Action Effect?:
 *       - Emulate current Action Effect when projectile reaches target?
 *       - Only works with start and goal targets.
 * 
 *       Item Effect ID?:
 *       - Emulate an Item Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Skill Effect ID?:
 *       - Emulate a Skill Effect when projectile reaches target?
 *       - Use 0 to not use.
 *       - Only works with start and goal targets.
 * 
 *       Common Event ID:
 *       - Plays a Once Parallel Common Event upon reaching target.
 *       - Use 0 to not use.
 *       - Works regardless of start/goal targets.
 * 
 *     End Animation ID:
 *     - Plays an animation when projectile reaches target.
 *     - Use 0 to not use.
 *     - Requires VisuMZ_1_BattleCore v1.86+.
 *     - Requires VisuMZ_3_ActSeqProjectiles v1.09+.
 * 
 *       Mirror Animation:
 *       - Mirror the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 *       Mute Animation:
 *       - Mute the effect animation?
 *       - Requires VisuMZ_1_BattleCore v1.86+.
 *       - Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 * 
 * === Action Sequences - Voice ==
 * 
 * ---
 *
 * VOICE: Common Line
 * - Plays a common voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line:
 *   - What voice line do you wish to play?
 *
 * ---
 *
 * VOICE: Play Special Line
 * - Plays a special voice line from target battler(s).
 * - Requires VisuMZ_3_BattleVoices!
 *
 *   Speaker Target(s):
 *   - Select unit(s) to play voice lines from.
 *
 *   Voice Line Type:
 *   - What voice line type do you wish to play?
 *     - Action Name
 *     - Chant Line
 *     - Item Name
 *     - Skill Name
 *     - Spell Name
 *     - Unique Lines
 *
 *   Name / Letter:
 *   - What voice letter/name do you want to play?
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   End Battle Show?:
 *   - Show or hide popups upon victory or escape?
 *   - Used to hide battle-state removal popups.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   Turn End Buffs Expire?:
 *   - Normally, buffs expire after all actions end.
 *   - But here, you can have buffs expire on turn end.
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 * 
 *     Wait Frames:
 *     - How many frames should the battle log wait after text?
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Status?:
 *   - Add the "Status" command to the Command Window?
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Status
 *       - Adds the status command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 * The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 * battle layouts. It does not appear for other battle layouts.
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: In-Battle Status Window
 * ============================================================================
 *
 * Added with Battle Core version 1.84, this new window allows the player to
 * view the status of the current active party. If the actors have states and
 * buffs, the player can scroll through them and read about their effects
 * through the help window.
 * 
 * If you would like to manage which parameters can appear here, this can be
 * done through the VisuMZ_0_CoreEngine's "Parameter Settings" and adjust which
 * parameters are shown through "Extended Parameters". These settings will
 * reflect in the In-Battle Status window, too. Otherwise, the parameters that
 * will be shown will only be MaxHP, MaxMP, ATK, DEF, MAT, MDF, AGI, and LUK.
 * 
 * The In-Battle Status can also be used to view enemies (if the parameter is
 * enabled). To view enemies, players must scroll through all the actors before
 * viewing enemies. Enemies will have their battler graphic displayed. If the
 * enemy has a SV Battler graphic, that will be displayed instead. However, if
 * the enemy has a Dragonbones, then the database battler graphic is displayed
 * to match any of the turn order displays as those also use the same graphic.
 * 
 * Enemies will not display the current HP on their In-Battle Status gauges.
 * Instead, they will display what percentage their HP, MP, and/or TP is at.
 * This is primarily due to how gauges do not support large numbers well and
 * showing the percentage values are better for this scene.
 *
 * ---
 * 
 * General Settings
 * 
 *   Status Icon:
 *   - The icon used for the Status command.
 * 
 *   Status Graphic:
 *   - Choose how the actor graphic appears for In-Battle Status.
 * 
 *   Help Description:
 *   - Text displayed when selecting the Status command.
 * 
 * ---
 * 
 * Enemy Settings
 * 
 *   Allow View Enemies?:
 *   - Allows players to view enemy stats (even if limited)?
 * 
 *   Show Level?:
 *   - Shows the enemy's level in the In-Battle Status?
 * 
 *   Hidden Parameter:
 *   - The text that appears if a parameter value is hidden.
 * 
 *     Show Params Always:
 *     - Always show exact enemy parameter values.
 * 
 *     Show Battle Test:
 *     - Show exact enemy parameter values in battle test.
 * 
 *     Show If Defeated:
 *     - Show exact enemy parameter values if enemy has been defeated before.
 * 
 * ---
 * 
 * Page Buttons:
 * 
 *   Show Page Buttons?:
 *   - Shows page buttons to switch between actors?
 *   - Still requires Touch UI option to be on.
 * 
 *   Large UI Position?:
 *   - If using a large resolution, position the page buttons on which side?
 * 
 *  Offset X
 *  - Offsets the page buttons x position.
 *  - Negative: left. Positive: right.
 * 
 *  Offset Y
 *  - Offsets the page buttons y position.
 *  - Negative: up. Positive: down.
 * 
 * ---
 * 
 * Parameter Display
 * 
 *   Increased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 *   Decreased Value
 *   - How are increased parameter values displayed?
 *   - %1 - Parameter Value
 * 
 * ---
 * 
 * States Display
 * 
 *   Max Width
 *   - Maximum width of the states list display.
 * 
 *   List States?
 *   - Lists states in the states list display?
 * 
 *   List Buffs?
 *   - Lists buffs in the states list display?
 * 
 *   List Debuffs?
 *   - Lists debuffs in the states list display?
 * 
 *   Buffs/Debuffs Display:
 * 
 *     Buff Name Format
 *     - Text format used to represent buffs.
 *     - %1 - Parameter Name
 * 
 *     Debuff Name Format
 *     - Text format used to represent debuffs.
 *     - %1 - Parameter Name
 * 
 *   Normal State:
 * 
 *     Normal Icon
 *     - Icon used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 *     Normal Text
 *     - Text used to represent normal state (unaffected by states, buffs, or
 *       debuffs).
 * 
 * ---
 * 
 * Help Descriptions
 * 
 *   State Help Format:
 *   - Text format used for state help descriptions
 *   - %1 - Description; %2 - Turns/Actions Remaining
 * 
 *   Buff Help Format:
 *   - Text format used for Buff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Debuff Help Format:
 *   - Text format used for Debuff help descriptions
 *   - %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * 
 *   Normal State:
 *   - Help description used to explain normal state (unaffected by states,
 *     buffs, or debuffs).
 * 
 *   Turns/Actions Left:
 * 
 *     Actions Format:
 *     - Text format used to represent actions remaining.
 *     - %1 - Actions; %2 - Color
 * 
 *     Turns Format:
 *     - Text format used to represent turns remaining.
 *     - %1 - Turns; %2 - Color
 * 
 *     Passive Text:
 *     - Text used to represent a passive.
 * 
 * ---
 * 
 * Window Settings
 * 
 *   Background Type:
 *   - Select background type for this window.
 * 
 *   JS: Draw Data:
 *   - Code used to draw battler data.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Multi-Target Windows Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters adjust how the Multi-Target Windows appear
 * in battle. These windows are visible when selecting an enemy or actor while
 * using a skill/item that has the <Single or Multiple Select> notetag.
 * 
 * Those wondering why this isn't regulated to a command left or right of the
 * enemies and actors is because mouse controls and touch controls would not be
 * able to select all enemies or all allies that way.
 *
 * ---
 * 
 * Properties
 * 
 *   Window Width:
 *   - What is the width used for the Multi-Target Window?
 * 
 *   Background Type:
 *   - Select background type for these windows.
 * 
 *   Show Button:
 *   - Shows the keyboard/controller button to press?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 * ---
 * 
 * Vocab
 * 
 *   All Actors:
 *   - What is the text used for the "All Actors" button?
 * 
 *   All Enemies:
 *   - What is the text used for the "All Enemies" button?
 * 
 * ---
 * 
 * Offsets > Actor Offsets
 * Offsets > Enemy Offsets
 * 
 *   Offset X:
 *   - Offsets the button's x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the button's y position.
 *   - Negative: up. Positive: down.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Combo Window Settings
 * ============================================================================
 * 
 * If enabled, this window will display updated information about the total
 * amount of hits performed and total damage/healing value executed for HP.
 * 
 * This only applies when HP damage is directly dealt through action effects.
 * It does NOT apply for MP damage, TP damage, states, regeneration, or event
 * commands.
 * 
 * If you would like to adjust the Damage Combo Window mid-action, you can use
 * the following script calls to do so:
 * 
 *     $comboWindowReset()
 *     - Resets the all values found in the damage combo window.
 * 
 *     $comboWindowIncreaseHits(x)
 *     - Increases the current hit counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - Example: $comboWindowIncreaseHits(2)
 * 
 *     $comboWindowIncreaseDamage(x)
 *     - Increases the current total damage counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any healing added in the damage counter window.
 *     - Example: $comboWindowIncreaseDamage(100)
 * 
 *     $comboWindowIncreaseHealing(x)
 *     - Increases the current total heal counter in the combo window by 'x'.
 *     - Insert a number for 'x'.
 *     - This will offset any damage added in the damage counter window.
 *     - Example: $comboWindowIncreaseHealing(200)
 * 
 * ---
 * 
 * General Settings:
 * 
 *   Enable?:
 *   - Add the Combo Window to show in battle?
 * 
 * ---
 * 
 * Appearance Settings:
 * 
 *   Custom Font:
 *   - Insert the custom font face name here.
 *   - Use VisuMZ_1_MessageCore to register new fonts.
 * 
 *   Text Align:
 *   - Text alignment for this window?
 * 
 *   JS: Draw Data:
 *   - Code used to draw the data in this window.
 * 
 * ---
 * 
 * Vocabulary:
 * 
 *   Damage Combo Format:
 *   - Text format used to display total hits for damage.
 *   - %1 - Total Hits
 * 
 *   Healing Combo Format:
 *   - Text format used to display total hits for healing.
 *   - %1 - Total Hits
 * 
 *   Damage Total Format:
 *   - Text format used to display total value for damage.
 *   - %1 - Total Damage
 * 
 *   Healing Total Format:
 *   - Text format used to display total value for healing.
 *   - %1 - Total Healing
 * 
 * ---
 * 
 * Position Settings:
 * 
 *   Fade Shift X:
 *   - Shifts the windows x position when fading.
 *   - Negative: left. Positive: right.
 * 
 *   Fade Shift Y:
 *   - Shifts the windows y position when fading.
 *   - Negative: up. Positive: down.
 * 
 *   Offset X:
 *   - Offsets the windows x position.
 *   - Negative: left. Positive: right.
 * 
 *   Offset Y:
 *   - Offsets the windows y position.
 *   - Negative: up. Positive: down.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 * 
 * ---
 * 
 * Updating Settings:
 * 
 *   Number Roll Duration:
 *   - Frame duration to roll damage numbers.
 *   - 60 frames = 1 second.
 * 
 *   Minimum Stay Duration:
 *   - Frame duration to stay visible minimum. 
 *   - 60 frames = 1 second.
 * 
 *   Minimum Hit Visible:
 *   - Minimum hits before combo window becomes visible?
 * 
 *   Opacity Speed:
 *   - Opacity speed when fading in/out.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 * 
 *   Shake Flinch:
 *   - Perform a shake flinch when taking damage?
 * 
 *     Max Duration:
 *     - Maximum duration a shake flinch can have.
 *     - This is reduced relative to the amount of damage taken.
 * 
 *     Max Power:
 *     - The power rating of a shake flinch at full damage.
 *     - This is reduced relative to the amount of damage taken.
 *
 * ---
 * 
 * Frontview Battlers
 * 
 *   Portrait Animations:
 * 
 *     Each Target:
 *     - Place animations on top for "Each Target" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of All:
 *     - Place animations on top for "Center of All" display types?
 *     - Does not apply to MV animations.
 * 
 *     Center of Screen:
 *     - Place animations on top for "Center of Screen" display types?
 *     - Does not apply to MV animations.
 * 
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor:
 * 
 *     Anchor: X:
 *     - Default X anchor for Sideview Battlers.
 * 
 *     Anchor: Y:
 *     - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Position:
 * 
 *     Offset X:
 *     - Offsets X position where actor is positioned.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position where actor is positioned.
 *     - Negative values go up. Positive values go down.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   State Overlay:
 * 
 *     Offset X:
 *     - Offsets X position for state overlay on actor.
 *     - Negative values go left. Positive values go right.
 * 
 *     Offset Y:
 *     - Offsets Y position for state overlay on actor.
 *     - Negative values go up. Positive values go down.
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     As Target:
 *     - Shows enemy name when enemy is a target.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 * 
 *     Temporary Visibility:
 *     - Number of frames enemy's name temporarily visible after taking an
 *       action effect in battle.
 *     - 60 frames = 1 second.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 * 
 * Aspect Defaults
 * 
 *   Name Format:
 *   - Default name aspect format.
 *   - %1 - Original Enemy Name
 * 
 *   Name Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Icon:
 *   - Default icon used for aspect.
 *   - Use <Aspect Icon: x> to change icon.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Animation Duration:
 *   - How many frames should gauges animate themselves?
 *   - Default: 20 frames.
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.86: January 16, 2025
 * * Bug Fixes!
 * ** Fixed a bug where during Active TPB, actors were not showing damage
 *    motions. Fix made by Olivia.
 * ** Fixed a bug regarding the in-battle status requiring that the Main Menu
 *    Core to be installed when other plugins are also present. Fix by Olivia.
 * ** Fixed a bug where <Exclude From Status Listing> notetag was not working
 *    properly due to a documentation typo of <Exclude From Status List>. Both
 *    notetags should now work. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added clarity for Plugin Parameters > Party Command Window Settings >
 *    Help Window
 * ** Added clarity for Plugin Parameters > Actor Command Window Settings >
 *    Help Window
 * *** The Help Window will only appear for 'Border' and 'Frontview Battle UI'
 *     battle layouts.
 * * New Features!
 * ** New notetag added by Irina:
 * *** <Under>
 * **** If this tag is found in an animation's name, the animation will appear
 *      under battlers while in battle.
 * ***** This effect only applies to battlers in the battle scene.
 * ***** Under effect is NOT applied to status window portraits.
 * ***** Under effect is NOT applied to projectile animations.
 * ** Added new Action Sequence Projectile settings:
 * *** Extra Settings > End Animation ID:
 * **** Plays an animation when projectile reaches target.
 * **** Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * 
 * Version 1.85: October 17, 2024
 * * Bug Fixes!
 * ** Fixed a bug where the enemy name's visibility would remain after an
 *    action has taken place and before inputting is done. Fix made by Olivia.
 * ** Fixed a bug where the "Name Visibility As Target" plugin parameter did
 *    not work properly. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Updated <Help Description> notetag documentation:
 * *** This is used as a common notetag between Battle Core's state
 *     descriptions and State Tooltips' state descriptions.
 * * New Features!
 * ** New Notetag added by Olivia:
 * *** <In-Battle Status Description>
 * **** A prioritized help description used to separate from the common help
 *      description notetag shared with State Tooltips.
 * ** New Plugin Parameters added by Olivia:
 * *** Actor Battlers > Frontview > Portrait Animations > Each Target
 * *** Actor Battlers > Frontview > Portrait Animations > Center of All
 * *** Actor Battlers > Frontview > Portrait Animations > Center of Screen
 * **** Place animations on top or behind for these display types?
 * *** Battle Log > Action Changes > Show Counter? > Wait Frames
 * *** Battle Log > Action Changes > Show Reflect? > Wait Frames
 * *** Battle Log > Action Changes > Show Substitute? > Wait Frames
 * **** If devs allow the results of counters, reflects, and substitutes, there
 *      wasn't enough time before to allow the text to be visible on screen.
 *      You can now adjust how many frames are now visible if text is shown.
 * **** Default values are left at 0 as to not interrupt currently existing
 *      action sequences.
 * 
 * Version 1.84: September 19, 2024
 * * Bug Fixes!
 * ** Fixed a bug where Action Sequence "MOVE: Change Home By Distance" would
 *    also be affected by the actor and enemy position offsets. Fixed by Irina.
 * ** Fixed a bug where Action Sequence "MECH: STB Exploit Effect" caused a
 *    crash. Fix made by Arisu.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Command added by Arisu:
 * *** ANIM: Change Battle Portrait (JS)
 * **** Changes the battle portrait of the actor through JavaScript.
 * **** Can be used outside of battle/action sequences.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > In-Battle Status Window
 * **** This new window allows the player to view the status of the current
 *      active party. If the actors have states and buffs, the player can
 *      scroll through them and read about their effects through the help
 *      window.
 * ** New Notetags added by Olivia:
 * *** <Help Description>
 * **** Assigns a help description for the state that's displayed under the
 *      new "Status" actor command.
 * *** <Exclude From Status Listing>
 * **** Excludes the state from being displayed in the status listing.
 * *** <Aspect Name: x>
 * *** <Aspect Icon: x>
 * *** <Aspect Color: x>
 * *** <Aspect Description>
 * **** Used to define enemy aspect that will show up in the In-Battle Status
 *      as well as other supported plugins.
 * *** <Popup Position: Head>
 * *** <Popup Position: Center>
 * *** <Popup Position: Base>
 * **** Changes the popup starting position for this enemy.
 * *** <Popup Offset X: +x>
 * *** <Popup Offset X: -x>
 * *** <Popup Offset Y: +y>
 * *** <Popup Offset Y: -y>
 * **** Changes the popup X/Y position offset for this enemy.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Party Command Window > Add Status?
 * **** Add the "Status" command to the Command Window? 
 * *** Plugin Parameters > Actor Command Window > Command List
 * **** Updated to have the "Status" command.
 * *** Plugin Parameters > In-Battle Status Window
 * **** Completely new! View the help file for more information.
 * *** Plugin Parameters > Enemy > Aspects
 * **** Used for the In-Battle Status as well as other supported plugins.
 * 
 * Version 1.83: May 16, 2024
 * * Bug Fixes!
 * ** Fixed a bug where sometimes, a battler in Active TPB would not refresh
 *    their motion after a state has been removed. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Fixed a typo with MP Life Steal notetag entry.
 * * Feature Updates!
 * ** Added fail safes for some plugin parameters in case users outright delete
 *    plugin parameter values without introducing something to replace them.
 *    Update made by Olivia.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** GRID: Add Trigger to Node JS
 * **** Adds JS Trigger to target node. Target node cannot have battler.
 * **** Requires VisuMZ_2_BattleGridSystem!
 * ** New notetags added by Olivia:
 * *** <JS Accuracy>
 * *** <JS Accuracy as User>
 * *** <JS Accuracy as Target>
 * **** Allows usage of JavaScript code to modify accuracy rates of actions in
 *      battle through skills, items, and trait objects.
 * *** <JS Critical Rate as User>
 * *** <JS Critical Rate as Target>
 * **** Allows usage of JavaScript code to modify critical rate of actions in
 *      battle through skills, items, and trait objects.
 * **** <JS Critical Rate> version already exists.
 * ** New Plugin Parameters added by Olivia
 * *** Plugin Parameters > Damage Combo Window
 * **** If enabled, this window will display updated information about the
 *      total amount of hits performed and total damage/healing value executed
 *      for HP.
 * *** Plugin Parameters > Actor Battler Settings > Sideview Battlers >
 *     State Overlay > Offset X/Y
 * **** Offsets X/Y position for state overlay on actor.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     As Target
 * **** Shows enemy name when enemy is a target.
 * *** Plugin Parameters > Enemy Battler Settings > Name Visibility >
 *     Temporary Visibility
 * **** Number of frames enemy's name temporarily visible after taking an
 *      action effect in battle.
 * 
 * Version 1.82: March 14, 2024
 * * Bug Fixes!
 * ** Home movement changes did not acknowledge actor and enemy offset X/Y
 *    positions. This should now be reflected properly. Fix made by Irina.
 * ** Fixed a bug where in active TPB/ATB, revived actors may not resume normal
 *    motions after collapsing. Fix made by Olivia.
 * 
 * Version 1.81: February 15, 2024
 * * Bug Fixes!
 * ** Fixed a bug that would cause active TPB inputting actors to not show
 *    their damage or evasion motions. Fix made by Olivia.
 * ** Fixed a bug that would cause a crash upon motion changes. Fix by Olivia.
 * ** Fixed an incorrect spelling of "Anger" for "ANIM: Balloon Animation" that
 *    prevented it from working properly.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Show Animation JS
 * **** Plays the a specific animation on unit(s). Uses JavaScript to determine
 *      animation ID.
 * ** New Action Sequences added for future plugin: VisuMZ_2_BattleGridSystem
 * *** GRID: Action Animation at Node
 * *** GRID: Add Passive State(s) to Node
 * *** GRID: Add Trigger to Node
 * *** GRID: Animation ID at Node
 * *** GRID: Animation JS at Node
 * *** GRID: Animation Type at Node
 * *** GRID: Move Target(s) In Direction
 * *** GRID: Pull To Target Node
 * *** GRID: Push From Target Node
 * *** GRID: Remove All Passive States from Node
 * *** GRID: Remove Passive State(s) from Node
 * *** GRID: Remove Trigger from Node
 * *** GRID: Teleport To Node
 * *** GRID: Traverse To Node
 * **** Requires the future plugin VisuMZ_2_BattleGridSystem!
 * **** Read the help section for more information on these.
 * 
 * Version 1.80: January 18, 2024
 * * Bug Fixes!
 * ** Fixed a crash that would occur with <Disperse Damage> when used outside
 *    of battle. Fix made by Irina.
 * ** Fixed a crash that would occur with certain enemy graphics when images
 *    used for them would disappear. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia:
 * *** ANIM: Guard Animation
 * *** ANIM: Item Animation
 * *** ANIM: Skill Animation
 * **** Plays the animation associated with the user's guard action (if any),
 *      or a specific item/skill.
 * *** MECH: Emulate Attack Effect
 * *** MECH: Emulate Guard Effect
 * *** MECH: Emulate Item Effect
 * *** MECH: Emulate Skill Effect
 * **** Emulate an "Action Effect" but using a the user's attack skill, guard
 *      skill, specific item, or specific skill instead of the current action.
 * **** Essentially lets you perform the mechanics of another action without
 *      having to use another action or needing to pay that action's costs.
 * *** MECH: Emulate Skill Cost
 * **** Pick a skill for target(s) to emulate paying the cost of.
 * **** Includes cooldowns and limited uses.
 * *** MECH: State Turns Change By
 * *** MECH: State Turns Change To
 * **** Changes target(s) state turns by an amount/to a certain value.
 * **** Requires VisuMZ_1_SkillsStatesCore!
 * *** Projectile action sequences have new Extra Features!
 * **** See v1.08 changes for VisuMZ_3_ActSeqProjectiles.
 * 
 * Version 1.79: December 14, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Arisu:
 * *** ANIM: Balloon Animation
 * **** Plays a balloon animation on target(s).
 * *** ANIM: Balloon Icon (Single)
 * *** ANIM: Balloon Icon (Range)
 * *** ANIM: Balloon Icon (Specific)
 * **** Plays a balloon animation using an icon on target(s).
 * **** Requires VisuMZ_4_IconBalloons!
 * 
 * Version 1.78: October 12, 2023
 * * Bug Fixes!
 * ** Fixed a bug that is caused by using the actor escape command not escaping
 *    properly in battle and causing a freeze. Fix made by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Parameters > Mechanics > Turn End Buffs Expire?
 * **** Normally, buffs expire after all actions end.
 * **** But here, you can have buffs expire on turn end.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.77: August 17, 2023
 * * Bug Fixes!
 * ** Fixed a bug where for TPB, actions aimed at dead targets would not
 *    redirect to suitable targets. Fix made by Olivia.
 * ** Fixed a bug where dual wielding would not use a weapon if it was equipped
 *    in the second weapon slot if the first weapon slot was empty. Fix made
 *    by Olivia.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Added compatibility for VisuStella MZ Battle Voices Action Sequences.
 * * Documentation Update!
 * ** Help file updated for new features.
 * 
 * Version 1.76: July 13, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequences added by Olivia and sponsored by NSG:
 * *** MOVE: Change Home To JS Coordinates
 * **** Change home position(s) to specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Face JS Coordinates
 * **** Causes the unit(s) to face specified JS Coordinates. Sideview-only!
 *      Uses JS!
 * *** MOVE: Move To JS Coordinates
 * **** Moves unit(s) to specified JS Coordinates. Sideview-only! Uses JS!
 * 
 * Version 1.75: March 16, 2023
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia and sponsored by Anon:
 * *** <HP Life Steal: x%>
 * *** <MP Life Steal: x%>
 * *** <HP Life Steal hitType: +/-x%>
 * *** <MP Life Steal hitType: +/-x%>
 * *** <Cancel Life Steal>
 * *** <Guard Life Steal>
 * *** <Disarm Life Steal>
 * *** <Negative Life Steal>
 * **** Life Steal properties involving HP/MP are now added. They will restore
 *      a portion of the dealt HP/MP damage to the target.
 * **** This is a different mechanic from Drain HP/Drain MP and cannot be used
 *      together to prevent clashing.
 * **** Read the help file for more information.
 * 
 * Version 1.74: February 16, 2023
 * * Bug Fixes!
 * ** Fixed a bug that would cause a crash if your basic attack skill somehow
 *    manages to target neither an enemy nor an actor. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Auto-action sequence for jumping forward and attacking is now reinstated
 *    so that it's only disabled when the target and user are on the same side.
 *    If there is no target, a jump still occurs for visual player feedback.
 *    Update made by Olivia.
 * * New Features!
 * ** New notetag effect added by Olivia and sponsored by AndyL:
 * *** <Cannot Target User>
 * **** This will cause the action to be unable to select the user as target.
 * **** This is not a targeting scope. Instead, it is used in addition to any
 *      other targeting scopes out there.
 * 
 * Version 1.73: January 20, 2023
 * * Bug Fixes!
 * ** Active TPB custom action sequences will no longer play differently due to
 *    queued inputting actors causing motion refreshes. Fix made by Arisu.
 * ** Corrected and updated Anti-Tint UI animation offsets for MV animations.
 *    Fix made by Irina.
 * ** Fixed a problem with Sideview Battlers not working properly. Fix made
 *    by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for to add the following text to the <Target: x>
 *    notetag entries in order to avoid confusion.
 * *** This will overwrite the existing database scope and ignore the
 *     database's existing scope in favor of this.
 * * Feature Update!
 * ** <Extend: x> Troop Name Tag is now also usable as a Troop Comment Tag.
 * ** Action Sequence targeting has been updated with two new types "special"
 *    and "special x", to be used for future plugins.
 * * New Features!
 * ** New Notetags added by Irina and sponsored by AndyL:
 * *** <Target: Ally or Enemy>
 * *** <Target: Enemy or Ally>
 * **** Allows the player to target allies or enemies with the skill/item.
 * **** See help file for more information.
 * *** <Single or Multiple Select>
 * **** This will allow the skill/item to be able to select either single
 *      targets or multiple targets at once.
 * **** See help file for more information.
 * *** <Disperse Damage>
 * **** This will cause any damage dealt by this skill to be split equally
 *      amongst all targets of the skill including repeats.
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Multi-Target Windows
 * **** Settings that alter the Multi-Target Windows in battle.
 * 
 * Version 1.72: December 15, 2022
 * * Bug Fixes!
 * ** Fixed a transformation of a sideview enemy to a static enemy and back not
 *    working properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Feature!
 * ** New Plugin Parameter added by Irina!
 * *** Plugin Parameters > HP Gauges > Settings > Animation Duration
 * **** How many frames should gauges animate themselves? Default: 20 frames.
 * ** New Plugin Parameters added by Yanfly!
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Power
 * *** Plugin Parameters > Actor Battler Settings > Shake Flinch > Max Duration
 * **** These new plugin parameters will cause targets that take HP damage to
 *      shake (in addition to a regular flinch) to provide better visual
 *      feedback to the player.
 * **** Shake Flinch will be kept disabled by default and only turned on when
 *      you want it to be.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.71: November 10, 2022
 * ** Fixed a problem with repeating animations from Visual State Effects
 *    causing softlocks. Fix made by Olivia.
 * 
 * Version 1.70: October 6, 2022
 * * Bug Fixes!
 * ** Fixed a problem with the "Border" style where if a battle portrait
 *    changed midway through the battle, the portrait shown didn't actually
 *    update properly. Fix made by Irina.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Olivia:
 * *** MECH: Active Chain Input Disable
 * **** Disables input for Active Chain Skills at this time.
 * **** Requires VisuMZ_3_ActiveChainSkills!
 * ** New Plugin Parameter added by Olivia and sponsored by Anon:
 * *** Plugin Parameters > Damage Settings > Popups > End Battle Show?
 * **** Show or hide popups upon victory or escape?
 * **** Used to hide battle-state removal popups.
 * 
 * Version 1.69: September 7, 2022
 * * Compatibility Update!
 * ** Better compatibility with VisuMZ Active Chain Skills.
 * ** Compatibility will be seen with VisuMZ_3_ActiveChainSkills version 1.02.
 * * Documentation Update!
 * ** Added notes to the following Action Sequences:
 * *** MOTION: Clear Freeze Frame and MOTION: Freeze Motion Frame
 * **** Only applies to sprite sheets.
 * **** Does NOT work with Dragonbones.
 * **** Use "DB: Dragonbones Time Scale" instead.
 * * Feature Update!
 * ** Reduced MV Animation misalignment when Screen Resolution does not match
 *    the UI Area Resolution. Update by Arisu.
 * ** Command Remember will now remember the locations of single skills. Update
 *    made by Olivia.
 * 
 * Version 1.68: August 4, 2022
 * * Feature Update!
 * ** Damage popups are now automatically cleared upon starting battles. This
 *    is to ensure that, if for some reason, residual damage popup requests
 *    will not be retained. Update made by Olivia.
 * 
 * Version 1.67: July 28, 2022
 * * Feature Updates!
 * ** Rounding window coordinates have been added for for 'XP' and 'Portrait'
 *    styles when window sizes happen to land on non-divisible numbers. Update
 *    made by Irina.
 * ** Enemy name position rounding is now enforced. Update made by Irina.
 * 
 * Version 1.66: July 14, 2022
 * * Bug Fixes!
 * ** Fixed a bug that caused the various Battleback Scaling JS custom plugin
 *    parameters to not work properly. Fix made by Irina.
 * 
 * Version 1.65: July 7, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Automatic action motions for HP and MP Recovery (Certain Hit type) will
 *    now use the "skill" cast SV animation instead of attack animation to
 *    better match the default RPG Maker MZ cast animation. Update by Olivia.
 * * New Features!
 * ** New troop name tag added by Olivia:
 * *** <Extend: x> and <Extend: x, x, x>
 * **** Adds enemies from another troop to the current troop.
 * **** Enemies from another troop will retain their database positions.
 * **** Extended troop members will be added in the order they're listed.
 * **** Be cautious of how many enemies you add as too many will lag the battle
 *      system. We are not responsible for frame drops due to this.
 * 
 * Version 1.64: June 16, 2022
 * * Bug Fixes!
 * ** "All Skills" battle command should now work with the updated version of
 *    VisuMZ Skills & States Core. Fix madde by Olivia.
 * * Compatibility Update
 * ** Plugins should be more compatible with one another.
 * 
 * Version 1.63: May 26, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** HP Gauge sprite now properly synchs with battler location.
 * * New Features!
 * ** New Action Sequence Effects added by Irina and sponsored by MirageV:
 * *** INJECT action sequence series
 * **** See the Action Sequence Impact changelog for details.
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonAnimation
 * @text ANIM: Balloon Animation
 * @desc Plays a balloon animation on target(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg Balloon:str
 * @text Balloon Type
 * @type select
 * @option Exclamation
 * @option Question
 * @option Music Note
 * @option Heart
 * @option Anger
 * @option Sweat
 * @option Frustration
 * @option Silence
 * @option Light Bulb
 * @option Zzz
 * @option User-defined 1
 * @option User-defined 2
 * @option User-defined 3
 * @option User-defined 4
 * @option User-defined 5
 * @desc What kind of balloon should be played on target(s)?
 * @default Exclamation
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIcon
 * @text ANIM: Balloon Icon (Single)
 * @desc Plays a balloon animation using an icon on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg IconIndex:num
 * @text Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconRange
 * @text ANIM: Balloon Icon (Range)
 * @desc Plays a balloon animation an icon range on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg startIcon:num
 * @text Starting Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg endIcon:num
 * @text Ending Icon Index
 * @desc Insert the ID of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default 0
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_BalloonIconSpecific
 * @text ANIM: Balloon Icon (Specific)
 * @desc Plays a balloon animation with specific icons on target(s).
 * Requires VisuMZ_4_IconBalloons!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 *
 * @arg icons:arraynum
 * @text Icons
 * @type string[]
 * @desc Insert the ID(s) of the icon to show.
 * Tip: Right click > Insert Icon Index
 * @default []
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait for balloon animation completion before continuing?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait_JS
 * @text ANIM: Change Battle Portrait (JS)
 * @desc Changes the battle portrait of the actor through JavaScript.
 * Can be used outside of battle/action sequences.
 *
 * @arg ActorJS:func
 * @text JS: Actor ID
 * @type note
 * @desc Enter which Actor ID to affect.
 * Uses JavaScript code.
 * @default "// Get Actor ID here.\nlet actorID = 0;\nactorID = $gameParty.members()[0].actorId();\n\n// Return Actor ID\nreturn actorID;"
 *
 * @arg FilenameJS:func
 * @text JS: Filename
 * @type note
 * @desc Enter the filename you wish to use.
 * Uses JavaScript code.
 * @default "// Get Filename here.\nlet filename = 'Actor1_';\nfilename += String(Math.randomInt(8) + 1);\n\n// Return Filename\nreturn filename;"
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_GuardAnimation
 * @text ANIM: Guard Animation
 * @desc Plays the animation associated with the user's guard action (if any).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ItemAnimation
 * @text ANIM: Item Animation
 * @desc Plays the animation associated with a specific item.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimationJS
 * @text ANIM: Show Animation JS
 * @desc Plays the a specific animation on unit(s).
 * Uses JavaScript to determine animation ID.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Select which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_SkillAnimation
 * @text ANIM: Skill Animation
 * @desc Plays the animation associated with a specific skill.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCutin
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCutin
 * @text Action Sequences - Cutins
 * @desc Allows you to have control over Visual Cutin Effects.
 * Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_AddVisualCutinEffect
 * @text CUTIN: Add Visual Cutin Effect
 * @desc Adds the Visual Cutin Effect using these desired settings.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg Basic
 * @text Basic Settings
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @parent Basic
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to use?
 * Only one of each cutin-style type can be present.
 * @default CenterHorzSpan
 * 
 * @arg Targets:arraystr
 * @text Portrait Target
 * @parent Basic
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to grab the Visual Cutin Effect portrait
 * data from. First unit will be used to make portrait.
 * @default ["user"]
 *
 * @arg parallaxFilename:str
 * @text Parallax Filename
 * @parent Basic
 * @type file
 * @dir img/parallaxes/
 * @require 1
 * @desc Pick a parallax to use for the Visual Cutin Effect.
 * Pick (None) to not use a parallax.
 * @default >>>ATTENTION<<<
 *
 * @arg bgColor:str
 * @text Background Color
 * @parent Basic
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #888888
 *
 * @arg ExtraSettings:struct
 * @text Extra Settings
 * @type struct<VisualCutinEffect>
 * @desc Extra Plugin Command settings pertaining to this Visual Cutin Effect.
 * @default {}
 * 
 * @arg WaitForEntrance:eval
 * @text Wait For Entrance
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin entrance is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectAll
 * @text CUTIN: End Visual Cutin Effect (All)
 * @desc Ends all Visual Cutin Effects currently present.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_EndVisualCutinEffectType
 * @text CUTIN: End Visual Cutin Effect (Type)
 * @desc Ends the Visual Cutin Effect with the matching type.
 * Requires VisuMZ_3_VisualCutinEffect!
 * 
 * @arg type:str
 * @text Cutin Style Type
 * @type select
 * @option -
 * @option Whole
 * @option -
 * @option Showcase
 * @option -
 * @option LeftHorzSpan
 * @option CenterHorzSpan
 * @option RightHorzSpan
 * @option -
 * @option LeftHorzSlash
 * @option RightHorzSlash
 * @option -
 * @option LeftVertSlash
 * @option RightVertSlash
 * @option -
 * @option LeftMajor
 * @option RightMajor
 * @option -
 * @option LeftMinor
 * @option CenterMinor
 * @option RightMinor
 * @option -
 * @option LeftDiamond
 * @option CenterDiamond
 * @option RightDiamond
 * @option -
 * @option LeftGemstone
 * @option CenterGemstone
 * @option RightGemstone
 * @option -
 * @option TopLeftQuad
 * @option TopRightQuad
 * @option BottomLeftQuad
 * @option BottomRightQuad
 * @option -
 * @option TopLeftCorner
 * @option TopRightCorner
 * @option BottomLeftCorner
 * @option BottomRightCorner
 * @option -
 * @option Row1stThird
 * @option Row2ndThird
 * @option Row3rdThird
 * @option -
 * @option Row1stFourth
 * @option Row2ndFourth
 * @option Row3rdFourth
 * @option Row4thFourth
 * @option -
 * @option Row1stFifth
 * @option Row2ndFifth
 * @option Row3rdFifth
 * @option Row4thFifth
 * @option Row5thFifth
 * @option -
 * @option Col1stThird
 * @option Col2ndThird
 * @option Col3rdThird
 * @option -
 * @option Col1stFourth
 * @option Col2ndFourth
 * @option Col3rdFourth
 * @option Col4thFourth
 * @option -
 * @option Col1stFifth
 * @option Col2ndFifth
 * @option Col3rdFifth
 * @option Col4thFifth
 * @option Col5thFifth
 * @option -
 * @option SixPack1
 * @option SixPack2
 * @option SixPack3
 * @option SixPack4
 * @option SixPack5
 * @option SixPack6
 * @option -
 * @option EightPack1
 * @option EightPack2
 * @option EightPack3
 * @option EightPack4
 * @option EightPack5
 * @option EightPack6
 * @option EightPack7
 * @option EightPack8
 * @option -
 * @option TwelvePack1
 * @option TwelvePack2
 * @option TwelvePack3
 * @option TwelvePack4
 * @option TwelvePack5
 * @option TwelvePack6
 * @option TwelvePack7
 * @option TwelvePack8
 * @option TwelvePack9
 * @option TwelvePack10
 * @option TwelvePack11
 * @option TwelvePack12
 * @option -
 * @desc What Visual Cutin Effect style type do you wish to end?
 * @default CenterHorzSpan
 * 
 * @arg WaitForExit:eval
 * @text Wait For Exit
 * @type boolean
 * @on Wait
 * @off Don't Wait
 * @desc Wait until cutin exit is finished before performing
 * the next event command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForEntrance
 * @text CUTIN: Wait for Cutin Entrance
 * @desc Wait until all cutin entrances are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Cutin_WaitForExit
 * @text CUTIN: Wait for Cutin Exit
 * @desc Wait until all cutin exits are finished before performing the next event command. Requires VisuMZ_3_VisualCutinEffect!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceGrid
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakGrid
 * @text Action Sequences - Grid
 * @desc These Action Sequences are Battle Grid System-related.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ActionAnimationAtNode
 * @text GRID: Action Animation at Node
 * @desc Plays action animation at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddPassiveStatesToNode
 * @text GRID: Add Passive State(s) to Node
 * @desc Adds Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to add as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Passive State(s) to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNode
 * @text GRID: Add Trigger to Node
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:num
 * @text Skill ID
 * @type skill
 * @desc Select which Skill ID(s) to add as the trigger.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AddTriggerToNodeJS
 * @text GRID: Add Trigger to Node JS
 * @desc Adds Trigger to target node. Target node cannot have battler.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg SkillID:eval
 * @text JS: Skill ID
 * @desc Use JavaScript to determine what skill ID to add to this node.
 * @default 1
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to add the Trigger Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to add a Trigger to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to add a Trigger to.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationIDAtNode
 * @text GRID: Animation ID at Node
 * @desc Plays specific animation ID at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Play this animation at target node.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:num
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:num
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationJsAtNode
 * @text GRID: Animation JS at Node
 * @desc Uses JS to calculate which animation to play at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg AnimationID:eval
 * @text JS: Animation ID
 * @desc Calculate which animation to play on unit(s).
 * Uses JavaScript to determine animation ID.
 * @default 1
 *
 * @arg Mirror:eval
 * @text Mirror?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mirror Animation
 * @off Don't Mirror
 * @desc Mirror this animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute?
 * @parent AnimationID:eval
 * @type boolean
 * @on Mute Animation
 * @off Don't Mute
 * @desc Mute this animation?
 * @default false
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_AnimationTypeAtNode
 * @text GRID: Animation Type at Node
 * @desc Plays certain animation type at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg Type:str
 * @text Animation Type
 * @type select
 * @option Attack
 * @option Guard
 * @option Item
 * @option Skill
 * @desc What is the animation type you would like to play?
 * @default Attack
 * 
 * @arg Slot:eval
 * @text Slot (Attack Type)
 * @parent Type:str
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 1
 * 
 * @arg ItemID:num
 * @text Item ID (Item Type)
 * @parent Type:str
 * @type item
 * @desc Which item ID will the animation come from?
 * @default 7
 * 
 * @arg SkillID:num
 * @text Skill ID (Skill Type)
 * @parent Type:str
 * @type skill
 * @desc Which skill ID will the animation come from?
 * @default 99
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit's Node do you want to play an animation on?
 * @default Enemy
 *
 * @arg Rank:num
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Rank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg Flank:num
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @type number
 * @min 1
 * @max 10
 * @desc Input the number representing the Flank of the Node
 * you want to play an animation on.
 * @default 1
 *
 * @arg OffsetX:num
 * @text Offset X
 * @desc Offsets the animation x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg OffsetY:num
 * @text Offset Y
 * @desc Offsets the animation y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_MoveTargetsInDirection
 * @text GRID: Move Target(s) In Direction
 * @desc Moves target(s) in a specific direction to other Nodes.
 * Requires VisuMZ_2_BattleGridSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to move.
 * @default ["all targets"]
 * 
 * @arg MoveType:str
 * @text Movement Type
 * @type select
 * @option -
 * @option Exact
 * @option -
 * @option Mid
 * @option -
 * @option Switch
 * @option Switch Mid
 * @option -
 * @option Crash
 * @option Crash Mid
 * @option -
 * @desc Select the Movement type rulings.
 * See VisuMZ_2_BattleGridSystem help file for details.
 * @default Mid
 * 
 * @arg Direction:str
 * @text Direction
 * @parent MoveType:str
 * @type select
 * @option -
 * @option Upward
 * @option Downward
 * @option -
 * @option Up-Forward
 * @option Forward
 * @option Down-Forward
 * @option -
 * @option Up-Backward
 * @option Backward
 * @option Down-Backward
 * @option -
 * @option Up-Leftward
 * @option Leftward
 * @option Down-Leftward
 * @option -
 * @option Up-Rightward
 * @option Rightward
 * @option Down-Rightward
 * @option -
 * @desc Select the movement direction.
 * @default Backward
 *
 * @arg Distance:eval
 * @text Distance
 * @parent MoveType:str
 * @desc The number of nodes to be moved.
 * You may use JavaScript code.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 *
 * @arg SilentMove:eval
 * @text Silent Change?
 * @type boolean
 * @on Silent
 * @off Visual
 * @desc Silent: Discreet changes shown. More apparent later.
 * Visual: Instant changes shown.
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PullToTargetNode
 * @text GRID: Pull To Target Node
 * @desc Pulls battlers towards target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to pull on?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to pull to.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the pull.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_PushFromTargetNode
 * @text GRID: Push From Target Node
 * @desc Pushes battlers away from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to push from?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to push from.
 * @default 1
 *
 * @arg Strength:eval
 * @text Strength
 * @desc Input the strength level of the push.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_ClearPassiveStatesFromNode
 * @text GRID: Remove All Passive States from Node
 * @desc Removes all all Passive State effects at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear the Node for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Passive States from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Passive States from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemovePassiveStatesFromNode
 * @text GRID: Remove Passive State(s) from Node
 * @desc Remove Passive State(s) at target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg StateIDs:arraynum
 * @text State ID(s)
 * @type state[]
 * @desc Select which State ID(s) to remove as a Passive State.
 * @default []
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to remove the Passive State Node
 * effect for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to remove a Passive State(s) from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_RemoveTriggerFromNode
 * @text GRID: Remove Trigger from Node
 * @desc Removes Trigger from target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to clear Triggers for?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to clear Triggers from.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to clear Triggers from.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TeleportToNode
 * @text GRID: Teleport To Node
 * @desc Teleports user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to teleport to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to teleport to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to teleport.
 * @default 1
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Grid_TraverseToNode
 * @text GRID: Traverse To Node
 * @desc Traverses user/random opponent to target node.
 * Requires VisuMZ_2_BattleGridSystem!
 *
 * @arg UseActionSelectNode:eval
 * @text Action-Selected Node?
 * @type boolean
 * @on Action-Selected
 * @off Prioritize Custom
 * @desc Use Action-Selected Node Coordinates if possible?
 * Requires "Empty" or "Any" for <Target: x Grid Node>
 * @default true
 *
 * @arg Unit:str
 * @text Unit
 * @parent UseActionSelectNode:eval
 * @type select
 * @option Actor
 * @option Enemy
 * @option Friend
 * @option Opponent
 * @desc Which unit do you want to traverse to?
 * @default Actor
 *
 * @arg Rank:eval
 * @text Rank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Rank of the Node
 * you want to traverse to.
 * @default 1
 *
 * @arg Flank:eval
 * @text Flank
 * @parent UseActionSelectNode:eval
 * @desc Input the number representing the Flank of the Node
 * you want to traverse.
 * @default 1
 *
 * @arg Duration:eval
 * @text Duration
 * @desc Input the number representing the frames used to move.
 * @default 12
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 360
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceInject
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakInject
 * @text Action Sequences - Inject
 * @desc These Action Sequences are related to injected animations.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationStart
 * @text INJECT: Animation Begin
 * @desc Injects and plays a whole spritesheet animation.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to inject the animation on.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/sv_actors/
 * @desc Select the animation spritesheet file.
 * Located in the /img/sv_actors/ folder.
 * @default Untitled
 *
 * @arg horzCells:num
 * @text Horizontal Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many horizontal cells (or columns) are there?
 * @default 1
 *
 * @arg vertCells:num
 * @text Vertical Cells
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many vertical cells (or rows) are there?
 * @default 1
 *
 * @arg frameDelay:num
 * @text Frame Delay
 * @parent Filename:str
 * @type number
 * @min 1
 * @desc How many frames are played inbetween cells?
 * @default 1
 *
 * @arg smooth:eval
 * @text Smooth Bitmap?
 * @parent Filename:str
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth the spritesheet graphic?
 * @default false
 * 
 * @arg Offset
 *
 * @arg offsetX:eval
 * @text Offset X
 * @parent Offset
 * @desc Offsets the X position of the injected animation.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @arg offsetY:eval
 * @text Offset Y
 * @parent Offset
 * @desc Offsets the Y position of the injected animation.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationEnd
 * @text INJECT: Animation End
 * @desc Stops and ends any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to stop injected animation(s).
 * @default ["user"]
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_AnimationPauseResume
 * @text INJECT: Animation Pause/Resume
 * @desc Pauses/resumes any injected animations on target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to pause injected animation(s).
 * @default ["user"]
 *
 * @arg pause:eval
 * @text Pause?
 * @parent Filename:str
 * @type boolean
 * @on Pause
 * @off Resume
 * @desc Pause the injected animation?
 * @default true
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Inject_WaitForInjectAni
 * @text INJECT: Wait For Injected Animation
 * @desc Waits for injected animations to complete before performing
 * next command. Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActiveChainInputDisable
 * @text MECH: Active Chain Input Disable
 * @desc Disables input for Active Chain Skills at this time.
 * Requires VisuMZ_3_ActiveChainSkills!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateAttackEffect
 * @text MECH: Emulate Attack Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * attack skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateGuardEffect
 * @text MECH: Emulate Guard Effect
 * @desc Emulate an "Action Effect" but using a the user's
 * guard skill instead of the current action.
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateItemEffect
 * @text MECH: Emulate Item Effect
 * @desc Emulate an "Action Effect" but using a specific item
 * instead of the current action.
 * 
 * @arg ItemID:eval
 * @text Item ID
 * @type item
 * @desc Which item ID will be emulated?
 * @default 7
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillCost
 * @text MECH: Emulate Skill Cost
 * @desc Pick a skill for target(s) to emulate paying the cost of.
 * Includes cooldowns and limited uses.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will have its cost paid for?
 * Use 0 for current action's skill.
 * @default 0
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EmulateSkillEffect
 * @text MECH: Emulate Skill Effect
 * @desc Emulate an "Action Effect" but using a specific skill
 * instead of the current action.
 * 
 * @arg SkillID:eval
 * @text Skill ID
 * @type skill
 * @desc Which skill ID will be emulated?
 * @default 99
 * 
 * @arg Users:arraystr
 * @text User(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to perform the action's effects.
 * @default ["user"]
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeBy
 * @text MECH: State Turns Change By
 * @desc Changes target(s) state turns by an amount.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns By
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default +1
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if actor(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StateTurnsChangeTo
 * @text MECH: State Turns Change To
 * @desc Changes target(s) state turns to a specific value.
 * Requires VisuMZ_1_SkillsStatesCore!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to affect state turns for.
 * @default ["all targets"]
 *
 * @arg StateID:num
 * @text State ID
 * @type state
 * @desc What is the ID of the state you wish to change turns for?
 * Only works on states that can have turns.
 * @default 5
 *
 * @arg Turns:eval
 * @text Change Turns To
 * @desc How many turns should the state be changed to?
 * You may use JavaScript code.
 * @default 10
 *
 * @arg AutoAddState:eval
 * @text Auto-Add State?
 * @type boolean
 * @on Auto-Add
 * @off Don't Add
 * @desc Automatically adds state if target(s) does not have it applied?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToJsPoint
 * @text MOVE: Change Home To JS Coordinates
 * @desc Change home position(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s)'s new home position.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceJsPoint
 * @text MOVE: Face JS Coordinates
 * @desc Causes the unit(s) to face specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 *
 * @arg PointJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to face towards.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToJsPoint
 * @text MOVE: Move To JS Coordinates
 * @desc Moves unit(s) to specified JS Coordinates.
 * Sideview-only! Uses JavaScript!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DestinationJS:func
 * @text JS: Coordinates
 * @type note
 * @desc Code used to determine the coordinates for the
 * target(s) to move to.
 * @default "// Declare Variables\nconst target = arguments[0];\nlet goalX = 0;\nlet goalY = 0;\n\n// Calculations\ngoalX = Graphics.width / 2;\ngoalY = Graphics.height / 2;\n\n// Return Data\nreturn new Point(goalX, goalY);"
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceVoice
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakVoice
 * @text Action Sequences - Voice
 * @desc Allows you to play battle voices.
 * Requires VisuMZ_3_BattleVoices!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlayCommonLine
 * @text VOICE: Play Common Line
 * @desc Plays a common voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLine:str
 * @text Voice Line
 * @type select
 * @option -
 * @value -
 * @option ---Battle Phase---
 * @value -
 * @option On Battle Start
 * @value BattleStart
 * @option On Battle Input
 * @value BattleInput
 * @option On Battle Victory
 * @value BattleVictory
 * @option Victory => Level Up
 * @value BattleVictoryLevelUp
 * @option Escape => Success
 * @value BattleEscapeSuccess
 * @option Escape => Failure
 * @value BattleEscapeFailure
 * @option -
 * @value -
 * @option ---On Action Start---
 * @value -
 * @option Basic Action => Regular Attack
 * @value ActionStartBasicAttack
 * @option Basic Action => Regular Guard
 * @value ActionStartBasicGuard
 * @option Skill Usage For Allies => Certain Hit
 * @value ActionStartSkillAllyCertainHit
 * @option Skill Usage For Allies => Physical
 * @value ActionStartSkillAllyPhysical
 * @option Skill Usage For Allies => Magical
 * @value ActionStartSkillAllyMagical
 * @option Skill Usage For Enemies => Certain Hit
 * @value ActionStartSkillEnemyCertainHit
 * @option Skill Usage For Enemies => Physical
 * @value ActionStartSkillEnemyPhysical
 * @option Skill Usage For Enemies => Magical
 * @value ActionStartSkillEnemyMagical
 * @option Item Usage For Allies
 * @value ActionStartItemAlly
 * @option Item Usage For Enemies
 * @value ActionStartItemEnemy
 * @option -
 * @value -
 * @option ---Perform Action---
 * @value -
 * @option Basic Action => Attack Motion
 * @value PerformActionBasicAttack
 * @option Basic Action => Critical Action
 * @value PerformActionCritical
 * @option Basic Action => Defeat Opponent
 * @value PerformActionDefeatFoe
 * @option Basic Action => Missed Action
 * @value PerformActionMiss
 * @option Skill Usage => Certain Hit
 * @value PerformActionSkillCertainHit
 * @option Skill Usage => Physical
 * @value PerformActionSkillPhysical
 * @option Skill Usage => Magical
 * @value PerformActionSkillMagical
 * @option -
 * @value -
 * @option ---On HP Change---
 * @value -
 * @option Life State => On Death
 * @value HpChangeDeath
 * @option Life State => On Revive
 * @value HpChangeRevive
 * @option On Damage => Damage <= 0%
 * @value HpChangeDamageNone
 * @option On Damage => Damage < 25%
 * @value HpChangeDamageLight
 * @option On Damage => Damage < 50%
 * @value HpChangeDamageMedium
 * @option On Damage => Damage >= 50%
 * @value HpChangeDamageHeavy
 * @option On Damage => Guarding Damage
 * @value HpChangeDamageGuard
 * @option On Recovery => Recovery < 25%
 * @value HpChangeRecoverLight
 * @option On Recovery => Recovery < 50%
 * @value HpChangeRecoverMedium
 * @option On Recovery => Recovery >= 50%
 * @value HpChangeRecoverHeavy
 * @option -
 * @value -
 * @option ---On Action Result---
 * @value -
 * @option On Miss/Evasion
 * @value ActionResultEvasion
 * @option On Magic Evasion
 * @value ActionResultMagicEvasion
 * @option On Counter
 * @value ActionResultCounter
 * @option On Reflection
 * @value ActionResultReflection
 * @option On Substitute
 * @value ActionResultSubstitute
 * @option -
 * @value -
 * @option ---Buff/Debuff Related---
 * @value -
 * @option On Buff Apply
 * @value BuffAdd
 * @option On Buff Remove
 * @value BuffRemove
 * @option On Debuff Apply
 * @value DebuffAdd
 * @option On Debuff Remove
 * @value DebuffRemove
 * @option -
 * @value -
 * @option ---State Related---
 * @value -
 * @option Positive States => On State Apply
 * @value StatePositiveAdd
 * @option Positive States => text On State Remove
 * @value StatePositiveRemove
 * @option Negative States => On State Apply
 * @value StateNegativeAdd
 * @option Negative States => On State Remove
 * @value StateNegativeRemove
 * @option Neutral States => On State Apply
 * @value StateNeutralAdd
 * @option Neutral States => On State Remove
 * @value StateNeutralRemove
 * @option -
 * @value -
 * @option ---Miscellaneous---
 * @value -
 * @option Voice Preview
 * @value CharaCreatePreview
 * @option -
 * @value -
 * @desc What voice line do you wish to play?
 * @default ActionStartBasicAttack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleVoice_PlaySpecialLine
 * @text VOICE: Play Special Line
 * @desc Plays a special voice line from target battler(s).
 * Requires VisuMZ_3_BattleVoices!
 * 
 * @arg Targets:arraystr
 * @text Speaker Target(s)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play voice lines from.
 * @default ["user"]
 *
 * @arg VoiceLineType:str
 * @text Voice Line Type
 * @type select
 * @option Action Name
 * @value ActionName
 * @option Chant Line
 * @value ChantLine
 * @option Item Name
 * @value ItemName
 * @option Skill Name
 * @value SkillName
 * @option Spell Name
 * @value SpellName
 * @option Unique Lines
 * @value UniqueLine
 * @desc What voice line type do you wish to play?
 * @default ActionName
 *
 * @arg Letter:str
 * @text Name / Letter
 * @type select
 * @option A
 * @option B
 * @option C
 * @option D
 * @option E
 * @option F
 * @option G
 * @option H
 * @option I
 * @option J
 * @option K
 * @option L
 * @option M
 * @option N
 * @option O
 * @option P
 * @option Q
 * @option R
 * @option S
 * @option T
 * @option U
 * @option V
 * @option W
 * @option X
 * @option Y
 * @option Z
 * @desc What voice letter/name do you want to play?
 * @default A
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param BattlebackScale:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","ShowCosts:eval":"true","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat.","HelpParty:str":"Automatically choose an action suitable for combat."}
 *
 * @param InBattleStatus:struct
 * @text In-Battle Status Window
 * @type struct<InBattleStatus>
 * @desc Settings that alter the In-Battle Status window accessed
 * through the "Status" command.
 * @default {"General":"","CmdIconStatus:num":"87","StatusGraphic:str":"face","HelpStatus:str":"View battle member status.","Enemy":"","enemyStatus:eval":"true","enemyShowLevel:eval":"true","enemyHiddenParameter:str":"???","enemyShowParametersAlways:eval":"false","enemyShowParametersIfBattleTest:eval":"true","enemyShowParametersIfDefeated:eval":"true","PageButtons":"","pageOffsetX:num":"+0","pageOffsetY:num":"+0","pageButtons:eval":"true","Parameters":"","buffValueFmt:str":"▲%1","debuffValueFmt:str":"▼%1","States":"","statesMaxWidth:num":"384","drawStates:eval":"true","drawBuffs:eval":"true","drawDebuffs:eval":"true","BuffsDebuffs":"","buffNameFmt:str":"%1▲","debuffNameFmt:str":"%1▼","NormalState":"","normalIcon:num":"84","normalText:str":"Normal","HelpDesc":"","stateHelpFmt:json":"\"%1 %2\"","buffHelpFmt:json":"\"Increases %1 to %3%2\\\\C[0]. %4\"","debuffHelpFmt:json":"\"Decreases %1 to %3%2\\\\C[0]. %4\"","normalHelp:json":"\"Status is currently normal.\"","TurnHelpDesc":"","actionsFmt:str":"\\C[6](Actions %2%1\\C[6])\\C[0]","TurnsFmt:str":"\\C[5](Turns %2%1\\C[5])\\C[0]","passiveText:str":"\\C[4](Passive)\\C[0]","Window":"","StatusWindow_BgType:num":"0","StatusWindow_DrawJS:func":"\"{ // Draw Face and Simple Status\\n    const x = this.colSpacing() / 2;\\n    const h = ImageManager.faceHeight;\\n    const y = h / 2 - this.lineHeight() * 1.5;\\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\\n}\\n{ // Draw Actor Parameters\\n    let maxWidth = this.drawingAreaWidth();\\n    let x1 = 0;\\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\\n\\n    let counter = 0;\\n    const params = this.displayedParams();\\n\\n    let px = x1;\\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\\n    let pw = Math.floor(maxWidth / 2);\\n\\n    if (this._statesWindow.y !== 0) {\\n        this._statesWindow.y = py;\\n    }\\n\\n    for (const param of params) {\\n        this.drawDarkRect(px, py, pw, this.lineHeight());\\n        this.drawParamData(param, px, py, pw);\\n        counter++;\\n        if (counter % 2 === 0) {\\n            px = x1;\\n            py += this.lineHeight();\\n        } else {\\n            px = x2;\\n        }\\n    }\\n}\"","StatusWindow_RectJS:func":"\"const wx = Graphics.boxWidth > 1000 ? 120 : 0;\\nconst wy = this._helpWindow.y + this._helpWindow.height;\\nconst ww = Graphics.boxWidth - (wx * 2);\\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\\nreturn new Rectangle(wx, wy, ww, wh);\""}
 * 
 * @param MultiTarget:struct
 * @text Multi-Target Windows
 * @type struct<MultiTarget>
 * @desc Settings that alter the Multi-Target Windows in battle.
 * @default {"Properties":"","WindowWidth:num":"280","BgType:num":"2","ShowButton:eval":"true","Vocab":"","AllActorsText:str":"All Allies","AllEnemiesText:str":"All Enemies","Offsets":"","ActorOffsets":"","ActorOffsetX:num":"+0","ActorOffsetY:num":"+0","EnemyOffsets":"","EnemyOffsetX:num":"+0","EnemyOffsetY:num":"+0"}
 * 
 * @param ComboWindow:struct
 * @text Damage Combo Window
 * @type struct<ComboWindow>
 * @desc Settings that alter the damage/healing combo window displayed in battle.
 * @default {"General":"","Enable:eval":"true","Appearance":"","CustomFontFace:str":"Arial","TextAlign:str":"left","ComboWindow_DrawJS:func":"\"// Declare Coordinates\\nlet x = 0;\\nlet y = 0;\\n\\n// Hit Text\\nconst hitText = this.hitText();\\nconst hitTextSize = this.textSizeEx(hitText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - hitTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - hitTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(hitText, x, y);\\n\\n// New Line\\ny += Math.ceil(this.lineHeight() * 2/3);\\n\\n// Damage Text\\nconst dmgText = this.damageText();\\nconst dmgTextSize = this.textSizeEx(dmgText);\\nif (this.textAlignment() === 'right') {\\n    x = this.innerWidth - this.itemPadding() - dmgTextSize.width;\\n} else if (this.textAlignment() === 'center') {\\n    x = Math.floor((this.innerWidth - dmgTextSize.width) / 2);\\n} else {\\n    x = this.itemPadding();\\n}\\nthis.drawTextEx(dmgText, x, y);\"","Vocab":"","hitsDmgFmt:str":"\\C[6]%1\\} \\C[4]Hit Combo\\C[0]\\{","hitsHealFmt:str":"\\C[6]%1\\} \\C[4]Heal Combo\\C[0]\\{","totalDmgFmt:str":"\\}\\C[21]Total Damage: \\{\\C[0]%1","totalHealFmt:str":"\\}\\C[21]Total Healing: \\{\\C[24]+%1\\C[0]","Position":"","fadeShiftX:num":"-2","fadeShiftY:num":"+0","PosOffsetX:num":"+0","PosOffsetY:num":"+0","ComboWindow_RectJS:func":"\"const ww = Math.ceil(Graphics.width / 4);\\nconst wh = this.calcWindowHeight(2, true);\\nconst wx = 0 + this.comboWindowOffsetX();\\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\\nreturn new Rectangle(wx, wy, ww, wh);\"","Update":"","updateDuration:num":"20","minimumStayDuration:num":"40","minimumHits:num":"1","opacitySpeed:num":"16"}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param EndBattlePopups:eval
 * @text End Battle Show?
 * @parent Popups
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide popups upon victory or escape?
 * Used to hide battle-state removal popups.
 * @default true
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param SyncBuffExpire:eval
 * @text Turn End Buffs Expire
 * @parent ActionSpeed
 * @type boolean
 * @on Expire
 * @off Don't Expire
 * @desc Normally, buffs expire after all actions end.
 * But here, you can have buffs expire on turn end.
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Frontview Battle UI - Requires VisuMZ_3_FrontviewBattleUI
 * @value frontview_ui
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowCounterWait:eval
 * @text Wait Frames
 * @parent ShowCounter:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowReflectWait:eval
 * @text Wait Frames
 * @parent ShowReflect:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ShowSubstituteWait:eval
 * @text Wait Frames
 * @parent ShowSubstitute:eval
 * @type number
 * @desc How many frames should the battle log wait after text?
 * 60 frames = 1 second.
 * @default 0
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleUp:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddStatus:eval
 * @text Add Status?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Status" command to the Command Window?
 * @default true
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent CommandAddStatus:eval
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option status
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * In_Battle Status Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~InBattleStatus:
 *
 * @param General
 * @text General Settings
 *
 * @param CmdIconStatus:num
 * @text Status Icon
 * @parent General
 * @desc The icon used for the Status command.
 * @default 87
 *
 * @param StatusGraphic:str
 * @text Status Graphic
 * @parent General
 * @type select
 * @option None
 * @value none
 * @option Face
 * @value face
 * @option Map Sprite
 * @value sprite
 * @option Sideview Battler
 * @value svbattler
 * @desc Choose how the actor graphic appears for In-Battle Status.
 * @default face
 *
 * @param HelpStatus:str
 * @text Help Description
 * @parent General
 * @desc Text displayed when selecting the Status command.
 * @default View battle member status.
 *
 * @param Enemy
 * @text Enemy Settings
 *
 * @param enemyStatus:eval
 * @text Allow View Enemies?
 * @parent Enemy
 * @type boolean
 * @on Allow
 * @off Forbid
 * @desc Allows players to view enemy stats (even if limited)?
 * @default true
 *
 * @param enemyShowLevel:eval
 * @text Show Level?
 * @parent Enemy
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the enemy's level in the In-Battle Status?
 * @default true
 *
 * @param enemyHiddenParameter:str
 * @text Hidden Parameter
 * @parent Enemy
 * @desc The text that appears if a parameter value is hidden.
 * @default ???
 *
 * @param enemyShowParametersAlways:eval
 * @text Show Params Always
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Always show exact enemy parameter values.
 * @default false
 *
 * @param enemyShowParametersIfBattleTest:eval
 * @text Show Battle Test
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values in battle test.
 * @default true
 *
 * @param enemyShowParametersIfDefeated:eval
 * @text Show If Defeated
 * @parent enemyHiddenParameter:str
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show exact enemy parameter values if enemy has been defeated before.
 * @default true
 *
 * @param PageButtons
 * @text Page Buttons
 *
 * @param pageButtons:eval
 * @text Show Page Buttons?
 * @parent PageButtons
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows page buttons to switch between actors?
 * Still requires Touch UI option to be on.
 * @default true
 *
 * @param pageButtonPosition:str
 * @text Large UI Position?
 * @parent pageButtons:eval
 * @type select
 * @option left
 * @option right
 * @desc If using a large resolution, position the page buttons on which side?
 * @default left
 *
 * @param pageOffsetX:num
 * @text Offset X
 * @parent PageButtons
 * @desc Offsets the page buttons x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param pageOffsetY:num
 * @text Offset Y
 * @parent PageButtons
 * @desc Offsets the page buttons y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param Parameters
 * @text Parameter Display
 *
 * @param buffValueFmt:str
 * @text Increased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▲%1
 *
 * @param debuffValueFmt:str
 * @text Decreased Value
 * @parent Parameters
 * @desc How are increased parameter values displayed?
 * %1 - Parameter Value
 * @default ▼%1
 *
 * @param States
 * @text States Display
 *
 * @param statesMaxWidth:num
 * @text Max Width
 * @parent States
 * @desc Maximum width of the states list display.
 * @default 384
 *
 * @param drawStates:eval
 * @text List States?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists states in the states list display?
 * @default true
 *
 * @param drawBuffs:eval
 * @text List Buffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists buffs in the states list display?
 * @default true
 *
 * @param drawDebuffs:eval
 * @text List Debuffs?
 * @parent States
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Lists debuffs in the states list display?
 * @default true
 *
 * @param BuffsDebuffs
 * @text Buffs/Debuffs Display
 * @parent States
 *
 * @param buffNameFmt:str
 * @text Buff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent buffs.
 * %1 - Parameter Name
 * @default %1▲
 *
 * @param debuffNameFmt:str
 * @text Debuff Name Format
 * @parent BuffsDebuffs
 * @desc Text format used to represent debuffs.
 * %1 - Parameter Name
 * @default %1▼
 *
 * @param NormalState
 * @text Normal State
 * @parent States
 *
 * @param normalIcon:num
 * @text Normal Icon
 * @parent NormalState
 * @desc Icon used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default 84
 *
 * @param normalText:str
 * @text Normal Text
 * @parent NormalState
 * @desc Text used to represent normal state (unaffected by states, buffs, or debuffs).
 * @default Normal
 *
 * @param HelpDesc
 * @text Help Descriptions
 *
 * @param stateHelpFmt:json
 * @text State Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for state help descriptions
 * %1 - Description; %2 - Turns/Actions Remaining
 * @default "%1 %2"
 *
 * @param buffHelpFmt:json
 * @text Buff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Buff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Increases %1 to %3%2\\C[0]. %4"
 *
 * @param debuffHelpFmt:json
 * @text Debuff Help Format
 * @parent HelpDesc
 * @type note
 * @desc Text format used for Debuff help descriptions
 * %1 - Param; %2 - Percent; %3 - Color; %4 - Turns
 * @default "Decreases %1 to %3%2\\C[0]. %4"
 *
 * @param normalHelp:json
 * @text Normal State
 * @parent HelpDesc
 * @type note
 * @desc Help description used to explain normal state (unaffected by states, buffs, or debuffs).
 * @default "Status is currently normal."
 *
 * @param TurnHelpDesc
 * @text Turns/Actions Left
 * @parent HelpDesc
 *
 * @param actionsFmt:str
 * @text Actions Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent actions remaining.
 * %1 - Actions; %2 - Color
 * @default \C[6](Actions %2%1\C[6])\C[0]
 *
 * @param TurnsFmt:str
 * @text Turns Format
 * @parent TurnHelpDesc
 * @desc Text format used to represent turns remaining.
 * %1 - Turns; %2 - Color
 * @default \C[5](Turns %2%1\C[5])\C[0]
 *
 * @param passiveText:str
 * @text Passive Text
 * @parent TurnHelpDesc
 * @desc Text used to represent a passive.
 * @default \C[4](Passive)\C[0]
 *
 * @param Window
 * @text Window Settings
 *
 * @param StatusWindow_BgType:num
 * @text Background Type
 * @parent Window
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for this window.
 * @default 0
 *
 * @param StatusWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Window
 * @type note
 * @desc Code used to draw battler data.
 * @default "{ // Draw Face and Simple Status\n    const x = this.colSpacing() / 2;\n    const h = ImageManager.faceHeight;\n    const y = h / 2 - this.lineHeight() * 1.5;\n    this.drawActorGraphic(this._battler, x + 1, 0, ImageManager.faceWidth, h);\n    this.drawActorSimpleStatus(this._battler, x + 180, y);\n}\n{ // Draw Actor Parameters\n    let maxWidth = this.drawingAreaWidth();\n    let x1 = 0;\n    let x2 = Math.ceil(this.drawingAreaWidth() / 2);\n\n    let counter = 0;\n    const params = this.displayedParams();\n\n    let px = x1;\n    const availableHeight = this.innerHeight - ImageManager.faceHeight;\n    const paramHeight = Math.ceil(params.length / 2) * this.lineHeight();\n    let py = Math.ceil((availableHeight - paramHeight) / 2) + ImageManager.faceHeight;\n    let pw = Math.floor(maxWidth / 2);\n\n    if (this._statesWindow.y !== 0) {\n        this._statesWindow.y = py;\n    }\n\n    for (const param of params) {\n        this.drawDarkRect(px, py, pw, this.lineHeight());\n        this.drawParamData(param, px, py, pw);\n        counter++;\n        if (counter % 2 === 0) {\n            px = x1;\n            py += this.lineHeight();\n        } else {\n            px = x2;\n        }\n    }\n}"
 *
 * @param StatusWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Window
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const wx = Graphics.boxWidth > 1000 ? 120 : 0;\nconst wy = this._helpWindow.y + this._helpWindow.height;\nconst ww = Graphics.boxWidth - (wx * 2);\nconst wh = Graphics.boxHeight - wy - this.windowAreaHeight();\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 */
/* ----------------------------------------------------------------------------
 * Multi-Target Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~MultiTarget:
 *
 * @param Properties
 * 
 * @param WindowWidth:num
 * @text Window Width
 * @parent Properties
 * @type number
 * @min 1
 * @desc What is the width used for the Multi-Target Window?
 * @default 280
 *
 * @param BgType:num
 * @text Background Type
 * @parent Properties
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for these windows.
 * @default 2
 *
 * @param ShowButton:eval
 * @text Show Button
 * @parent Properties
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows the keyboard/controller button to press?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @param Vocab
 *
 * @param AllActorsText:str
 * @text All Actors
 * @parent Vocab
 * @desc What is the text used for the "All Actors" button?
 * @default All Allies
 *
 * @param AllEnemiesText:str
 * @text All Enemies
 * @parent Vocab
 * @desc What is the text used for the "All Enemies" button?
 * @default All Enemies
 * 
 * @param Offsets
 * 
 * @param ActorOffsets
 * @text Actor Offsets
 * @parent Offsets
 *
 * @param ActorOffsetX:num
 * @text Offset X
 * @parent ActorOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param ActorOffsetY:num
 * @text Offset Y
 * @parent ActorOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @param EnemyOffsets
 * @text Enemy Offsets
 * @parent Offsets
 *
 * @param EnemyOffsetX:num
 * @text Offset X
 * @parent EnemyOffsets
 * @desc Offsets the button's x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param EnemyOffsetY:num
 * @text Offset Y
 * @parent EnemyOffsets
 * @desc Offsets the button's y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Combo Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ComboWindow:
 *
 * @param General
 * @text General Settings
 *
 * @param Enable:eval
 * @text Enable?
 * @parent General
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Add the Combo Window to show in battle?
 * @default true
 *
 * @param Appearance
 * @text Appearance Settings
 *
 * @param CustomFontFace:str
 * @text Custom Font
 * @parent Appearance
 * @desc Insert the custom font face name here.
 * Use VisuMZ_1_MessageCore to register new fonts.
 * @default Arial
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent Appearance
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for this window?
 * @default left
 *
 * @param ComboWindow_DrawJS:func
 * @text JS: Draw Data
 * @parent Appearance
 * @type note
 * @desc Code used to draw the data in this window.
 * @default ""
 * 
 * @param Vocab
 * @text Vocabulary
 *
 * @param hitsDmgFmt:str
 * @text Damage Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for damage.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Hit Combo\C[0]\{
 *
 * @param hitsHealFmt:str
 * @text Healing Combo Format
 * @parent Vocab
 * @desc Text format used to display total hits for healing.
 * %1 - Total Hits
 * @default \C[6]%1\} \C[4]Heal Combo\C[0]\{
 *
 * @param totalDmgFmt:str
 * @text Damage Total Format
 * @parent Vocab
 * @desc Text format used to display total value for damage.
 * %1 - Total Damage
 * @default \}\C[21]Total Damage: \{\C[0]%1
 *
 * @param totalHealFmt:str
 * @text Healing Total Format
 * @parent Vocab
 * @desc Text format used to display total value for healing.
 * %1 - Total Healing
 * @default \}\C[21]Total Healing: \{\C[24]+%1\C[0]
 *
 * @param Position
 * @text Position Settings
 *
 * @param fadeShiftX:num
 * @text Fade Shift X
 * @parent Position
 * @desc Shifts the windows x position when fading.
 * Negative: left. Positive: right.
 * @default -2
 *
 * @param fadeShiftY:num
 * @text Fade Shift Y
 * @parent Position
 * @desc Shifts the windows y position when fading.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PosOffsetX:num
 * @text Offset X
 * @parent Position
 * @desc Offsets the windows x position.
 * Negative: left. Positive: right.
 * @default +0
 *
 * @param PosOffsetY:num
 * @text Offset Y
 * @parent Position
 * @desc Offsets the windows y position.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param ComboWindow_RectJS:func
 * @text JS: X, Y, W, H
 * @parent Position
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const ww = Math.ceil(Graphics.width / 4);\nconst wh = this.calcWindowHeight(2, true);\nconst wx = 0 + this.comboWindowOffsetX();\nconst wy = Math.round(Graphics.boxHeight * 1 / 3) + this.comboWindowOffsetY();\nreturn new Rectangle(wx, wy, ww, wh);"
 * 
 * @param Update
 * @text Updating Settings
 *
 * @param updateDuration:num
 * @text Number Roll Duration
 * @parent Update
 * @type number
 * @min 1
 * @desc Frame duration to roll damage numbers.
 * 60 frames = 1 second.
 * @default 20
 *
 * @param minimumStayDuration:num
 * @text Minimum Stay Duration
 * @parent Update
 * @type number
 * @desc Frame duration to stay visible minimum.
 * 60 frames = 1 second.
 * @default 40
 *
 * @param minimumHits:num
 * @text Minimum Hit Visible
 * @parent Update
 * @type number
 * @min 1
 * @desc Minimum hits before combo window becomes visible?
 * @default 1
 *
 * @param opacitySpeed:num
 * @text Opacity Speed
 * @parent Update
 * @type number
 * @min 1
 * @desc Opacity speed when fading in/out.
 * @default 16
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param ShakeFlinch:eval
 * @text Shake Flinch
 * @parent Flinch
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Perform a shake flinch when taking damage?
 * @default false
 *
 * @param ShakeFlinchDuration:num
 * @text Max Duration
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc Maximum duration a shake flinch can have.
 * This is reduced relative to the amount of damage taken.
 * @default 24
 *
 * @param ShakeFlinchPower:num
 * @text Max Power
 * @parent ShakeFlinch:eval
 * @type number
 * @min 1
 * @desc The power rating of a shake flinch at full damage.
 * This is reduced relative to the amount of damage taken.
 * @default 48
 *
 * @param FvBattlers
 * @text Frontview Battlers
 * 
 * @param FvPortraitAni
 * @text Portrait Animations
 * @parent FvBattlers
 *
 * @param FvAniEachTarget:eval
 * @text Each Target
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Each Target" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterAll:eval
 * @text Center of All
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of All" display types?
 * Does not apply to MV animations.
 * @default true
 *
 * @param FvAniCenterScreen:eval
 * @text Center of Screen
 * @parent FvPortraitAni
 * @type boolean
 * @on On Top
 * @off Behind
 * @desc Place animations on top for "Center of Screen" display types?
 * Does not apply to MV animations.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 * 
 * @param SvAnchor
 * @text Anchor
 * @parent SvBattlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvAnchor
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvAnchor
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 * 
 * @param SvPosition
 * @text Position
 * @parent SvBattlers
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvPosition
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvPosition
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 * 
 * @param SvStateOverlay
 * @text State Overlay
 * @parent SvBattlers
 *
 * @param StateOverlayOffsetX:num
 * @text Offset: X
 * @parent SvStateOverlay
 * @desc Offsets X position for state overlay on actor.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param StateOverlayOffsetY:num
 * @text Offset: Y
 * @parent SvStateOverlay
 * @desc Offsets Y position for state overlay on actor.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAsTarget:eval
 * @text As Target
 * @parent NameVisibility
 * @type boolean
 * @on Visible As Target
 * @off No Priority
 * @desc Shows enemy name when enemy is a target.
 * Medium priority.
 * @default true
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param NameDamageVisibility:num
 * @text Temporary Visibility
 * @parent NameVisibility
 * @type number
 * @desc Number of frames enemy's name temporarily visible after
 * taking an action effect in battle. 60 frames = 1 second.
 * @default 0
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 * @param Aspect
 * @text Aspect Defaults
 *
 * @param AspectNameFmt:str
 * @text Name Format
 * @parent Aspect
 * @desc Default name aspect format.
 * %1 - Original Enemy Name
 * @default %1 Aspect
 *
 * @param AspectColor:str
 * @text Name Color
 * @parent Aspect
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default 2
 *
 * @param AspectIcon:num
 * @text Icon
 * @parent Aspect
 * @desc Default icon used for aspect.
 * Use <Aspect Icon: x> to change icon.
 * @default 26
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AniDuration:num
 * @text Animation Duration
 * @parent Settings
 * @type number
 * @min 1
 * @desc How many frames should gauges animate themselves?
 * Default: 20 frames.
 * @default 20
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option
 * @option special
 * @option special x
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the projectile's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 * 
 * @param Emulate
 * @text Effect Emulation
 * 
 * @param EmulateActionEffect:eval
 * @text Action Effect?
 * @parent Emulate
 * @type boolean
 * @on Emulate
 * @off Don't Emulate
 * @desc Emulate current Action Effect when projectile reaches
 * target? Only works with start/goal targets.
 * @default false
 * 
 * @param EmulateItemEffect:eval
 * @text Item Effect ID
 * @parent Emulate
 * @type item
 * @desc Emulate an Item Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 * 
 * @param EmulateSkillEffect:eval
 * @text Skill Effect ID
 * @parent Emulate
 * @type skill
 * @desc Emulate a Skill Effect when projectile reaches target?
 * Use 0 to not use. Only works with start/goal targets.
 * @default 0
 *
 * @param OnceParallel:num
 * @text Common Event ID
 * @parent Emulate
 * @type common_event
 * @desc Plays a Once Parallel Common Event upon reaching target.
 * Use 0 to not use. Works regardless of start/goal targets.
 * @default 0
 * 
 * @param EndAnimationID:eval
 * @text End Animation ID
 * @type animation
 * @desc Plays an animation when projectile reaches target.
 * Use 0 to not use. Requires ActSeqProjectiles v1.09+.
 * @default 0
 *
 * @param EndAnimationMirror:eval
 * @text Mirror Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 * @param EndAnimationMute:eval
 * @text Mute Animation
 * @parent EndAnimationID:eval
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the effect animation?
 * Requires VisuMZ_3_ActSeqProjectiles version 1.09+.
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Visual Cutin Effect Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~VisualCutinEffect:
 *
 * @param Transition
 * 
 * @param enterDuration:num
 * @text Entrance Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully enter?
 * Used when a Visual Cutin Effect starts.
 * @default 12
 * 
 * @param exitDuration:num
 * @text Exit Duration
 * @parent Transition
 * @type number
 * @desc How many frames does it take to fully exit?
 * Used when a Visual Cutin Effect ends.
 * @default 12
 *
 * @param Cutin
 * @text Cutin Settings
 *
 * @param bgShow:eval
 * @text Show BG Color?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Add a background color for this cutin?
 * Background colors appear behind the parallax.
 * @default true
 *
 * @param outlineShow:eval
 * @text Show Outline?
 * @parent Cutin
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show the cutin outline?
 * @default true
 *
 * @param Portrait
 * @text Portrait Settings
 *
 * @param PortraitBase
 * @text Base Properties
 * @parent Portrait
 * 
 * @param portraitAnchorX:num
 * @text Anchor X
 * @parent PortraitBase
 * @desc Determines the sprite anchor X alignment.
 * 0.0: Left, 0.5: Center, 1.0: Right.
 * @default 0.5
 * 
 * @param portraitAnchorY:num
 * @text Anchor Y
 * @parent PortraitBase
 * @desc Determines the sprite anchor Y alignment.
 * 0.0: Top, 0.5: Middle, 1.0: Bottom.
 * @default 0.5
 *
 * @param portraitHue:num
 * @text Hue
 * @parent PortraitBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's portrait hue?
 * @default 0
 * 
 * @param portraitOpacity:num
 * @text Opacity
 * @parent PortraitBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's portrait?
 * @default 255
 * 
 * @param portraitOffsetX:num
 * @text Offset X
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's X location.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @param portraitOffsetY:num
 * @text Offset Y
 * @parent PortraitBase
 * @desc Offsets the cutin portrait's Y location.
 * Negative: up. Positive: down.
 * @default +0
 *
 * @param PortraitEnter
 * @text Entrance Properties
 * @parent Portrait
 * 
 * @param portraitEnterX:num
 * @text Entrance X
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's X entrance.
 * Negative: from left. Positive: from right.
 * @default +0
 * 
 * @param portraitEnterY:num
 * @text Entrance Y
 * @parent PortraitEnter
 * @desc Sets the cutin portrait's Y entrance.
 * Negative: from up. Positive: from down.
 * @default +0
 *
 * @param portraitEnterEasingType:str
 * @text Entrance Easing
 * @parent PortraitEnter
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitExit
 * @text Exit Properties
 * @parent Portrait
 * 
 * @param portraitExitX:num
 * @text Exit X
 * @parent PortraitExit
 * @desc Sets the cutin portrait's X exit.
 * Negative: to left. Positive: to right.
 * @default +0
 * 
 * @param portraitExitY:num
 * @text Exit Y
 * @parent PortraitExit
 * @desc Sets the cutin portrait's Y exit.
 * Negative: to up. Positive: to down.
 * @default +0
 *
 * @param portraitExitEasingType:str
 * @text Exit Easing
 * @parent PortraitExit
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @param PortraitFlip
 * @text Flip Properties
 * @parent Portrait
 *
 * @param portraitFlipHorz:eval
 * @text Flip Horizontally?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait horizontally?
 * @default false
 *
 * @param portraitFlipVert:eval
 * @text Flip Vertically?
 * @parent PortraitFlip
 * @type boolean
 * @on Flip
 * @off Don't Flip
 * @desc Flip the cutin portrait vertically?
 * @default false
 *
 * @param PortraitScale
 * @text Scaling Properties
 * @parent Portrait
 * 
 * @param portraitForcedScale:num
 * @text Forced Scaling
 * @parent PortraitScale
 * @desc Do you want to force a scaling ratio?
 * Leave as 0 for none. Disables "Fit to Scale?".
 * @default 0.0
 *
 * @param portraitScaleToFit:eval
 * @text Fit to Scale?
 * @parent PortraitScale
 * @type boolean
 * @on Fit to Scale
 * @off Don't Scale
 * @desc Scale the cutin portrait to fit the cutin style?
 * Cannot be used with "Forced Scaling".
 * @default true
 *
 * @param portraitScaleMax:eval
 * @text Scale Max?
 * @parent portraitScaleToFit:eval
 * @type boolean
 * @on Scale Maximum
 * @off Scale Minimum
 * @desc Scale the cutin portrait to the maximum fit or
 * scale the cutin portrait to the minimum fit.
 * @default false
 *
 * @param PortraitAni
 * @text Animated Portraits
 * @parent Portrait
 *
 * @param animatedPortraitLooping:eval
 * @text Loop?
 * @parent PortraitAni
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Will loop back to beginning once ended.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default true
 *
 * @param animatedPortraitWaitFrames:num
 * @text Wait Frames
 * @parent PortraitAni
 * @type number
 * @min 1
 * @desc Frames to wait before moving to next cell.
 * Requires VisuMZ_4_AnimatedPictures!
 * @default 4
 *
 * @param Parallax
 * @text Parallax Settings
 *
 * @param ParallaxBase
 * @text Base Settings
 * @parent Parallax
 *
 * @param parallaxBlendMode:num
 * @text Blend Mode
 * @parent ParallaxBase
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the cutin?
 * @default 0
 *
 * @param parallaxHue:num
 * @text Hue
 * @parent ParallaxBase
 * @type number
 * @min 0
 * @max 360
 * @desc Do you wish to adjust this cutin's parallax hue?
 * @default 0
 *
 * @param parallaxHueEnemyModifier:num
 * @text Enemy Modifier
 * @parent parallaxHue:num
 * @desc Adjust the hue value by this if the cutin target is an enemy.
 * @default +0
 * 
 * @param parallaxOpacity:num
 * @text Opacity
 * @parent ParallaxBase
 * @type number
 * @max 255
 * @desc What is the opacity level of this cutin's parallax?
 * @default 255
 *
 * @param ParallaxScroll
 * @text Scrolling Settings
 * @parent Parallax
 * 
 * @param parallaxOffsetX:num
 * @text Offset X
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's X location.
 * Negative: left. Positive: right.
 * @default +0.0
 * 
 * @param parallaxOffsetY:num
 * @text Offset Y
 * @parent ParallaxScroll
 * @desc Offsets the cutin parallax's Y location.
 * Negative: up. Positive: down.
 * @default +0.0
 * 
 * @param parallaxScrollX:num
 * @text Scroll X
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll horizontally?
 * Negative: Scroll to right. Positive: Scroll to left.
 * @default +0.0
 *
 * @param parallaxScrollXinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollX:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the X scroll direction if the cutin target is an enemy?
 * @default false
 * 
 * @param parallaxScrollY:num
 * @text Scroll Y
 * @parent ParallaxScroll
 * @desc How many pixels does the parallax scroll vertically?
 * Negative: Scroll to down. Positive: Scroll to up.
 * @default +0.0
 *
 * @param parallaxScrollYinvertEnemy:eval
 * @text Invert for Enemy?
 * @parent parallaxScrollY:num
 * @type boolean
 * @on Invert
 * @off Don't Invert
 * @desc Invert the Y scroll direction if the cutin target is an enemy?
 * @default false
 *
 */
//=============================================================================

const _0x2dcaec=_0x4e7d;(function(_0x59f387,_0x59515e){const _0x1315b9=_0x4e7d,_0x4cfa4e=_0x59f387();while(!![]){try{const _0x117bc2=-parseInt(_0x1315b9(0x2f3))/0x1+-parseInt(_0x1315b9(0x160))/0x2*(parseInt(_0x1315b9(0x61b))/0x3)+-parseInt(_0x1315b9(0x90e))/0x4+-parseInt(_0x1315b9(0xc40))/0x5*(parseInt(_0x1315b9(0x991))/0x6)+-parseInt(_0x1315b9(0x175))/0x7+parseInt(_0x1315b9(0xa4c))/0x8*(-parseInt(_0x1315b9(0x3de))/0x9)+parseInt(_0x1315b9(0x798))/0xa*(parseInt(_0x1315b9(0x543))/0xb);if(_0x117bc2===_0x59515e)break;else _0x4cfa4e['push'](_0x4cfa4e['shift']());}catch(_0x3e54f3){_0x4cfa4e['push'](_0x4cfa4e['shift']());}}}(_0x2f13,0xc9704));var label=_0x2dcaec(0xae3),tier=tier||0x0,dependencies=[],pluginData=$plugins['filter'](function(_0x71d39){const _0x2efd82=_0x2dcaec;return _0x71d39[_0x2efd82(0x747)]&&_0x71d39['description'][_0x2efd82(0x7f2)]('['+label+']');})[0x0];VisuMZ[label]['Settings']=VisuMZ[label]['Settings']||{},VisuMZ[_0x2dcaec(0x44f)]=function(_0x2f533f,_0x52d8c3){const _0x558d9d=_0x2dcaec;for(const _0x35c61a in _0x52d8c3){if(_0x35c61a[_0x558d9d(0xb9e)](/(.*):(.*)/i)){const _0x4d068d=String(RegExp['$1']),_0x5f49fe=String(RegExp['$2'])[_0x558d9d(0xb9f)]()[_0x558d9d(0x651)]();let _0x4f1423,_0x5c65e2,_0x185572;switch(_0x5f49fe){case _0x558d9d(0xa27):_0x4f1423=_0x52d8c3[_0x35c61a]!==''?Number(_0x52d8c3[_0x35c61a]):0x0;break;case'ARRAYNUM':_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON['parse'](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2[_0x558d9d(0xc20)](_0x2081c0=>Number(_0x2081c0));break;case _0x558d9d(0xa64):_0x4f1423=_0x52d8c3[_0x35c61a]!==''?eval(_0x52d8c3[_0x35c61a]):null;break;case'ARRAYEVAL':_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON['parse'](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2['map'](_0x49b855=>eval(_0x49b855));break;case'JSON':_0x4f1423=_0x52d8c3[_0x35c61a]!==''?JSON['parse'](_0x52d8c3[_0x35c61a]):'';break;case _0x558d9d(0xc6a):_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON[_0x558d9d(0x135)](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2[_0x558d9d(0xc20)](_0x192a1c=>JSON[_0x558d9d(0x135)](_0x192a1c));break;case _0x558d9d(0x146):_0x4f1423=_0x52d8c3[_0x35c61a]!==''?new Function(JSON['parse'](_0x52d8c3[_0x35c61a])):new Function(_0x558d9d(0xb10));break;case'ARRAYFUNC':_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON[_0x558d9d(0x135)](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2[_0x558d9d(0xc20)](_0x5495f5=>new Function(JSON[_0x558d9d(0x135)](_0x5495f5)));break;case'STR':_0x4f1423=_0x52d8c3[_0x35c61a]!==''?String(_0x52d8c3[_0x35c61a]):'';break;case'ARRAYSTR':_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON[_0x558d9d(0x135)](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2['map'](_0x595c68=>String(_0x595c68));break;case _0x558d9d(0x2d0):_0x185572=_0x52d8c3[_0x35c61a]!==''?JSON['parse'](_0x52d8c3[_0x35c61a]):{},_0x2f533f[_0x4d068d]={},VisuMZ['ConvertParams'](_0x2f533f[_0x4d068d],_0x185572);continue;case _0x558d9d(0x279):_0x5c65e2=_0x52d8c3[_0x35c61a]!==''?JSON[_0x558d9d(0x135)](_0x52d8c3[_0x35c61a]):[],_0x4f1423=_0x5c65e2[_0x558d9d(0xc20)](_0x16a615=>VisuMZ[_0x558d9d(0x44f)]({},JSON[_0x558d9d(0x135)](_0x16a615)));break;default:continue;}_0x2f533f[_0x4d068d]=_0x4f1423;}}return _0x2f533f;},(_0x367351=>{const _0x4dd964=_0x2dcaec,_0xe0eb99=_0x367351[_0x4dd964(0x321)];for(const _0x18b510 of dependencies){if(!Imported[_0x18b510]){alert(_0x4dd964(0xb95)[_0x4dd964(0xb60)](_0xe0eb99,_0x18b510)),SceneManager[_0x4dd964(0x33f)]();break;}}const _0x14c77d=_0x367351[_0x4dd964(0x7c3)];if(_0x14c77d[_0x4dd964(0xb9e)](/\[Version[ ](.*?)\]/i)){const _0x1958e8=Number(RegExp['$1']);_0x1958e8!==VisuMZ[label][_0x4dd964(0x620)]&&(alert(_0x4dd964(0x2c7)[_0x4dd964(0xb60)](_0xe0eb99,_0x1958e8)),SceneManager['exit']());}if(_0x14c77d[_0x4dd964(0xb9e)](/\[Tier[ ](\d+)\]/i)){const _0x4c3287=Number(RegExp['$1']);_0x4c3287<tier?(alert(_0x4dd964(0xade)[_0x4dd964(0xb60)](_0xe0eb99,_0x4c3287,tier)),SceneManager[_0x4dd964(0x33f)]()):tier=Math['max'](_0x4c3287,tier);}VisuMZ['ConvertParams'](VisuMZ[label][_0x4dd964(0xbeb)],_0x367351[_0x4dd964(0x718)]);})(pluginData),VisuMZ[_0x2dcaec(0x77f)]=function(_0x4cf98){const _0x15931e=_0x2dcaec;let _0x44dfa8=[];for(const _0x2b5b8c of _0x4cf98){_0x44dfa8=_0x44dfa8[_0x15931e(0xa5b)](VisuMZ[_0x15931e(0x7b4)](_0x2b5b8c));}return _0x44dfa8[_0x15931e(0x5ed)](_0x1affe7=>_0x1affe7);},VisuMZ['ConvertActionSequenceTarget']=function(_0x5cfac9){const _0x458132=_0x2dcaec,_0x1f16e0=BattleManager[_0x458132(0xb96)]()[_0x458132(0x5ed)](_0x1c5bc5=>_0x1c5bc5&&_0x1c5bc5[_0x458132(0x6a6)]()),_0x465900=BattleManager[_0x458132(0x173)],_0x3f1ff6=BattleManager[_0x458132(0xc39)],_0x4d3c68=BattleManager['_allTargets']?BattleManager['_allTargets'][_0x458132(0xa5e)](0x0):_0x1f16e0;_0x5cfac9=_0x5cfac9[_0x458132(0x918)]()[_0x458132(0x651)]();if(_0x5cfac9===_0x458132(0x17e))return[_0x465900];else{if(_0x5cfac9==='current\x20target')return[_0x3f1ff6];else{if(_0x5cfac9===_0x458132(0x32f)){if(_0x3f1ff6){const _0x2246cb=_0x4d3c68[_0x458132(0x7bc)](_0x3f1ff6);return _0x2246cb>=0x0?[_0x4d3c68[_0x2246cb-0x1]||_0x3f1ff6]:[_0x3f1ff6];}}else{if(_0x5cfac9===_0x458132(0x216)){if(_0x3f1ff6){const _0x3379c9=_0x4d3c68[_0x458132(0x7bc)](_0x3f1ff6);return _0x3379c9>=0x0?[_0x4d3c68[_0x3379c9+0x1]||_0x3f1ff6]:[_0x3f1ff6];}}else{if(_0x5cfac9===_0x458132(0x35e))return _0x4d3c68;else{if(_0x5cfac9===_0x458132(0x8af))return[_0x465900][_0x458132(0xa5b)](_0x4d3c68);else{if(_0x5cfac9===_0x458132(0xa49))return _0x1f16e0['filter'](_0xbba76a=>_0xbba76a!==_0x465900&&!_0x4d3c68[_0x458132(0x7f2)](_0xbba76a)&&_0xbba76a[_0x458132(0x864)]());else{if(_0x5cfac9==='special')return[VisuMZ[_0x458132(0x72d)]()];else{if(_0x5cfac9[_0x458132(0xb9e)](/SPECIAL (.*)>/i)){const _0x1a47ca=String(RegExp['$1'])[_0x458132(0x13b)](',')[_0x458132(0xc20)](_0x2731e9=>_0x2731e9[_0x458132(0x651)]());return[VisuMZ['GetActionSequenceSpecialTargetWithFlags'](_0x1a47ca)];}}}}}}}}}if(_0x465900){if(_0x5cfac9===_0x458132(0x29e))return _0x465900['friendsUnit']()['aliveMembers']();else{if(_0x5cfac9===_0x458132(0x2d5))return _0x465900[_0x458132(0x630)]()[_0x458132(0x9ef)]()[_0x458132(0x5ed)](_0x55ea28=>_0x55ea28!==_0x465900);else{if(_0x5cfac9===_0x458132(0x54b))return _0x465900[_0x458132(0x630)]()[_0x458132(0x9ef)]()[_0x458132(0x5ed)](_0x22c6ee=>_0x22c6ee!==_0x3f1ff6);else{if(_0x5cfac9===_0x458132(0x3bd))return _0x465900[_0x458132(0x630)]()[_0x458132(0x7ba)]();else{if(_0x5cfac9[_0x458132(0xb9e)](/FRIEND INDEX (\d+)/i)){const _0x4e4867=Number(RegExp['$1']);return[_0x465900[_0x458132(0x630)]()[_0x458132(0x963)]()[_0x4e4867]];}}}}}if(_0x5cfac9===_0x458132(0xb4e))return _0x465900[_0x458132(0x2f2)]()[_0x458132(0x9ef)]();else{if(_0x5cfac9===_0x458132(0x1ca))return _0x465900['opponentsUnit']()['aliveMembers']()['filter'](_0x77cf89=>_0x77cf89!==_0x3f1ff6);else{if(_0x5cfac9===_0x458132(0x3f7))return _0x465900['opponentsUnit']()['deadMembers']();else{if(_0x5cfac9[_0x458132(0xb9e)](/OPPONENT INDEX (\d+)/i)){const _0x1fc194=Number(RegExp['$1']);return[_0x465900[_0x458132(0x2f2)]()[_0x458132(0x963)]()[_0x1fc194]];}}}}}if(_0x5cfac9==='alive\x20actors')return $gameParty[_0x458132(0x9ef)]();else{if(_0x5cfac9===_0x458132(0x82c))return $gameParty['aliveMembers']()[_0x458132(0x5ed)](_0x4ea746=>_0x4ea746!==_0x465900);else{if(_0x5cfac9==='alive\x20actors\x20not\x20target')return $gameParty['aliveMembers']()[_0x458132(0x5ed)](_0x36f707=>_0x36f707!==_0x3f1ff6);else{if(_0x5cfac9===_0x458132(0x9bc))return $gameParty[_0x458132(0x7ba)]();else{if(_0x5cfac9[_0x458132(0xb9e)](/ACTOR INDEX (\d+)/i)){const _0x10a34f=Number(RegExp['$1']);return[$gameParty['members']()[_0x10a34f]];}else{if(_0x5cfac9[_0x458132(0xb9e)](/ACTOR ID (\d+)/i)){const _0x120735=Number(RegExp['$1']);return[$gameActors[_0x458132(0x3fc)](_0x120735)];}}}}}}if(_0x5cfac9===_0x458132(0xa15))return $gameTroop[_0x458132(0x9ef)]();else{if(_0x5cfac9===_0x458132(0xa01))return $gameTroop[_0x458132(0x9ef)]()[_0x458132(0x5ed)](_0x29870d=>_0x29870d!==_0x465900);else{if(_0x5cfac9==='alive\x20enemies\x20not\x20target')return $gameTroop[_0x458132(0x9ef)]()['filter'](_0x286cb8=>_0x286cb8!==_0x3f1ff6);else{if(_0x5cfac9===_0x458132(0x5ff))return $gameTroop[_0x458132(0x7ba)]();else{if(_0x5cfac9[_0x458132(0xb9e)](/ENEMY INDEX (\d+)/i)){const _0x2d7996=Number(RegExp['$1']);return[$gameTroop['members']()[_0x2d7996]];}else{if(_0x5cfac9[_0x458132(0xb9e)](/ENEMY ID (\d+)/i)){const _0x1bb565=Number(RegExp['$1']);return $gameTroop[_0x458132(0x9ef)]()['filter'](_0x533234=>_0x533234['enemyId']()===_0x1bb565);}}}}}}if(_0x5cfac9===_0x458132(0x660))return _0x1f16e0[_0x458132(0x5ed)](_0x1dce88=>_0x1dce88[_0x458132(0x2b5)]());else{if(_0x5cfac9==='alive\x20battlers\x20not\x20user')return _0x1f16e0['filter'](_0x41f26e=>_0x41f26e[_0x458132(0x2b5)]()&&_0x41f26e!==_0x465900);else{if(_0x5cfac9==='alive\x20battlers\x20not\x20target')return _0x1f16e0['filter'](_0x58d6c7=>_0x58d6c7['isAlive']()&&_0x58d6c7!==_0x3f1ff6);else{if(_0x5cfac9===_0x458132(0x47a))return _0x1f16e0[_0x458132(0x5ed)](_0x41d795=>_0x41d795[_0x458132(0x1f5)]());}}}return[];},VisuMZ[_0x2dcaec(0x72d)]=function(){return BattleManager['_target'];},VisuMZ[_0x2dcaec(0x9b1)]=function(_0x1adf45){const _0x19c200=_0x2dcaec;return BattleManager[_0x19c200(0xc39)];},PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x46a),_0x13fa98=>{const _0x1cdacc=_0x2dcaec;if(!SceneManager[_0x1cdacc(0xa2b)]())return;VisuMZ[_0x1cdacc(0x44f)](_0x13fa98,_0x13fa98);const _0x145dd5=$gameTemp[_0x1cdacc(0x9c5)](),_0x56715c=BattleManager[_0x1cdacc(0x151)],_0x59a177=BattleManager[_0x1cdacc(0x173)],_0x2e93d5=BattleManager['_allTargets']?BattleManager[_0x1cdacc(0x180)][_0x1cdacc(0xa5e)](0x0):[],_0x1409ff=BattleManager[_0x1cdacc(0x9a7)];if(!_0x145dd5||!_0x56715c||!_0x59a177)return;if(!_0x56715c['item']())return;if(_0x13fa98['DisplayAction'])_0x1409ff['displayAction'](_0x59a177,_0x56715c[_0x1cdacc(0x719)]());_0x13fa98[_0x1cdacc(0x290)]&&_0x1409ff[_0x1cdacc(0x190)](_0x1cdacc(0x822),_0x59a177,_0x2e93d5,!![]);if(_0x13fa98[_0x1cdacc(0x1e3)])_0x1409ff[_0x1cdacc(0x190)]('performActionStart',_0x59a177,_0x56715c);if(_0x13fa98['WaitForMovement'])_0x1409ff[_0x1cdacc(0x190)]('waitForMovement');if(_0x13fa98[_0x1cdacc(0x40f)])_0x1409ff[_0x1cdacc(0x190)](_0x1cdacc(0x65e),_0x59a177,_0x56715c);if(_0x13fa98['WaitForAnimation'])_0x1409ff[_0x1cdacc(0x190)]('waitForAnimation');_0x145dd5[_0x1cdacc(0x415)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Set_WholeActionSet',_0x4c7389=>{const _0xbf98fe=_0x2dcaec;if(!SceneManager[_0xbf98fe(0xa2b)]())return;VisuMZ[_0xbf98fe(0x44f)](_0x4c7389,_0x4c7389);const _0x4a4e53=$gameTemp[_0xbf98fe(0x9c5)](),_0x10b148=BattleManager['_action'],_0xea7ea2=BattleManager[_0xbf98fe(0x173)],_0x422b83=BattleManager[_0xbf98fe(0x180)]?BattleManager[_0xbf98fe(0x180)]['slice'](0x0):[],_0x55609e=BattleManager['_logWindow'],_0x29b00f=_0x4c7389[_0xbf98fe(0x6f6)]??![];if(!_0x4a4e53||!_0x10b148||!_0xea7ea2)return;if(!_0x10b148[_0xbf98fe(0x719)]())return;let _0x2df51b=_0x29b00f?_0x55609e['getDualWieldTimes'](_0xea7ea2):0x1;for(let _0x49c1f1=0x0;_0x49c1f1<_0x2df51b;_0x49c1f1++){_0x29b00f&&_0xea7ea2[_0xbf98fe(0x8d6)]()&&_0x55609e[_0xbf98fe(0x190)]('setActiveWeaponSet',_0xea7ea2,_0x49c1f1);if(_0x4c7389['PerformAction'])_0x55609e[_0xbf98fe(0x190)](_0xbf98fe(0x79c),_0xea7ea2,_0x10b148);if(_0x4c7389[_0xbf98fe(0x1ea)]>0x0)_0x55609e['push'](_0xbf98fe(0x4f3),_0x4c7389['WaitCount']);if(_0x4c7389[_0xbf98fe(0xc59)])_0x55609e['push']('showAnimation',_0xea7ea2,_0x422b83,_0x10b148['item']()[_0xbf98fe(0x9fc)]);if(_0x4c7389['WaitForAnimation'])_0x55609e['push'](_0xbf98fe(0x2c2));for(const _0x441d09 of _0x422b83){if(!_0x441d09)continue;if(_0x4c7389[_0xbf98fe(0x3d4)])_0x55609e[_0xbf98fe(0x190)](_0xbf98fe(0xc1b),_0xea7ea2,_0x441d09);}}_0x29b00f&&_0xea7ea2[_0xbf98fe(0x8d6)]()&&_0x55609e['push'](_0xbf98fe(0x2ab),_0xea7ea2);if(_0x4c7389[_0xbf98fe(0x290)])_0x55609e[_0xbf98fe(0x190)](_0xbf98fe(0x822),_0xea7ea2,_0x422b83,![]);_0x4a4e53[_0xbf98fe(0x415)]('battlelog');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x46e),_0x25b33c=>{const _0x6519d2=_0x2dcaec;if(!SceneManager[_0x6519d2(0xa2b)]())return;VisuMZ[_0x6519d2(0x44f)](_0x25b33c,_0x25b33c);const _0x1f948b=$gameTemp[_0x6519d2(0x9c5)](),_0x18bd9c=BattleManager['_action'],_0x4b8f32=BattleManager[_0x6519d2(0x173)],_0x6620d4=BattleManager[_0x6519d2(0x180)]?BattleManager[_0x6519d2(0x180)][_0x6519d2(0xa5e)](0x0):[],_0x10d7f8=BattleManager[_0x6519d2(0x9a7)],_0x59a6a8=_0x25b33c[_0x6519d2(0x6f6)]??![];if(!_0x1f948b||!_0x18bd9c||!_0x4b8f32)return;if(!_0x18bd9c[_0x6519d2(0x719)]())return;let _0x12e83f=_0x59a6a8?_0x10d7f8[_0x6519d2(0x18d)](_0x4b8f32):0x1;for(let _0x43e690=0x0;_0x43e690<_0x12e83f;_0x43e690++){for(const _0x8863ab of _0x6620d4){if(!_0x8863ab)continue;_0x59a6a8&&_0x4b8f32[_0x6519d2(0x8d6)]()&&_0x10d7f8['push']('setActiveWeaponSet',_0x4b8f32,_0x43e690);if(_0x25b33c['PerformAction'])_0x10d7f8[_0x6519d2(0x190)](_0x6519d2(0x79c),_0x4b8f32,_0x18bd9c);if(_0x25b33c['WaitCount1']>0x0)_0x10d7f8['push'](_0x6519d2(0x4f3),_0x25b33c[_0x6519d2(0x665)]);if(_0x25b33c[_0x6519d2(0xc59)])_0x10d7f8[_0x6519d2(0x190)](_0x6519d2(0x735),_0x4b8f32,[_0x8863ab],_0x18bd9c[_0x6519d2(0x719)]()[_0x6519d2(0x9fc)]);if(_0x25b33c[_0x6519d2(0xa46)]>0x0)_0x10d7f8[_0x6519d2(0x190)](_0x6519d2(0x4f3),_0x25b33c['WaitCount2']);if(_0x25b33c[_0x6519d2(0x3d4)])_0x10d7f8['push'](_0x6519d2(0xc1b),_0x4b8f32,_0x8863ab);}}_0x59a6a8&&_0x4b8f32[_0x6519d2(0x8d6)]()&&_0x10d7f8[_0x6519d2(0x190)](_0x6519d2(0x2ab),_0x4b8f32);if(_0x25b33c[_0x6519d2(0x290)])_0x10d7f8[_0x6519d2(0x190)](_0x6519d2(0x822),_0x4b8f32,_0x6620d4,![]);_0x1f948b[_0x6519d2(0x415)](_0x6519d2(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x891),_0x136047=>{const _0x30427b=_0x2dcaec;if(!SceneManager[_0x30427b(0xa2b)]())return;VisuMZ[_0x30427b(0x44f)](_0x136047,_0x136047);const _0x260093=$gameTemp[_0x30427b(0x9c5)](),_0x279abb=BattleManager['_action'],_0x33eb93=BattleManager[_0x30427b(0x173)],_0x3e2990=BattleManager[_0x30427b(0x180)]?BattleManager[_0x30427b(0x180)][_0x30427b(0xa5e)](0x0):[],_0x4b63b7=BattleManager[_0x30427b(0x9a7)];if(!_0x260093||!_0x279abb||!_0x33eb93)return;if(!_0x279abb['item']())return;if(_0x136047[_0x30427b(0x290)])_0x4b63b7[_0x30427b(0x190)](_0x30427b(0x822),_0x33eb93,_0x3e2990,![]);if(_0x136047[_0x30427b(0x2bf)])_0x4b63b7[_0x30427b(0x190)](_0x30427b(0xbbd));if(_0x136047[_0x30427b(0x4db)])_0x4b63b7[_0x30427b(0x190)]('waitForEffect');if(_0x136047[_0x30427b(0x850)])_0x4b63b7[_0x30427b(0x190)](_0x30427b(0xb7e));if(_0x136047[_0x30427b(0x1dc)])_0x4b63b7['push'](_0x30427b(0xa57),_0x33eb93);if(_0x136047['WaitForMovement'])_0x4b63b7[_0x30427b(0x190)](_0x30427b(0xbd4));_0x260093['setWaitMode'](_0x30427b(0xbd0));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x52b),_0x533cbd=>{const _0x1d9171=_0x2dcaec;if(!SceneManager[_0x1d9171(0xa2b)]())return;if(!Imported[_0x1d9171(0x161)])return;VisuMZ[_0x1d9171(0x44f)](_0x533cbd,_0x533cbd);const _0x5dfef4=$gameTemp[_0x1d9171(0x9c5)](),_0x142100=_0x533cbd[_0x1d9171(0xa2c)];if(!_0x5dfef4)return;$gameScreen['setBattleAngle'](_0x533cbd[_0x1d9171(0x34a)],_0x533cbd[_0x1d9171(0x603)],_0x533cbd[_0x1d9171(0x9cf)]);if(_0x142100)_0x5dfef4[_0x1d9171(0x415)](_0x1d9171(0x3c4));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Angle_Reset',_0x5e756e=>{const _0x2bd81a=_0x2dcaec;if(!SceneManager[_0x2bd81a(0xa2b)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x2bd81a(0x44f)](_0x5e756e,_0x5e756e);const _0x5798ea=$gameTemp['getLastPluginCommandInterpreter'](),_0x4daf40=_0x5e756e['WaitForAngle'];if(!_0x5798ea)return;$gameScreen[_0x2bd81a(0x378)](0x0,_0x5e756e[_0x2bd81a(0x603)],_0x5e756e['EasingType']);if(_0x4daf40)_0x5798ea[_0x2bd81a(0x415)](_0x2bd81a(0x3c4));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb27),_0x44d9c7=>{const _0x2a7dba=_0x2dcaec;if(!SceneManager[_0x2a7dba(0xa2b)]())return;if(!Imported[_0x2a7dba(0x161)])return;const _0x3c7b83=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3c7b83)return;_0x3c7b83['setWaitMode'](_0x2a7dba(0x3c4));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa10),_0x10569a=>{const _0x1ed671=_0x2dcaec;if(!SceneManager[_0x1ed671(0xa2b)]())return;VisuMZ['ConvertParams'](_0x10569a,_0x10569a);const _0x36de68=$gameTemp[_0x1ed671(0x9c5)](),_0x48ecf6=BattleManager[_0x1ed671(0x151)],_0x121912=BattleManager['_subject'],_0x5b2fb6=VisuMZ[_0x1ed671(0x77f)](_0x10569a[_0x1ed671(0xad6)]),_0x2f0ac9=_0x10569a[_0x1ed671(0x68b)],_0x3d071a=BattleManager[_0x1ed671(0x9a7)];if(!_0x36de68||!_0x48ecf6||!_0x121912)return;if(!_0x48ecf6[_0x1ed671(0x719)]())return;let _0x28613e=_0x48ecf6[_0x1ed671(0x719)]()[_0x1ed671(0x9fc)];if(_0x28613e<0x0)_0x28613e=_0x121912[_0x1ed671(0xb66)]();$gameTemp[_0x1ed671(0x819)](_0x5b2fb6,_0x28613e,_0x2f0ac9),_0x10569a[_0x1ed671(0x8fe)]&&_0x36de68[_0x1ed671(0x415)]('battleAnimation');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x9c3),_0x4fda05=>{const _0x4c28ae=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4c28ae(0x44f)](_0x4fda05,_0x4fda05);const _0x3c9762=$gameTemp['getLastPluginCommandInterpreter'](),_0x5cf08e=BattleManager['_subject'],_0x17d71e=VisuMZ['CreateActionSequenceTargets'](_0x4fda05['Targets']),_0xc889f7=_0x4fda05[_0x4c28ae(0x68b)],_0x1e932d=BattleManager[_0x4c28ae(0x9a7)];if(!_0x3c9762||!_0x5cf08e)return;const _0x3c459b=_0x5cf08e[_0x4c28ae(0xb66)]();$gameTemp[_0x4c28ae(0x819)](_0x17d71e,_0x3c459b,_0xc889f7),_0x4fda05[_0x4c28ae(0x8fe)]&&_0x3c9762['setWaitMode'](_0x4c28ae(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xafc),_0x12585f=>{const _0x22b84c=_0x2dcaec;if(!SceneManager[_0x22b84c(0xa2b)]())return;VisuMZ[_0x22b84c(0x44f)](_0x12585f,_0x12585f);const _0xa65621=_0x11cfed[_0x22b84c(0x92b)](_0x12585f['Slot']);if(_0xa65621<=0x0)return;const _0x412077=$gameTemp[_0x22b84c(0x9c5)](),_0x11cfed=BattleManager['_subject'],_0x171a1a=VisuMZ[_0x22b84c(0x77f)](_0x12585f[_0x22b84c(0xad6)]),_0x10ada1=_0x12585f['Mirror'],_0x1c5458=BattleManager[_0x22b84c(0x9a7)];if(!_0x412077||!_0x11cfed)return;$gameTemp[_0x22b84c(0x819)](_0x171a1a,_0xa65621,_0x10ada1),_0x12585f[_0x22b84c(0x8fe)]&&_0x412077[_0x22b84c(0x415)](_0x22b84c(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Animation_BalloonAnimation',_0x18d301=>{const _0xa12864=_0x2dcaec;if(!SceneManager[_0xa12864(0xa2b)]())return;VisuMZ[_0xa12864(0x44f)](_0x18d301,_0x18d301);const _0x710f79=$gameTemp[_0xa12864(0x9c5)](),_0x842a57=VisuMZ[_0xa12864(0x77f)](_0x18d301[_0xa12864(0xad6)]),_0x1ae253=_0x18d301['Balloon'];let _0x45f0ae=0x0;switch(_0x1ae253[_0xa12864(0xb9f)]()['trim']()){case'!':case _0xa12864(0x239):_0x45f0ae=0x1;break;case'?':case _0xa12864(0x661):_0x45f0ae=0x2;break;case _0xa12864(0x754):case _0xa12864(0x371):case _0xa12864(0x58a):case'MUSIC-NOTE':case _0xa12864(0x75d):_0x45f0ae=0x3;break;case'HEART':case _0xa12864(0x911):_0x45f0ae=0x4;break;case _0xa12864(0xc7c):case _0xa12864(0x7ae):_0x45f0ae=0x5;break;case _0xa12864(0x2cc):_0x45f0ae=0x6;break;case _0xa12864(0x2d4):case _0xa12864(0xb3b):case _0xa12864(0xbdc):_0x45f0ae=0x7;break;case _0xa12864(0x7fd):case _0xa12864(0xa5a):_0x45f0ae=0x8;break;case'LIGHT':case _0xa12864(0x4a0):case _0xa12864(0x57d):case'LIGHT-BULB':case _0xa12864(0x307):_0x45f0ae=0x9;break;case'Z':case'ZZ':case _0xa12864(0xa60):case _0xa12864(0xc17):_0x45f0ae=0xa;break;case _0xa12864(0x20c):_0x45f0ae=0xb;break;case'USER-DEFINED\x202':_0x45f0ae=0xc;break;case _0xa12864(0x4a4):_0x45f0ae=0xd;break;case _0xa12864(0x1b8):_0x45f0ae=0xe;break;case _0xa12864(0x532):_0x45f0ae=0xf;break;}for(const _0x5b2f22 of _0x842a57){if(!_0x5b2f22)continue;$gameTemp[_0xa12864(0xc0c)](_0x5b2f22,_0x45f0ae);}_0x18d301[_0xa12864(0x4ea)]&&_0x710f79&&(_0x710f79['wait'](0x1),_0x710f79[_0xa12864(0x415)](_0xa12864(0x998)));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Animation_BalloonIcon',_0x2293fc=>{const _0x91c8c8=_0x2dcaec;if(!SceneManager[_0x91c8c8(0xa2b)]())return;if(!Imported[_0x91c8c8(0x827)])return;VisuMZ[_0x91c8c8(0x44f)](_0x2293fc,_0x2293fc);const _0x559497=$gameTemp[_0x91c8c8(0x9c5)](),_0x1b4c47=VisuMZ['CreateActionSequenceTargets'](_0x2293fc[_0x91c8c8(0xad6)]),_0x3efe14=_0x2293fc[_0x91c8c8(0x990)];for(const _0x55039f of _0x1b4c47){if(!_0x55039f)continue;$gameTemp[_0x91c8c8(0xc0c)](_0x55039f,[_0x3efe14]);}_0x2293fc[_0x91c8c8(0x4ea)]&&_0x559497&&(_0x559497['wait'](0x1),_0x559497['setWaitMode']('battleBalloon'));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Animation_BalloonIconRange',_0xf3e61=>{const _0x16fcb0=_0x2dcaec;if(!SceneManager[_0x16fcb0(0xa2b)]())return;if(!Imported['VisuMZ_4_IconBalloons'])return;VisuMZ[_0x16fcb0(0x44f)](_0xf3e61,_0xf3e61);const _0x517b2c=$gameTemp[_0x16fcb0(0x9c5)](),_0x2eb96d=VisuMZ[_0x16fcb0(0x77f)](_0xf3e61[_0x16fcb0(0xad6)]),_0x1d87e9=Math[_0x16fcb0(0xaf1)](Number(_0xf3e61[_0x16fcb0(0x210)]||0x0),Number(_0xf3e61[_0x16fcb0(0x8df)]||0x0)),_0xef3dfd=Math[_0x16fcb0(0x959)](Number(_0xf3e61[_0x16fcb0(0x210)]||0x0),Number(_0xf3e61[_0x16fcb0(0x8df)]||0x0)),_0x4aebdf=[];for(let _0x9c5774=_0x1d87e9;_0x9c5774<=_0xef3dfd;_0x9c5774++){_0x4aebdf[_0x16fcb0(0x190)](_0x9c5774);}for(const _0x10ee5b of _0x2eb96d){if(!_0x10ee5b)continue;$gameTemp[_0x16fcb0(0xc0c)](_0x10ee5b,_0x4aebdf);}_0xf3e61[_0x16fcb0(0x4ea)]&&_0x517b2c&&(_0x517b2c[_0x16fcb0(0x275)](0x1),_0x517b2c[_0x16fcb0(0x415)](_0x16fcb0(0x998)));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x677),_0x2e3f72=>{const _0x3dda8c=_0x2dcaec;if(!SceneManager[_0x3dda8c(0xa2b)]())return;if(!Imported[_0x3dda8c(0x827)])return;VisuMZ[_0x3dda8c(0x44f)](_0x2e3f72,_0x2e3f72);const _0x313c03=$gameTemp['getLastPluginCommandInterpreter'](),_0x110463=VisuMZ[_0x3dda8c(0x77f)](_0x2e3f72[_0x3dda8c(0xad6)]),_0x506b3d=_0x2e3f72['icons'];for(const _0x3f0a30 of _0x110463){if(!_0x3f0a30)continue;$gameTemp[_0x3dda8c(0xc0c)](_0x3f0a30,_0x506b3d);}_0x2e3f72['WaitComplete']&&_0x313c03&&(_0x313c03[_0x3dda8c(0x275)](0x1),_0x313c03[_0x3dda8c(0x415)]('battleBalloon'));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x559),_0x368766=>{const _0x5b0c40=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x368766,_0x368766);const _0x372cf3=$gameTemp['getLastPluginCommandInterpreter'](),_0x25de6b=BattleManager[_0x5b0c40(0x151)],_0xa6a2c2=_0x368766[_0x5b0c40(0x68b)],_0x878afc=VisuMZ[_0x5b0c40(0x77f)](_0x368766[_0x5b0c40(0xad6)]);if(!_0x372cf3||!_0x25de6b)return;if(!_0x25de6b[_0x5b0c40(0x719)]())return;for(const _0x32fd3 of _0x878afc){if(!_0x32fd3)continue;_0x32fd3[_0x5b0c40(0x65e)](_0x25de6b,_0xa6a2c2);}if(_0x368766[_0x5b0c40(0x8fe)])_0x372cf3[_0x5b0c40(0x415)](_0x5b0c40(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x68a),_0x32ab69=>{const _0x788a74=_0x2dcaec;VisuMZ[_0x788a74(0x44f)](_0x32ab69,_0x32ab69);const _0x2cf62d=$gameTemp[_0x788a74(0x9c5)](),_0x37ec1f=VisuMZ[_0x788a74(0x77f)](_0x32ab69[_0x788a74(0xad6)]),_0x1097e0=_0x32ab69[_0x788a74(0x40d)];if(!_0x1097e0)return;for(const _0xd91f1b of _0x37ec1f){if(!_0xd91f1b)continue;if(!_0xd91f1b[_0x788a74(0x8d6)]())continue;_0xd91f1b[_0x788a74(0x688)](_0x1097e0);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x497),_0x240445=>{const _0x377523=_0x2dcaec;VisuMZ[_0x377523(0x44f)](_0x240445,_0x240445);const _0x35ce3c=_0x240445['ActorJS'](),_0x5f4881=$gameActors[_0x377523(0x3fc)](_0x35ce3c)||null;if(!_0x5f4881){console['log'](_0x377523(0x668));return;}const _0x160b7c=_0x240445['FilenameJS']();_0x5f4881[_0x377523(0x688)](_0x160b7c);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x57c),_0x524d6a=>{const _0x31e621=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x31e621(0x44f)](_0x524d6a,_0x524d6a);const _0x1d0549=$gameTemp['getLastPluginCommandInterpreter'](),_0xceb1c8=BattleManager[_0x31e621(0x173)],_0x2c6c05=VisuMZ[_0x31e621(0x77f)](_0x524d6a[_0x31e621(0xad6)]),_0x1422ee=_0x524d6a[_0x31e621(0x68b)];if(!_0x1d0549||!_0xceb1c8)return;const _0x274d8e=$dataSkilles[_0xceb1c8[_0x31e621(0xc2c)]()],_0x29b657=_0x274d8e[_0x31e621(0x9fc)];$gameTemp[_0x31e621(0x819)](_0x2c6c05,_0x29b657,_0x1422ee),_0x524d6a[_0x31e621(0x8fe)]&&_0x1d0549['setWaitMode'](_0x31e621(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa34),_0x155ea8=>{const _0xf910de=_0x2dcaec;if(!SceneManager[_0xf910de(0xa2b)]())return;VisuMZ[_0xf910de(0x44f)](_0x155ea8,_0x155ea8);const _0x321d21=$gameTemp[_0xf910de(0x9c5)](),_0x357fcc=VisuMZ[_0xf910de(0x77f)](_0x155ea8[_0xf910de(0xad6)]),_0x3718ee=Number(_0x155ea8['ItemID']||0x1),_0x536124=$dataItems[_0x3718ee],_0x115192=_0x155ea8['Mirror'];if(!_0x321d21)return;if(!_0x536124)return;let _0x2ed2da=_0x536124[_0xf910de(0x9fc)];$gameTemp[_0xf910de(0x819)](_0x357fcc,_0x2ed2da,_0x115192),_0x155ea8['WaitForAnimation']&&_0x321d21[_0xf910de(0x415)](_0xf910de(0x14f));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Animation_PlayAtCoordinate',_0x39d356=>{const _0x5287de=_0x2dcaec;if(!SceneManager[_0x5287de(0x496)])return;if(!SceneManager[_0x5287de(0x496)][_0x5287de(0x2a3)])return;if(!Imported[_0x5287de(0x6d3)])return;VisuMZ[_0x5287de(0x44f)](_0x39d356,_0x39d356);const _0x38aef1=$gameTemp[_0x5287de(0x9c5)](),_0x165aef=Math[_0x5287de(0x976)](_0x39d356[_0x5287de(0x17c)]),_0x583c4e=Math['round'](_0x39d356[_0x5287de(0x777)]);$gameTemp[_0x5287de(0x196)](_0x165aef,_0x583c4e,_0x39d356[_0x5287de(0xb9b)],_0x39d356[_0x5287de(0x68b)],_0x39d356[_0x5287de(0x5f1)]),_0x39d356['WaitComplete']&&_0x38aef1&&(SceneManager[_0x5287de(0x496)]['_spriteset'][_0x5287de(0x736)](),_0x38aef1[_0x5287de(0x415)](_0x5287de(0x14f)));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1c2),_0x42413c=>{const _0x30df73=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x42413c,_0x42413c);const _0x598a16=$gameTemp[_0x30df73(0x9c5)](),_0x1c761c=VisuMZ[_0x30df73(0x77f)](_0x42413c[_0x30df73(0xad6)]),_0x4b53a=_0x42413c['AnimationID'],_0x20b189=_0x42413c[_0x30df73(0x68b)];if(!_0x598a16)return;$gameTemp['requestAnimation'](_0x1c761c,_0x4b53a,_0x20b189);if(_0x42413c[_0x30df73(0x8fe)])_0x598a16[_0x30df73(0x415)](_0x30df73(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x9e8),_0x3a3695=>{const _0x351995=_0x2dcaec;if(!SceneManager[_0x351995(0xa2b)]())return;VisuMZ['ConvertParams'](_0x3a3695,_0x3a3695);const _0x1dd412=$gameTemp[_0x351995(0x9c5)](),_0xc4787b=VisuMZ['CreateActionSequenceTargets'](_0x3a3695[_0x351995(0xad6)]),_0x428f2d=Number(_0x3a3695['AnimationID'])||0x1,_0x4c259d=_0x3a3695['Mirror'];if(!_0x1dd412)return;$gameTemp[_0x351995(0x819)](_0xc4787b,_0x428f2d,_0x4c259d);if(_0x3a3695['WaitForAnimation'])_0x1dd412[_0x351995(0x415)](_0x351995(0x14f));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x602),_0xc3947f=>{const _0x5e49c9=_0x2dcaec;if(!SceneManager[_0x5e49c9(0xa2b)]())return;VisuMZ[_0x5e49c9(0x44f)](_0xc3947f,_0xc3947f);const _0x2882e9=$gameTemp[_0x5e49c9(0x9c5)](),_0x193f31=VisuMZ[_0x5e49c9(0x77f)](_0xc3947f['Targets']),_0xe334b7=Number(_0xc3947f[_0x5e49c9(0xa0a)]||0x1),_0x490906=$dataSkills[_0xe334b7],_0x2f40ff=_0xc3947f['Mirror'];if(!_0x2882e9)return;if(!_0x490906)return;let _0x5a7e35=_0x490906[_0x5e49c9(0x9fc)];$gameTemp[_0x5e49c9(0x819)](_0x193f31,_0x5a7e35,_0x2f40ff),_0xc3947f[_0x5e49c9(0x8fe)]&&_0x2882e9[_0x5e49c9(0x415)]('battleAnimation');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb59),_0x2111d6=>{const _0x733529=_0x2dcaec;if(!SceneManager[_0x733529(0xa2b)]())return;const _0x55c51a=$gameTemp[_0x733529(0x9c5)]();if(!_0x55c51a)return;_0x55c51a[_0x733529(0x415)](_0x733529(0x14f));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x830),_0x1ee5c6=>{const _0x24d76=_0x2dcaec;if(!SceneManager[_0x24d76(0xa2b)]())return;VisuMZ[_0x24d76(0x44f)](_0x1ee5c6,_0x1ee5c6);const _0x2ce06f=BattleManager['_logWindow'],_0x5a8520=_0x1ee5c6[_0x24d76(0x3fd)]&&Imported[_0x24d76(0xb89)];_0x2ce06f['addText'](_0x1ee5c6[_0x24d76(0x6b0)]),_0x5a8520&&Imported[_0x24d76(0xb89)]&&$gameSystem[_0x24d76(0x72b)](_0x1ee5c6[_0x24d76(0x6b0)]||'',_0x1ee5c6[_0x24d76(0x201)]||0x0);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x139),_0x5b607c=>{if(!SceneManager['isSceneBattle']())return;const _0x4260a0=BattleManager['_logWindow'];_0x4260a0['clear']();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1a0),_0x545245=>{const _0x5dc1df=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;const _0x1c2907=$gameTemp[_0x5dc1df(0x9c5)](),_0x570780=BattleManager[_0x5dc1df(0x151)],_0x3400f8=BattleManager[_0x5dc1df(0x173)],_0x15ece8=BattleManager['_logWindow'];if(!_0x1c2907||!_0x570780||!_0x3400f8)return;if(!_0x570780['item']())return;_0x15ece8[_0x5dc1df(0x189)](_0x3400f8,_0x570780[_0x5dc1df(0x719)]()),_0x1c2907['setWaitMode'](_0x5dc1df(0xbd0));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_BattleLog_PopBaseLine',_0x4ca92b=>{const _0x5e4cea=_0x2dcaec;if(!SceneManager[_0x5e4cea(0xa2b)]())return;const _0x312979=BattleManager['_logWindow'];_0x312979[_0x5e4cea(0x3ee)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x68e),_0x329388=>{const _0x3fd54d=_0x2dcaec;if(!SceneManager[_0x3fd54d(0xa2b)]())return;const _0x47e379=BattleManager[_0x3fd54d(0x9a7)];_0x47e379[_0x3fd54d(0x328)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x6dd),_0x45e4bc=>{const _0x233296=_0x2dcaec;if(!SceneManager[_0x233296(0xa2b)]())return;const _0x1bbf72=BattleManager[_0x233296(0x9a7)];_0x1bbf72[_0x233296(0xbc9)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x540),_0x4a70e4=>{const _0x3ef67a=_0x2dcaec;if(!SceneManager[_0x3ef67a(0xa2b)]())return;VisuMZ['ConvertParams'](_0x4a70e4,_0x4a70e4),SceneManager[_0x3ef67a(0x496)][_0x3ef67a(0x51e)](_0x4a70e4[_0x3ef67a(0x39a)]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb52),_0x4e2a6e=>{const _0x31a30f=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;const _0x345555=$gameTemp[_0x31a30f(0x9c5)]();_0x345555[_0x31a30f(0x415)](_0x31a30f(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xaad),_0x1c2c71=>{const _0x1adb65=_0x2dcaec;if(!SceneManager[_0x1adb65(0xa2b)]())return;const _0x4e971c=$gameTemp[_0x1adb65(0x9c5)](),_0x3cbb7f=BattleManager[_0x1adb65(0x9a7)];_0x3cbb7f[_0x1adb65(0xbbd)](),_0x4e971c['setWaitMode'](_0x1adb65(0xbd0));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x7f0),_0x7795ae=>{const _0x11516a=_0x2dcaec;if(!SceneManager[_0x11516a(0xa2b)]())return;if(!Imported[_0x11516a(0x161)])return;VisuMZ[_0x11516a(0x44f)](_0x7795ae,_0x7795ae);const _0x6c3365=$gameScreen[_0x11516a(0x41f)]();_0x6c3365[_0x11516a(0xaa7)]=_0x7795ae[_0x11516a(0xbaa)];}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Camera_FocusPoint',_0x5bd9c0=>{const _0x52b142=_0x2dcaec;if(!SceneManager[_0x52b142(0xa2b)]())return;if(!Imported[_0x52b142(0x161)])return;VisuMZ['ConvertParams'](_0x5bd9c0,_0x5bd9c0);const _0x5069fd=$gameTemp[_0x52b142(0x9c5)](),_0x4c2c60=_0x5bd9c0['WaitForCamera'];$gameScreen['setBattleCameraPoint'](_0x5bd9c0[_0x52b142(0x94a)],_0x5bd9c0['FocusY'],_0x5bd9c0[_0x52b142(0x603)],_0x5bd9c0[_0x52b142(0x9cf)]);if(_0x4c2c60)_0x5069fd[_0x52b142(0x415)](_0x52b142(0xa75));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xc07),_0x150a79=>{const _0x5cedfd=_0x2dcaec;if(!SceneManager[_0x5cedfd(0xa2b)]())return;if(!Imported[_0x5cedfd(0x161)])return;VisuMZ['ConvertParams'](_0x150a79,_0x150a79);const _0x53e150=$gameTemp[_0x5cedfd(0x9c5)](),_0x5b50e3=VisuMZ['CreateActionSequenceTargets'](_0x150a79[_0x5cedfd(0xad6)]),_0x15da46=_0x150a79[_0x5cedfd(0x882)];$gameScreen['setBattleCameraTargets'](_0x5b50e3,_0x150a79[_0x5cedfd(0x603)],_0x150a79[_0x5cedfd(0x9cf)]);if(_0x15da46)_0x53e150[_0x5cedfd(0x415)](_0x5cedfd(0xa75));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb8b),_0x2275a1=>{const _0x50d9e5=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x50d9e5(0x161)])return;VisuMZ[_0x50d9e5(0x44f)](_0x2275a1,_0x2275a1);const _0x25ea13=$gameTemp['getLastPluginCommandInterpreter'](),_0x45387a=_0x2275a1[_0x50d9e5(0x882)];$gameScreen[_0x50d9e5(0x432)](_0x2275a1['OffsetX'],_0x2275a1[_0x50d9e5(0x53d)],_0x2275a1['Duration'],_0x2275a1['EasingType']);if(_0x45387a)_0x25ea13[_0x50d9e5(0x415)](_0x50d9e5(0xa75));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x549),_0x1b4dd8=>{const _0xa0b34c=_0x2dcaec;if(!SceneManager[_0xa0b34c(0xa2b)]())return;if(!Imported[_0xa0b34c(0x161)])return;VisuMZ[_0xa0b34c(0x44f)](_0x1b4dd8,_0x1b4dd8);const _0x4d38ee=$gameTemp['getLastPluginCommandInterpreter'](),_0x4ff6d0=_0x1b4dd8[_0xa0b34c(0x303)],_0x90cdd5=_0x1b4dd8[_0xa0b34c(0x8f2)],_0x2874a9=_0x1b4dd8[_0xa0b34c(0x882)];if(_0x4ff6d0){const _0x34dc82=Math[_0xa0b34c(0x976)](Graphics[_0xa0b34c(0x64b)]/0x2),_0x4fbf60=Math['round'](Graphics[_0xa0b34c(0x75c)]/0x2);$gameScreen[_0xa0b34c(0x564)](_0x34dc82,_0x4fbf60,_0x1b4dd8[_0xa0b34c(0x603)],_0x1b4dd8['EasingType']);}_0x90cdd5&&$gameScreen[_0xa0b34c(0x432)](0x0,0x0,_0x1b4dd8[_0xa0b34c(0x603)],_0x1b4dd8[_0xa0b34c(0x9cf)]);if(_0x2874a9)_0x4d38ee[_0xa0b34c(0x415)](_0xa0b34c(0xa75));}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Camera_WaitForCamera',_0x44d542=>{const _0x24bd21=_0x2dcaec;if(!SceneManager[_0x24bd21(0xa2b)]())return;if(!Imported[_0x24bd21(0x161)])return;const _0x27c252=$gameTemp[_0x24bd21(0x9c5)]();if(!_0x27c252)return;_0x27c252[_0x24bd21(0x415)]('battleCamera');}),VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8a5)]=function(_0x21a0a7){const _0x4efcda=_0x2dcaec;_0x21a0a7[_0x4efcda(0x58b)]='';const _0x2610c0=VisuMZ['VisualCutinEffect'][_0x4efcda(0x8a5)](_0x21a0a7),_0x5d2d6a=VisuMZ['CreateActionSequenceTargets'](_0x21a0a7[_0x4efcda(0xad6)])[0x0]||null;return _0x5d2d6a&&(_0x2610c0['portraitFilename']=_0x5d2d6a['visualCutinPortraitFilename'](),_0x2610c0[_0x4efcda(0x3e5)]=_0x5d2d6a['visualCutinPortraitIndex'](),_0x2610c0[_0x4efcda(0xb01)]=_0x5d2d6a[_0x4efcda(0x92c)](),_0x2610c0['portraitType']=_0x5d2d6a[_0x4efcda(0x8ff)](),_0x5d2d6a[_0x4efcda(0x5d1)]()&&(_0x5d2d6a[_0x4efcda(0xaf9)]()&&(_0x2610c0[_0x4efcda(0x2ba)]=!_0x2610c0[_0x4efcda(0x2ba)]),_0x5d2d6a[_0x4efcda(0xa78)]()&&(_0x2610c0[_0x4efcda(0x509)]=!_0x2610c0['portraitFlipVert']),_0x2610c0['portraitType']===_0x4efcda(0x43d)&&(_0x2610c0[_0x4efcda(0x2ba)]=!_0x2610c0['portraitFlipHorz']),_0x21a0a7[_0x4efcda(0x391)][_0x4efcda(0x6ce)]&&(_0x2610c0['parallaxScrollX']*=-0x1),_0x21a0a7['ExtraSettings'][_0x4efcda(0x7f4)]&&(_0x2610c0[_0x4efcda(0x182)]*=-0x1),_0x2610c0[_0x4efcda(0x614)]+=_0x21a0a7[_0x4efcda(0x391)][_0x4efcda(0x952)]??0x0)),_0x2610c0;},PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x2bc),_0x341db5=>{const _0x56236f=_0x2dcaec;if(!SceneManager[_0x56236f(0xa2b)]())return;if(!Imported[_0x56236f(0xc1e)])return;VisuMZ['ConvertParams'](_0x341db5,_0x341db5);const _0x43a52f=VisuMZ[_0x56236f(0xae3)][_0x56236f(0x8a5)](_0x341db5);SceneManager[_0x56236f(0x496)][_0x56236f(0x209)](_0x43a52f);const _0x409ccf=$gameTemp[_0x56236f(0x9c5)]();_0x409ccf&&_0x341db5[_0x56236f(0x333)]&&_0x409ccf[_0x56236f(0x415)](_0x56236f(0xbd7));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x704),_0x19e638=>{const _0x2dc753=_0x2dcaec;if(!SceneManager[_0x2dc753(0xa2b)]())return;if(!Imported[_0x2dc753(0xc1e)])return;VisuMZ['ConvertParams'](_0x19e638,_0x19e638),SceneManager[_0x2dc753(0x496)][_0x2dc753(0xa73)]();const _0x155f26=$gameTemp[_0x2dc753(0x9c5)]();_0x155f26&&_0x19e638[_0x2dc753(0x304)]&&_0x155f26[_0x2dc753(0x415)](_0x2dc753(0x896));}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Cutin_EndVisualCutinEffectType',_0x4cdb95=>{const _0x311bdf=_0x2dcaec;if(!SceneManager[_0x311bdf(0xa2b)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;VisuMZ['ConvertParams'](_0x4cdb95,_0x4cdb95);const _0x47dbcd=_0x4cdb95[_0x311bdf(0x134)][_0x311bdf(0x918)]()[_0x311bdf(0x651)]();SceneManager[_0x311bdf(0x496)][_0x311bdf(0x705)](_0x47dbcd);const _0x35fd72=$gameTemp[_0x311bdf(0x9c5)]();_0x35fd72&&_0x4cdb95[_0x311bdf(0x304)]&&_0x35fd72[_0x311bdf(0x415)](_0x311bdf(0x896));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x5c3),_0x4f27e8=>{const _0x3cc11b=_0x2dcaec;if(!SceneManager[_0x3cc11b(0xa2b)]())return;if(!Imported['VisuMZ_3_VisualCutinEffect'])return;const _0x29dff8=$gameTemp[_0x3cc11b(0x9c5)]();_0x29dff8[_0x3cc11b(0x415)]('cutinEnter');}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x22e),_0x252298=>{const _0x318012=_0x2dcaec;if(!SceneManager[_0x318012(0xa2b)]())return;if(!Imported[_0x318012(0xc1e)])return;const _0xd513bc=$gameTemp[_0x318012(0x9c5)]();_0xd513bc[_0x318012(0x415)](_0x318012(0x896));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0xb6d),_0x287a6a=>{const _0x84ba71=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x84ba71(0x9e3)])return;VisuMZ['ConvertParams'](_0x287a6a,_0x287a6a);const _0x6c6549=VisuMZ['CreateActionSequenceTargets'](_0x287a6a[_0x84ba71(0xad6)]),_0x2dd5e5=_0x287a6a['MotionAni'][_0x84ba71(0x918)]()[_0x84ba71(0x651)]();for(const _0xdd9ff0 of _0x6c6549){if(!_0xdd9ff0)continue;_0xdd9ff0['requestDragonbonesAnimation'](_0x2dd5e5);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x74f),_0x37d9b3=>{const _0x530ba9=_0x2dcaec;if(!SceneManager[_0x530ba9(0xa2b)]())return;if(!Imported[_0x530ba9(0x9e3)])return;VisuMZ[_0x530ba9(0x44f)](_0x37d9b3,_0x37d9b3);const _0x45c9d1=VisuMZ[_0x530ba9(0x77f)](_0x37d9b3[_0x530ba9(0xad6)]),_0x953676=_0x37d9b3[_0x530ba9(0x8c7)];for(const _0x39e38a of _0x45c9d1){if(!_0x39e38a)continue;_0x39e38a['dragonbonesData']()['timeScale']=_0x953676;}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x5fe),_0x129f2c=>{const _0x3885b8=_0x2dcaec;if(!SceneManager[_0x3885b8(0xa2b)]())return;if(!Imported[_0x3885b8(0xa6c)])return;VisuMZ[_0x3885b8(0x44f)](_0x129f2c,_0x129f2c);const _0x847d38=BattleManager['_action'],_0x4ed2b7=_0x129f2c[_0x3885b8(0x8dd)];if(!_0x847d38)return;_0x847d38['_battleCoreAddedElements']=_0x4ed2b7;}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Element_Clear',_0x570694=>{const _0x118d4f=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x118d4f(0xa6c)])return;const _0x1be796=BattleManager[_0x118d4f(0x151)];if(!_0x1be796)return;_0x1be796[_0x118d4f(0x53a)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x6f0),_0x1e6816=>{const _0xed2e5d=_0x2dcaec;if(!SceneManager[_0xed2e5d(0xa2b)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ['ConvertParams'](_0x1e6816,_0x1e6816);const _0x5b7199=BattleManager[_0xed2e5d(0x151)],_0x52ad53=_0x1e6816[_0xed2e5d(0x8dd)];if(!_0x5b7199)return;_0x5b7199[_0xed2e5d(0xac8)]=_0x52ad53;}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x573),_0x8607c0=>{const _0x34f872=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x34f872(0xa6c)])return;const _0x3be258=BattleManager['_action'];if(!_0x3be258)return;_0x3be258[_0x34f872(0x8cf)]=!![];}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Grid_ActionAnimationAtNode',_0x1c1700=>{const _0x4e365d=_0x2dcaec;VisuMZ[_0x4e365d(0x2f8)][_0x4e365d(0xc13)](_0x1c1700);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x428),_0x3ccde1=>{const _0x2f5241=_0x2dcaec;VisuMZ[_0x2f5241(0x2f8)][_0x2f5241(0x428)](_0x3ccde1);}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x28f),_0x32bef2=>{const _0x2a0f51=_0x2dcaec;VisuMZ[_0x2a0f51(0x2f8)][_0x2a0f51(0x28f)](_0x32bef2);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x76a),_0x5e84b8=>{const _0x4a41ce=_0x2dcaec;VisuMZ[_0x4a41ce(0x2f8)][_0x4a41ce(0x28f)](_0x5e84b8);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1a4),_0x41d8f0=>{const _0x19a943=_0x2dcaec;VisuMZ[_0x19a943(0x2f8)]['ActSeq_Grid_AnimationIDAtNode'](_0x41d8f0);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x869),_0x3ef9a8=>{const _0x714a5=_0x2dcaec;VisuMZ[_0x714a5(0x2f8)][_0x714a5(0x869)](_0x3ef9a8);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x280),_0x571ea8=>{const _0x2c34f3=_0x2dcaec;VisuMZ[_0x2c34f3(0x2f8)][_0x2c34f3(0x280)](_0x571ea8);}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x4c2),_0x363c9a=>{const _0x39dffb=_0x2dcaec;VisuMZ[_0x39dffb(0x2f8)][_0x39dffb(0x4c2)](_0x363c9a);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Grid_MoveTargetsInDirection',_0x387aa5=>{const _0x151ebc=_0x2dcaec;VisuMZ[_0x151ebc(0x2f8)][_0x151ebc(0x5e2)](_0x387aa5);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Grid_PullToTargetNode',_0x468e47=>{const _0x751248=_0x2dcaec;VisuMZ[_0x751248(0x2f8)][_0x751248(0xabb)](_0x468e47);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x234),_0x5652bf=>{const _0x10f147=_0x2dcaec;VisuMZ[_0x10f147(0x2f8)][_0x10f147(0x234)](_0x5652bf);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x2da),_0x1c4a23=>{const _0x125668=_0x2dcaec;VisuMZ[_0x125668(0x2f8)][_0x125668(0x2da)](_0x1c4a23);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xbb8),_0x1e8deb=>{const _0x4b916=_0x2dcaec;VisuMZ[_0x4b916(0x2f8)][_0x4b916(0xbb8)](_0x1e8deb);}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Grid_TeleportToNode',_0x458fd2=>{const _0x11e7e9=_0x2dcaec;VisuMZ[_0x11e7e9(0x2f8)][_0x11e7e9(0x7fa)](_0x458fd2);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb62),_0x1922d0=>{VisuMZ['BattleGridSystem']['ActSeq_Grid_TraverseToNode'](_0x1922d0);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xafa),_0x49094a=>{const _0x3765fd=_0x2dcaec;if(!Imported[_0x3765fd(0x44a)])return;if(!SceneManager[_0x3765fd(0xa2b)]())return;VisuMZ['ConvertParams'](_0x49094a,_0x49094a);const _0x5da430=VisuMZ[_0x3765fd(0x77f)](_0x49094a[_0x3765fd(0xad6)]);for(const _0x5557b2 of _0x5da430){if(!_0x5557b2)continue;_0x5557b2[_0x3765fd(0x1c3)](_0x3765fd(0x99e)),_0x5557b2[_0x3765fd(0x1c3)](_0x3765fd(0x7ed)),_0x5557b2['removeHorrorEffect']('tv'),_0x5557b2[_0x3765fd(0xb1f)]();}$gamePlayer[_0x3765fd(0xbc9)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Horror_GlitchCreate',_0x29f2be=>{const _0x55f4f6=_0x2dcaec;if(!Imported[_0x55f4f6(0x44a)])return;if(!SceneManager[_0x55f4f6(0xa2b)]())return;VisuMZ['ConvertParams'](_0x29f2be,_0x29f2be);const _0x3e7992=VisuMZ['CreateActionSequenceTargets'](_0x29f2be['Targets']),_0x24e624=_0x55f4f6(0x7ed);_0x29f2be[_0x55f4f6(0xb76)]=Math[_0x55f4f6(0xbd6)](_0x29f2be[_0x55f4f6(0x582)]/0x2),_0x29f2be['sliceMax']=_0x29f2be[_0x55f4f6(0x582)],_0x29f2be[_0x55f4f6(0x561)]=!![];for(const _0x41992e of _0x3e7992){if(!_0x41992e)continue;_0x41992e[_0x55f4f6(0x85a)](_0x24e624,_0x29f2be);}$gamePlayer[_0x55f4f6(0xbc9)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1d0),_0x5fceeb=>{const _0x220329=_0x2dcaec;if(!Imported[_0x220329(0x44a)])return;if(!SceneManager[_0x220329(0xa2b)]())return;VisuMZ[_0x220329(0x44f)](_0x5fceeb,_0x5fceeb);const _0x319548=VisuMZ['CreateActionSequenceTargets'](_0x5fceeb[_0x220329(0xad6)]);for(const _0xd7e80b of _0x319548){if(!_0xd7e80b)continue;_0xd7e80b['removeHorrorEffect'](_0x220329(0x7ed));}$gamePlayer[_0x220329(0xbc9)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Horror_NoiseCreate',_0x92759c=>{const _0x379338=_0x2dcaec;if(!Imported['VisuMZ_2_HorrorEffects'])return;if(!SceneManager[_0x379338(0xa2b)]())return;VisuMZ[_0x379338(0x44f)](_0x92759c,_0x92759c);const _0x2b4e2f=VisuMZ[_0x379338(0x77f)](_0x92759c[_0x379338(0xad6)]),_0x870102=_0x379338(0x99e);for(const _0x4a25c0 of _0x2b4e2f){if(!_0x4a25c0)continue;_0x4a25c0['setHorrorEffectSettings'](_0x870102,_0x92759c);}$gamePlayer[_0x379338(0xbc9)]();}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Horror_NoiseRemove',_0x18e7a5=>{const _0x436382=_0x2dcaec;if(!Imported[_0x436382(0x44a)])return;if(!SceneManager[_0x436382(0xa2b)]())return;VisuMZ[_0x436382(0x44f)](_0x18e7a5,_0x18e7a5);const _0x45ed5c=VisuMZ[_0x436382(0x77f)](_0x18e7a5[_0x436382(0xad6)]);for(const _0x3c09b8 of _0x45ed5c){if(!_0x3c09b8)continue;_0x3c09b8['removeHorrorEffect'](_0x436382(0x99e));}$gamePlayer[_0x436382(0xbc9)]();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Horror_TVCreate',_0x211b9f=>{const _0x26242a=_0x2dcaec;if(!Imported[_0x26242a(0x44a)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x26242a(0x44f)](_0x211b9f,_0x211b9f);const _0x1db8ec=VisuMZ[_0x26242a(0x77f)](_0x211b9f['Targets']),_0x2e78f1='tv';for(const _0x4a02dd of _0x1db8ec){if(!_0x4a02dd)continue;_0x4a02dd['setHorrorEffectSettings'](_0x2e78f1,_0x211b9f);}$gamePlayer['refresh']();}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x1cc),_0x354acc=>{const _0x2615a9=_0x2dcaec;if(!Imported[_0x2615a9(0x44a)])return;if(!SceneManager[_0x2615a9(0xa2b)]())return;VisuMZ[_0x2615a9(0x44f)](_0x354acc,_0x354acc);const _0x11107c=VisuMZ[_0x2615a9(0x77f)](_0x354acc['Targets']);for(const _0x27e0b0 of _0x11107c){if(!_0x27e0b0)continue;_0x27e0b0[_0x2615a9(0x1c3)]('tv');}$gamePlayer['refresh']();}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb69),_0x43422c=>{const _0x4f0b06=_0x2dcaec;if(!Imported[_0x4f0b06(0x277)])return;const _0x26730c=SceneManager['_scene']['_spriteset'];if(!_0x26730c)return;if(VisuMZ[_0x4f0b06(0x6f8)][_0x4f0b06(0x620)]<=1.04){alert(_0x4f0b06(0x44d)),SceneManager[_0x4f0b06(0x33f)]();return;}VisuMZ[_0x4f0b06(0x44f)](_0x43422c,_0x43422c);const _0x109f0f=_0x43422c[_0x4f0b06(0x9af)];_0x26730c[_0x4f0b06(0x315)](_0x109f0f);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x849),_0x3c2a45=>{const _0x132741=_0x2dcaec;if(!SceneManager[_0x132741(0xa2b)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x27c91e=SceneManager[_0x132741(0x496)][_0x132741(0x2a3)];if(!_0x27c91e)return;VisuMZ['ConvertParams'](_0x3c2a45,_0x3c2a45);const _0x2bb45b=_0x3c2a45['Intensity']||0x1,_0xdf659b=_0x3c2a45[_0x132741(0x603)]||0x1,_0x2f771b=_0x3c2a45['EasingType']||'Linear';_0x27c91e['setupRgbSplitImpactFilter'](_0x2bb45b,_0xdf659b,_0x2f771b);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x982),_0x268a94=>{const _0x21228e=_0x2dcaec;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x4bd61f=SceneManager[_0x21228e(0x496)]['_spriteset'];if(!_0x4bd61f)return;if(VisuMZ[_0x21228e(0x6f8)][_0x21228e(0x620)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x268a94,_0x268a94);const _0xe57c35=_0x268a94[_0x21228e(0x9af)];_0x4bd61f[_0x21228e(0x48f)](_0xe57c35);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa6d),_0x2b622c=>{const _0x3a270b=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3a270b(0x277)])return;const _0x1cea71=SceneManager['_scene']['_spriteset'];if(!_0x1cea71)return;VisuMZ['ConvertParams'](_0x2b622c,_0x2b622c);const _0x3218ed=Number(_0x2b622c[_0x3a270b(0x34a)])||0x0,_0xb8eff3=Number(_0x2b622c['Rate']),_0x2b6e2e=_0x2b622c['Duration']||0x1,_0x2f2d47=_0x2b622c[_0x3a270b(0x9cf)]||_0x3a270b(0x41d);_0x1cea71[_0x3a270b(0xb5d)](_0x3218ed,_0xb8eff3,_0x2b6e2e,_0x2f2d47);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x2ae),_0x407c49=>{const _0x277483=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x42c570=SceneManager[_0x277483(0x496)][_0x277483(0x2a3)];if(!_0x42c570)return;VisuMZ['ConvertParams'](_0x407c49,_0x407c49);const _0x233ed6=Number(_0x407c49['Angle'])||0x0,_0x39c582=Number(_0x407c49[_0x277483(0xb43)]),_0x3197f4=_0x407c49[_0x277483(0x603)]||0x1,_0x21fec7=_0x407c49['EasingType']||_0x277483(0x41d),_0x4c02ad=VisuMZ[_0x277483(0x77f)](_0x407c49[_0x277483(0xad6)]);for(const _0x1740a1 of _0x4c02ad){if(!_0x1740a1)continue;if(!_0x1740a1[_0x277483(0xbc2)]())continue;_0x1740a1[_0x277483(0xbc2)]()[_0x277483(0xb5d)](_0x233ed6,_0x39c582,_0x3197f4,_0x21fec7);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x4fc),_0x279adb=>{const _0x1ba6fb=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1ba6fb(0x277)])return;VisuMZ[_0x1ba6fb(0x44f)](_0x279adb,_0x279adb);const _0x46fa92={'delay':_0x279adb[_0x1ba6fb(0xa32)],'duration':_0x279adb[_0x1ba6fb(0x8d8)],'hue':_0x279adb[_0x1ba6fb(0x9cd)],'opacityStart':_0x279adb[_0x1ba6fb(0xa5f)],'tone':_0x279adb[_0x1ba6fb(0xb81)],'visible':!![]},_0x3bb015=VisuMZ[_0x1ba6fb(0x77f)](_0x279adb['Targets']);for(const _0x285193 of _0x3bb015){if(!_0x285193)continue;_0x285193[_0x1ba6fb(0x763)](_0x46fa92);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x931),_0x10872c=>{const _0x33d57c=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ[_0x33d57c(0x44f)](_0x10872c,_0x10872c);const _0x23a7f7=VisuMZ[_0x33d57c(0x77f)](_0x10872c[_0x33d57c(0xad6)]);for(const _0x448cbd of _0x23a7f7){if(!_0x448cbd)continue;_0x448cbd[_0x33d57c(0x143)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xc2b),_0x1cb356=>{const _0x11415a=_0x2dcaec;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x25cfe4=SceneManager[_0x11415a(0x496)][_0x11415a(0x2a3)];if(!_0x25cfe4)return;if(VisuMZ[_0x11415a(0x6f8)]['version']<=1.04){alert(_0x11415a(0x44d)),SceneManager[_0x11415a(0x33f)]();return;}VisuMZ[_0x11415a(0x44f)](_0x1cb356,_0x1cb356);const _0x3ad317=_0x1cb356[_0x11415a(0x9af)];_0x25cfe4['setupNegativeImpactFilter'](_0x3ad317);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Impact_Oversaturate',_0x3135db=>{const _0x1b8f94=_0x2dcaec;if(!Imported[_0x1b8f94(0x277)])return;const _0x15778c=SceneManager[_0x1b8f94(0x496)]['_spriteset'];if(!_0x15778c)return;if(VisuMZ['ActSeqImpact'][_0x1b8f94(0x620)]<=1.04){alert(_0x1b8f94(0x44d)),SceneManager['exit']();return;}VisuMZ[_0x1b8f94(0x44f)](_0x3135db,_0x3135db);const _0x2b5854=_0x3135db[_0x1b8f94(0x9af)];_0x15778c[_0x1b8f94(0x43f)](_0x2b5854);}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x1be),_0x11a155=>{const _0x231706=_0x2dcaec;if(!Imported[_0x231706(0x277)])return;const _0x1ec304=SceneManager[_0x231706(0x496)][_0x231706(0x2a3)];if(!_0x1ec304)return;VisuMZ[_0x231706(0x44f)](_0x11a155,_0x11a155);const _0xc2e4fb=_0x11a155['X']||0x0,_0x557714=_0x11a155['Y']||0x0,_0x3b7474=_0x11a155[_0x231706(0x2f1)]||0x0,_0x4e6eac=_0x11a155[_0x231706(0x26f)]||0x0,_0xdaa3a4=_0x11a155[_0x231706(0x603)]||0x1;_0x1ec304[_0x231706(0x45e)](_0xc2e4fb,_0x557714,_0x3b7474,_0x4e6eac,_0xdaa3a4);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Impact_ShockwaveEachTargets',_0x3956a2=>{const _0x149adf=_0x2dcaec;if(!SceneManager[_0x149adf(0xa2b)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2279b9=SceneManager[_0x149adf(0x496)][_0x149adf(0x2a3)];if(!_0x2279b9)return;VisuMZ['ConvertParams'](_0x3956a2,_0x3956a2);const _0x542a7d=VisuMZ[_0x149adf(0x77f)](_0x3956a2[_0x149adf(0xad6)]),_0x4bd048=_0x3956a2[_0x149adf(0x750)],_0x14dbe1=_0x3956a2['OffsetX']||0x0,_0x170f61=_0x3956a2[_0x149adf(0x53d)]||0x0,_0x479c08=_0x3956a2[_0x149adf(0x2f1)]||0x0,_0x50faf9=_0x3956a2[_0x149adf(0x26f)]||0x0,_0x5b8e69=_0x3956a2['Duration']||0x1;for(const _0x4815c1 of _0x542a7d){if(!_0x4815c1)continue;if(!_0x4815c1[_0x149adf(0xbc2)]())continue;const _0x3c13ca=_0x4815c1[_0x149adf(0xbc2)]();let _0x3aaed4=_0x3c13ca[_0x149adf(0xae9)],_0x50389=_0x3c13ca[_0x149adf(0xa19)];_0x3aaed4+=(Graphics[_0x149adf(0x64b)]-Graphics[_0x149adf(0x555)])/0x2,_0x50389+=(Graphics[_0x149adf(0x75c)]-Graphics[_0x149adf(0xab4)])/0x2;if(_0x4bd048[_0x149adf(0xb9e)](/front/i))_0x3aaed4+=(_0x4815c1[_0x149adf(0x5d1)]()?0x1:-0x1)*_0x3c13ca['mainSpriteWidth']()/0x2;else _0x4bd048[_0x149adf(0xb9e)](/back/i)&&(_0x3aaed4+=(_0x4815c1[_0x149adf(0x5d1)]()?-0x1:0x1)*_0x3c13ca[_0x149adf(0x74d)]()/0x2);if(_0x4bd048['match'](/head/i))_0x50389-=_0x3c13ca[_0x149adf(0x3c2)]();else _0x4bd048[_0x149adf(0xb9e)](/center/i)&&(_0x50389-=_0x3c13ca['mainSpriteHeight']()/0x2);_0x3aaed4+=_0x14dbe1,_0x50389+=_0x170f61,_0x2279b9['setupShockwaveImpactFilter'](_0x3aaed4,_0x50389,_0x479c08,_0x50faf9,_0x5b8e69);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x613),_0x5d1e24=>{const _0x9221e6=_0x2dcaec;if(!SceneManager[_0x9221e6(0xa2b)]())return;if(!Imported[_0x9221e6(0x277)])return;const _0x43ddb5=SceneManager[_0x9221e6(0x496)][_0x9221e6(0x2a3)];if(!_0x43ddb5)return;VisuMZ['ConvertParams'](_0x5d1e24,_0x5d1e24);const _0x49ca1f=VisuMZ[_0x9221e6(0x77f)](_0x5d1e24[_0x9221e6(0xad6)]),_0x4c12d9=_0x5d1e24[_0x9221e6(0x750)],_0x4e3825=_0x5d1e24[_0x9221e6(0x842)]||0x0,_0x50768d=_0x5d1e24['OffsetY']||0x0,_0x50a7e5=_0x5d1e24['Amp']||0x0,_0x27093e=_0x5d1e24[_0x9221e6(0x26f)]||0x0,_0x2e3453=_0x5d1e24[_0x9221e6(0x603)]||0x1,_0x30d76b=Math[_0x9221e6(0xaf1)](..._0x49ca1f[_0x9221e6(0xc20)](_0x2a5d86=>_0x2a5d86['battler']()[_0x9221e6(0xae9)]-_0x2a5d86[_0x9221e6(0xbc2)]()[_0x9221e6(0x74d)]()/0x2)),_0x24d769=Math[_0x9221e6(0x959)](..._0x49ca1f[_0x9221e6(0xc20)](_0x4dbd4a=>_0x4dbd4a[_0x9221e6(0xbc2)]()[_0x9221e6(0xae9)]+_0x4dbd4a['battler']()[_0x9221e6(0x74d)]()/0x2)),_0x452b98=Math[_0x9221e6(0xaf1)](..._0x49ca1f[_0x9221e6(0xc20)](_0x3c06ab=>_0x3c06ab['battler']()[_0x9221e6(0xa19)]-_0x3c06ab[_0x9221e6(0xbc2)]()['mainSpriteHeight']())),_0x4b2417=Math[_0x9221e6(0x959)](..._0x49ca1f[_0x9221e6(0xc20)](_0x18bfa5=>_0x18bfa5[_0x9221e6(0xbc2)]()[_0x9221e6(0xa19)])),_0x9977e0=_0x49ca1f[_0x9221e6(0x5ed)](_0x5a6846=>_0x5a6846[_0x9221e6(0x8d6)]())[_0x9221e6(0x7ce)],_0x3db39d=_0x49ca1f[_0x9221e6(0x5ed)](_0xa24746=>_0xa24746[_0x9221e6(0x5d1)]())['length'];let _0x18e6b9=0x0,_0x52172b=0x0;if(_0x4c12d9[_0x9221e6(0xb9e)](/front/i))_0x18e6b9=_0x9977e0>=_0x3db39d?_0x30d76b:_0x24d769;else{if(_0x4c12d9[_0x9221e6(0xb9e)](/middle/i))_0x18e6b9=(_0x30d76b+_0x24d769)/0x2,melee=-0x1;else _0x4c12d9[_0x9221e6(0xb9e)](/back/i)&&(_0x18e6b9=_0x9977e0>=_0x3db39d?_0x24d769:_0x30d76b);}if(_0x4c12d9['match'](/head/i))_0x52172b=_0x452b98;else{if(_0x4c12d9[_0x9221e6(0xb9e)](/center/i))_0x52172b=(_0x452b98+_0x4b2417)/0x2;else _0x4c12d9[_0x9221e6(0xb9e)](/base/i)&&(_0x52172b=_0x4b2417);}_0x18e6b9+=(Graphics[_0x9221e6(0x64b)]-Graphics['boxWidth'])/0x2,_0x52172b+=(Graphics[_0x9221e6(0x75c)]-Graphics[_0x9221e6(0xab4)])/0x2,_0x18e6b9+=_0x4e3825,_0x52172b+=_0x50768d,_0x43ddb5[_0x9221e6(0x45e)](_0x18e6b9,_0x52172b,_0x50a7e5,_0x27093e,_0x2e3453);}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0xadd),_0x2df8dd=>{const _0x150820=_0x2dcaec;if(!Imported[_0x150820(0x277)])return;const _0x223504=SceneManager[_0x150820(0x496)]['_spriteset'];if(!_0x223504)return;if(VisuMZ[_0x150820(0x6f8)][_0x150820(0x620)]<=1.04){alert(_0x150820(0x44d)),SceneManager[_0x150820(0x33f)]();return;}VisuMZ[_0x150820(0x44f)](_0x2df8dd,_0x2df8dd);const _0x70914a=$gameTemp[_0x150820(0x9c5)](),_0x4a1c85=Math[_0x150820(0x959)](0.01,_0x2df8dd[_0x150820(0x3f6)]);$gameTemp[_0x150820(0x70a)](_0x4a1c85,_0x70914a);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x757),_0x151809=>{const _0xcb4b59=_0x2dcaec;if(!Imported[_0xcb4b59(0x277)])return;const _0x2ef014=SceneManager[_0xcb4b59(0x496)][_0xcb4b59(0x2a3)];if(!_0x2ef014)return;if(VisuMZ[_0xcb4b59(0x6f8)]['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ['ConvertParams'](_0x151809,_0x151809);const _0x50e69e=$gameTemp[_0xcb4b59(0x9c5)](),_0x2fa112=_0x151809['ms']||0x1;VisuMZ[_0xcb4b59(0x6f8)]['freezeTime'](_0x2fa112,_0x50e69e);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x7db),_0x54f548=>{const _0x2225ac=_0x2dcaec;if(!Imported[_0x2225ac(0x277)])return;const _0x2dbdcd=SceneManager[_0x2225ac(0x496)][_0x2225ac(0x2a3)];if(!_0x2dbdcd)return;VisuMZ[_0x2225ac(0x44f)](_0x54f548,_0x54f548);const _0x54fc98=_0x54f548['X']||0x0,_0x1f1264=_0x54f548['Y']||0x0,_0x1b65b7=_0x54f548[_0x2225ac(0xb39)]||0x0,_0x5f3ea1=_0x54f548[_0x2225ac(0xa11)]||0x0,_0x231514=_0x54f548[_0x2225ac(0x603)]||0x1,_0x243795=_0x54f548[_0x2225ac(0x9cf)]||'Linear';_0x2dbdcd[_0x2225ac(0x751)](_0x1b65b7,_0x54fc98,_0x1f1264,_0x5f3ea1,_0x231514,_0x243795);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Impact_ZoomBlurTargetCenter',_0x5965bc=>{const _0x3b9669=_0x2dcaec;if(!Imported[_0x3b9669(0x277)])return;const _0x231a48=SceneManager[_0x3b9669(0x496)][_0x3b9669(0x2a3)];if(!_0x231a48)return;VisuMZ[_0x3b9669(0x44f)](_0x5965bc,_0x5965bc);const _0x54673b=VisuMZ[_0x3b9669(0x77f)](_0x5965bc[_0x3b9669(0xad6)]),_0x1a6e22=_0x5965bc[_0x3b9669(0x750)],_0x5a7567=_0x5965bc['OffsetX']||0x0,_0x133a4d=_0x5965bc['OffsetY']||0x0,_0xf529b3=_0x5965bc[_0x3b9669(0xb39)]||0x0,_0x548ce3=_0x5965bc['Radius']||0x0,_0x39c7aa=_0x5965bc[_0x3b9669(0x603)]||0x1,_0x2bb7c1=_0x5965bc['EasingType']||_0x3b9669(0x41d),_0xae4062=Math[_0x3b9669(0xaf1)](..._0x54673b['map'](_0x1aa7e0=>_0x1aa7e0['battler']()[_0x3b9669(0xae9)]-_0x1aa7e0[_0x3b9669(0xbc2)]()[_0x3b9669(0x74d)]()/0x2)),_0x4c5a48=Math[_0x3b9669(0x959)](..._0x54673b[_0x3b9669(0xc20)](_0x15cf8e=>_0x15cf8e[_0x3b9669(0xbc2)]()[_0x3b9669(0xae9)]+_0x15cf8e[_0x3b9669(0xbc2)]()['mainSpriteWidth']()/0x2)),_0x158aeb=Math[_0x3b9669(0xaf1)](..._0x54673b['map'](_0x5fd54c=>_0x5fd54c['battler']()[_0x3b9669(0xa19)]-_0x5fd54c['battler']()[_0x3b9669(0x3c2)]())),_0xb978ff=Math['max'](..._0x54673b['map'](_0x1dbc39=>_0x1dbc39['battler']()['_baseY'])),_0x2942cf=_0x54673b[_0x3b9669(0x5ed)](_0x317500=>_0x317500[_0x3b9669(0x8d6)]())[_0x3b9669(0x7ce)],_0x18673c=_0x54673b[_0x3b9669(0x5ed)](_0xd32477=>_0xd32477[_0x3b9669(0x5d1)]())[_0x3b9669(0x7ce)];let _0x7f8150=0x0,_0x38f31f=0x0;if(_0x1a6e22['match'](/front/i))_0x7f8150=_0x2942cf>=_0x18673c?_0xae4062:_0x4c5a48;else{if(_0x1a6e22[_0x3b9669(0xb9e)](/middle/i))_0x7f8150=(_0xae4062+_0x4c5a48)/0x2,melee=-0x1;else _0x1a6e22[_0x3b9669(0xb9e)](/back/i)&&(_0x7f8150=_0x2942cf>=_0x18673c?_0x4c5a48:_0xae4062);}if(_0x1a6e22[_0x3b9669(0xb9e)](/head/i))_0x38f31f=_0x158aeb;else{if(_0x1a6e22['match'](/center/i))_0x38f31f=(_0x158aeb+_0xb978ff)/0x2;else _0x1a6e22[_0x3b9669(0xb9e)](/base/i)&&(_0x38f31f=_0xb978ff);}_0x7f8150+=(Graphics[_0x3b9669(0x64b)]-Graphics[_0x3b9669(0x555)])/0x2,_0x38f31f+=(Graphics['height']-Graphics[_0x3b9669(0xab4)])/0x2,_0x7f8150+=_0x5a7567,_0x38f31f+=_0x133a4d,_0x231a48[_0x3b9669(0x751)](_0xf529b3,_0x7f8150,_0x38f31f,_0x548ce3,_0x39c7aa,_0x2bb7c1);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x5f7),_0x214887=>{const _0x357711=_0x2dcaec;if(!Imported[_0x357711(0x277)])return;const _0x169ed2=SceneManager[_0x357711(0x496)]['_spriteset'];if(!_0x169ed2)return;if(VisuMZ[_0x357711(0x6f8)][_0x357711(0x620)]<=1.05){alert(_0x357711(0x44d)),SceneManager[_0x357711(0x33f)]();return;}VisuMZ[_0x357711(0x44f)](_0x214887,_0x214887);const _0x512a2e=VisuMZ['CreateActionSequenceTargets'](_0x214887[_0x357711(0xad6)]),_0x74a242={'filename':_0x214887[_0x357711(0x40d)],'horzCells':_0x214887[_0x357711(0xc03)]||0x1,'vertCells':_0x214887['vertCells']||0x1,'frameDelay':_0x214887[_0x357711(0x68f)]||0x1,'smooth':_0x214887[_0x357711(0xb61)]||![],'anchorX':_0x214887[_0x357711(0x647)]||0x0,'anchorY':_0x214887[_0x357711(0x962)]||0x0,'offsetX':_0x214887[_0x357711(0xab5)]||0x0,'offsetY':_0x214887['offsetY']||0x0};for(const _0x5c8319 of _0x512a2e){if(!_0x5c8319)continue;if(!_0x5c8319[_0x357711(0xbc2)]())continue;_0x5c8319['battler']()[_0x357711(0xa9b)](_0x74a242);}const _0x2c2ed8=$gameTemp[_0x357711(0x9c5)]();_0x2c2ed8&&_0x2c2ed8['setWaitMode'](_0x357711(0x397));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa7b),_0x550667=>{const _0x4f31b8=_0x2dcaec;if(!Imported[_0x4f31b8(0x277)])return;const _0x2d0767=SceneManager[_0x4f31b8(0x496)][_0x4f31b8(0x2a3)];if(!_0x2d0767)return;if(VisuMZ[_0x4f31b8(0x6f8)][_0x4f31b8(0x620)]<=1.05){alert(_0x4f31b8(0x44d)),SceneManager[_0x4f31b8(0x33f)]();return;}VisuMZ['ConvertParams'](_0x550667,_0x550667);const _0x1aeea7=VisuMZ[_0x4f31b8(0x77f)](_0x550667[_0x4f31b8(0xad6)]);for(const _0x54a2e0 of _0x1aeea7){if(!_0x54a2e0)continue;if(!_0x54a2e0[_0x4f31b8(0xbc2)]())continue;_0x54a2e0['battler']()[_0x4f31b8(0x8d0)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa2d),_0x17acd3=>{const _0x33c48a=_0x2dcaec;if(!Imported[_0x33c48a(0x277)])return;const _0x1474e6=SceneManager[_0x33c48a(0x496)][_0x33c48a(0x2a3)];if(!_0x1474e6)return;if(VisuMZ[_0x33c48a(0x6f8)]['version']<=1.05){alert(_0x33c48a(0x44d)),SceneManager[_0x33c48a(0x33f)]();return;}VisuMZ[_0x33c48a(0x44f)](_0x17acd3,_0x17acd3);const _0x4e8180=VisuMZ[_0x33c48a(0x77f)](_0x17acd3[_0x33c48a(0xad6)]),_0x491caf=_0x17acd3[_0x33c48a(0xc52)];for(const _0x9f767 of _0x4e8180){if(!_0x9f767)continue;if(!_0x9f767[_0x33c48a(0xbc2)]())continue;_0x9f767[_0x33c48a(0xbc2)]()[_0x33c48a(0xb49)](_0x491caf);}}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x5b1),_0x5ccb27=>{const _0x3eadef=_0x2dcaec;if(!SceneManager[_0x3eadef(0xa2b)]())return;const _0xa11c5d=$gameTemp[_0x3eadef(0x9c5)]();if(!_0xa11c5d)return;_0xa11c5d[_0x3eadef(0x415)]('battleInjectAni');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x72a),_0x41932c=>{const _0x5a39b4=_0x2dcaec;if(!SceneManager[_0x5a39b4(0xa2b)]())return;VisuMZ[_0x5a39b4(0x44f)](_0x41932c,_0x41932c);const _0x2d5144=$gameTemp['getLastPluginCommandInterpreter'](),_0x7da2b8=BattleManager[_0x5a39b4(0x151)],_0x1f2bf3=BattleManager['_subject'],_0x5ad3b2=BattleManager['_logWindow'];if(!_0x2d5144||!_0x7da2b8||!_0x1f2bf3)return;if(!_0x7da2b8[_0x5a39b4(0x719)]())return;const _0x17d1dd=VisuMZ[_0x5a39b4(0x77f)](_0x41932c[_0x5a39b4(0xad6)]);for(const _0x2ea6eb of _0x17d1dd){if(!_0x2ea6eb)continue;_0x5ad3b2[_0x5a39b4(0x190)]('actionEffect',_0x1f2bf3,_0x2ea6eb);}_0x2d5144['setWaitMode'](_0x5a39b4(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x165),_0x3cecaf=>{const _0x55150b=_0x2dcaec;if(!SceneManager[_0x55150b(0xa2b)]())return;if(!Imported[_0x55150b(0x622)])return;$gameTemp[_0x55150b(0xc7d)]=!![];}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x935),_0x3dd2c5=>{const _0x2a27b6=_0x2dcaec;if(!SceneManager[_0x2a27b6(0xa2b)]())return;VisuMZ[_0x2a27b6(0x44f)](_0x3dd2c5,_0x3dd2c5);const _0x453162=[_0x2a27b6(0x547),_0x2a27b6(0x4c5),_0x2a27b6(0x82f),_0x2a27b6(0xa0b),_0x2a27b6(0x34d),_0x2a27b6(0xb20),_0x2a27b6(0xa06),'LUK'],_0x167c68=_0x3dd2c5[_0x2a27b6(0xbf4)],_0x3ec8bd=_0x3dd2c5['Debuffs'],_0x9409f9=_0x3dd2c5[_0x2a27b6(0x37c)],_0x2b0b67=VisuMZ[_0x2a27b6(0x77f)](_0x3dd2c5[_0x2a27b6(0xad6)]);for(const _0x1cff49 of _0x2b0b67){if(!_0x1cff49)continue;for(const _0x38c0e3 of _0x167c68){const _0x3c76d2=_0x453162['indexOf'](_0x38c0e3['toUpperCase']()[_0x2a27b6(0x651)]());_0x3c76d2>=0x0&&_0x3c76d2<=0x7&&_0x1cff49[_0x2a27b6(0x3d2)](_0x3c76d2,_0x9409f9);}for(const _0x66d540 of _0x3ec8bd){const _0x1464bf=_0x453162[_0x2a27b6(0x7bc)](_0x66d540[_0x2a27b6(0xb9f)]()['trim']());_0x1464bf>=0x0&&_0x1464bf<=0x7&&_0x1cff49[_0x2a27b6(0x7a3)](_0x1464bf,_0x9409f9);}}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0xc02),_0xe87ed0=>{const _0x43390d=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x43390d(0x44f)](_0xe87ed0,_0xe87ed0);const _0x4e7afa=_0xe87ed0[_0x43390d(0x403)],_0x6c5ae1=VisuMZ[_0x43390d(0x77f)](_0xe87ed0['Targets']);for(const _0x32b68a of _0x6c5ae1){if(!_0x32b68a)continue;for(const _0x1bd734 of _0x4e7afa){_0x32b68a[_0x43390d(0x846)](_0x1bd734);}}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_ArmorPenetration',_0x38d2f8=>{const _0x31f490=_0x2dcaec;if(!SceneManager[_0x31f490(0xa2b)]())return;VisuMZ[_0x31f490(0x44f)](_0x38d2f8,_0x38d2f8);const _0x5b19d7=BattleManager[_0x31f490(0x151)],_0x5796ab={'arPenRate':_0x38d2f8['ArPenRate'],'arPenFlat':_0x38d2f8[_0x31f490(0x4f8)],'arRedRate':_0x38d2f8[_0x31f490(0x71f)],'arRedFlat':_0x38d2f8[_0x31f490(0x447)]};_0x5b19d7[_0x31f490(0x48a)]=_0x5796ab;}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x9a5),_0x313984=>{const _0x1091bf=_0x2dcaec;if(!SceneManager[_0x1091bf(0xa2b)]())return;if(!Imported['VisuMZ_3_WeaknessDisplay'])return;VisuMZ[_0x1091bf(0x44f)](_0x313984,_0x313984);const _0x4451b3=VisuMZ[_0x1091bf(0x77f)](_0x313984[_0x1091bf(0xad6)]),_0x255908=_0x313984['Reveal']||0x1;for(const _0x16e2ab of _0x4451b3){if(!_0x16e2ab)continue;if(!_0x16e2ab['isEnemy']())continue;_0x16e2ab[_0x1091bf(0x499)](_0x255908);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb65),_0x940aa5=>{const _0x5e5ae9=_0x2dcaec;if(!SceneManager[_0x5e5ae9(0xa2b)]())return;if(!Imported[_0x5e5ae9(0x2a5)])return;if(!BattleManager[_0x5e5ae9(0xa4b)]())return;VisuMZ[_0x5e5ae9(0x44f)](_0x940aa5,_0x940aa5);const _0x67e865=VisuMZ[_0x5e5ae9(0x77f)](_0x940aa5[_0x5e5ae9(0xad6)]),_0x3b465f=_0x940aa5['ChargeRate'],_0x2c8e29=_0x940aa5[_0x5e5ae9(0x728)],_0x217bc7=_0x940aa5[_0x5e5ae9(0xbd5)];for(const _0x48b1fc of _0x67e865){if(!_0x48b1fc)continue;if(_0x48b1fc[_0x5e5ae9(0x9e6)]())_0x48b1fc['changeAtbChargeTime'](_0x3b465f);else{if(_0x48b1fc[_0x5e5ae9(0xb93)]()){_0x48b1fc[_0x5e5ae9(0x93e)](_0x2c8e29);if(_0x217bc7)_0x48b1fc[_0x5e5ae9(0x7f7)]();}}}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_BoostPointsChange',_0x97dc18=>{const _0xeda186=_0x2dcaec;if(!SceneManager[_0xeda186(0xa2b)]())return;if(!Imported['VisuMZ_3_BoostAction'])return;VisuMZ[_0xeda186(0x44f)](_0x97dc18,_0x97dc18);const _0x1e7df0=VisuMZ[_0xeda186(0x77f)](_0x97dc18[_0xeda186(0xad6)]),_0x354f35=_0x97dc18[_0xeda186(0xba1)];for(const _0x4af1c2 of _0x1e7df0){if(!_0x4af1c2)continue;_0x4af1c2[_0xeda186(0x90a)](_0x354f35);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x552),_0x5dfec3=>{const _0x2ce932=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x2ce932(0x173)])return;VisuMZ['ConvertParams'](_0x5dfec3,_0x5dfec3);const _0x11de0b=_0x5dfec3['VariableID'];$gameVariables[_0x2ce932(0xa8a)](_0x11de0b,BattleManager['_subject'][_0x2ce932(0x74a)]());}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x55d),_0x26964a=>{const _0x5564b2=_0x2dcaec;if(!SceneManager[_0x5564b2(0xa2b)]())return;if(!Imported[_0x5564b2(0x59c)])return;VisuMZ[_0x5564b2(0x44f)](_0x26964a,_0x26964a);const _0x3832d3=VisuMZ[_0x5564b2(0x77f)](_0x26964a[_0x5564b2(0xad6)]),_0x2190cb=_0x26964a['BreakShields'];for(const _0x22f566 of _0x3832d3){if(!_0x22f566)continue;if(_0x22f566['isBreakStunned']())continue;if(!_0x22f566['isAffectedByBreakShield']())continue;_0x22f566[_0x5564b2(0x4d9)](_0x2190cb);}}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0xc09),_0xffc21d=>{const _0xf127f8=_0x2dcaec;if(!SceneManager[_0xf127f8(0xa2b)]())return;if(!Imported[_0xf127f8(0x59c)])return;VisuMZ['ConvertParams'](_0xffc21d,_0xffc21d);const _0x4e1bd1=VisuMZ['CreateActionSequenceTargets'](_0xffc21d[_0xf127f8(0xad6)]);for(const _0x2b90d3 of _0x4e1bd1){if(!_0x2b90d3)continue;if(_0x2b90d3['isBreakStunned']())continue;if(!_0x2b90d3[_0xf127f8(0x575)]())continue;_0x2b90d3['resetBreakShield']();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x542),_0x2cba5e=>{const _0x4d9130=_0x2dcaec;if(!SceneManager[_0x4d9130(0xa2b)]())return;if(!Imported[_0x4d9130(0x611)])return;if(!BattleManager[_0x4d9130(0x336)]())return;VisuMZ[_0x4d9130(0x44f)](_0x2cba5e,_0x2cba5e);const _0xd77d4=VisuMZ[_0x4d9130(0x77f)](_0x2cba5e[_0x4d9130(0xad6)]),_0x32de6c=_0x2cba5e[_0x4d9130(0x43a)];for(const _0x5ee870 of _0xd77d4){if(!_0x5ee870)continue;_0x5ee870[_0x4d9130(0xa69)](_0x32de6c);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x25a),_0x5d9fa5=>{const _0x5f2851=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5f2851(0x44f)](_0x5d9fa5,_0x5d9fa5);const _0x47ac2f=$gameTemp[_0x5f2851(0x9c5)](),_0x367405=BattleManager[_0x5f2851(0x151)],_0x34b78f=BattleManager['_subject'];if(!_0x47ac2f||!_0x367405||!_0x34b78f)return;if(!_0x367405[_0x5f2851(0x719)]())return;const _0x22434d=VisuMZ[_0x5f2851(0x77f)](_0x5d9fa5[_0x5f2851(0xad6)]);for(const _0x5389bf of _0x22434d){if(!_0x5389bf)continue;_0x5d9fa5['ForceDeath']&&(_0x5389bf[_0x5f2851(0xb5e)](),_0x5389bf[_0x5f2851(0x846)](_0x5389bf[_0x5f2851(0x636)]())),_0x5389bf['isDeathStateAffected']()&&_0x5389bf[_0x5f2851(0x8b7)]();}_0x47ac2f[_0x5f2851(0x415)]('battleEffect');}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa7a),_0x36b344=>{const _0x30ca8f=_0x2dcaec;if(!SceneManager[_0x30ca8f(0xa2b)]())return;if(!Imported[_0x30ca8f(0xb0e)])return;if(!BattleManager[_0x30ca8f(0x6ec)]())return;VisuMZ[_0x30ca8f(0x44f)](_0x36b344,_0x36b344);const _0x3ffc11=VisuMZ['CreateActionSequenceTargets'](_0x36b344['Targets']),_0x16834e=_0x36b344[_0x30ca8f(0xabd)];for(const _0xd10af8 of _0x3ffc11){if(!_0xd10af8)continue;_0xd10af8[_0x30ca8f(0x9d3)](_0x16834e);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_CtbSpeed',_0x22ced7=>{const _0x235573=_0x2dcaec;if(!SceneManager[_0x235573(0xa2b)]())return;if(!Imported[_0x235573(0xb0e)])return;if(!BattleManager[_0x235573(0x6ec)]())return;VisuMZ[_0x235573(0x44f)](_0x22ced7,_0x22ced7);const _0x24ee40=VisuMZ[_0x235573(0x77f)](_0x22ced7[_0x235573(0xad6)]),_0x54e91d=_0x22ced7['ChargeRate'],_0x4cd0ee=_0x22ced7[_0x235573(0x728)];for(const _0xaeaec5 of _0x24ee40){if(!_0xaeaec5)continue;if(_0xaeaec5[_0x235573(0x36b)]===_0x235573(0x4c6))_0xaeaec5[_0x235573(0x1da)](_0x54e91d);else _0xaeaec5[_0x235573(0x36b)]==='casting'&&_0xaeaec5['changeCtbCastTime'](_0x4cd0ee);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb77),_0x3063b2=>{const _0xeb0d1f=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3063b2,_0x3063b2);const _0x48be56=BattleManager['_action'];if(!_0x48be56)return;let _0x10b8ed=_0x3063b2[_0xeb0d1f(0x89f)];_0x48be56[_0xeb0d1f(0xa90)](_0x10b8ed);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1ce),_0x93d80=>{const _0xbeb31e=_0x2dcaec;if(!SceneManager[_0xbeb31e(0xa2b)]())return;VisuMZ[_0xbeb31e(0x44f)](_0x93d80,_0x93d80);const _0x4a87bc=VisuMZ[_0xbeb31e(0x77f)](_0x93d80[_0xbeb31e(0xad6)]);for(const _0x1db2ab of _0x4a87bc){if(!_0x1db2ab)continue;if(_0x1db2ab[_0xbeb31e(0x870)]())_0x1db2ab[_0xbeb31e(0x3a0)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x948),_0x42bc64=>{const _0x45c40c=_0x2dcaec;if(!SceneManager[_0x45c40c(0xa2b)]())return;VisuMZ['ConvertParams'](_0x42bc64,_0x42bc64);const _0x58cd33=$gameTemp[_0x45c40c(0x9c5)](),_0x181b36=BattleManager[_0x45c40c(0x173)],_0x3b7065=_0x42bc64['JumpToLabel'];if(!_0x58cd33)return;if(!_0x181b36)return;_0x181b36&&_0x181b36[_0x45c40c(0x1f5)]()&&_0x3b7065['toUpperCase']()[_0x45c40c(0x651)]()!=='UNTITLED'&&_0x58cd33['command119']([_0x3b7065]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_EmulateAttackEffect',_0x3978e2=>{const _0x1a8b91=_0x2dcaec;if(!SceneManager[_0x1a8b91(0xa2b)]())return;VisuMZ[_0x1a8b91(0x44f)](_0x3978e2,_0x3978e2);const _0x26720e=$gameTemp[_0x1a8b91(0x9c5)](),_0x23f374=BattleManager['_logWindow'];if(!_0x26720e)return;const _0x198f06=VisuMZ['CreateActionSequenceTargets'](_0x3978e2[_0x1a8b91(0x42e)]),_0x5b2fe6=VisuMZ[_0x1a8b91(0x77f)](_0x3978e2[_0x1a8b91(0xad6)]);for(const _0x3c3fec of _0x198f06){for(const _0x448fd6 of _0x5b2fe6){if(!_0x448fd6)continue;const _0x3b3234=$dataSkills[_0x3c3fec[_0x1a8b91(0x435)]()];_0x23f374['push'](_0x1a8b91(0xb09),_0x3c3fec,_0x448fd6,_0x3b3234);}}_0x26720e['setWaitMode'](_0x1a8b91(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_EmulateGuardEffect',_0x5037a2=>{const _0x2b966e=_0x2dcaec;if(!SceneManager[_0x2b966e(0xa2b)]())return;VisuMZ[_0x2b966e(0x44f)](_0x5037a2,_0x5037a2);const _0x25673b=$gameTemp[_0x2b966e(0x9c5)](),_0xcb24f1=BattleManager[_0x2b966e(0x9a7)];if(!_0x25673b)return;const _0x83643=VisuMZ[_0x2b966e(0x77f)](_0x5037a2['Users']),_0x5ac7cb=VisuMZ[_0x2b966e(0x77f)](_0x5037a2[_0x2b966e(0xad6)]);for(const _0x150285 of _0x83643){for(const _0x1dd7b4 of _0x5ac7cb){if(!_0x1dd7b4)continue;const _0x1bbef3=$dataSkills[_0x150285[_0x2b966e(0xc2c)]()];_0xcb24f1[_0x2b966e(0x190)](_0x2b966e(0xb09),_0x150285,_0x1dd7b4,_0x1bbef3);}}_0x25673b[_0x2b966e(0x415)](_0x2b966e(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x83d),_0x5d5cb7=>{const _0x33912f=_0x2dcaec;if(!SceneManager[_0x33912f(0xa2b)]())return;VisuMZ['ConvertParams'](_0x5d5cb7,_0x5d5cb7);const _0x3ca01d=$gameTemp['getLastPluginCommandInterpreter'](),_0x2bc921=BattleManager[_0x33912f(0x9a7)],_0x5d405d=Number(_0x5d5cb7[_0x33912f(0x3df)]||0x1),_0x1d9331=$dataItems[_0x5d405d];if(!_0x3ca01d)return;if(!_0x1d9331)return;const _0xb863e2=VisuMZ[_0x33912f(0x77f)](_0x5d5cb7['Users']),_0x1cbabc=VisuMZ[_0x33912f(0x77f)](_0x5d5cb7[_0x33912f(0xad6)]);for(const _0x5ed646 of _0xb863e2){for(const _0x12ab65 of _0x1cbabc){if(!_0x12ab65)continue;_0x2bc921[_0x33912f(0x190)](_0x33912f(0xb09),_0x5ed646,_0x12ab65,_0x1d9331);}}_0x3ca01d[_0x33912f(0x415)](_0x33912f(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xbc8),_0x46c395=>{const _0x3d8db6=_0x2dcaec;if(!SceneManager[_0x3d8db6(0xa2b)]())return;VisuMZ['ConvertParams'](_0x46c395,_0x46c395);let _0xc6f035=Number(_0x46c395['SkillID']||0x0);if(_0xc6f035<=0x0){const _0x44fb7c=BattleManager[_0x3d8db6(0x151)];if(_0x44fb7c&&_0x44fb7c[_0x3d8db6(0x37d)]())_0xc6f035=_0x44fb7c[_0x3d8db6(0x719)]()['id'];else return;}const _0x9ebc34=$dataSkills[_0xc6f035];if(!_0x9ebc34)return;const _0x35bec7=VisuMZ['CreateActionSequenceTargets'](_0x46c395[_0x3d8db6(0x42e)]);for(const _0x5f5d7c of _0x35bec7){_0x5f5d7c[_0x3d8db6(0x96e)](_0x9ebc34);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xc18),_0x12e48e=>{const _0x38a242=_0x2dcaec;if(!SceneManager[_0x38a242(0xa2b)]())return;VisuMZ[_0x38a242(0x44f)](_0x12e48e,_0x12e48e);const _0x234348=$gameTemp['getLastPluginCommandInterpreter'](),_0x1b37af=BattleManager[_0x38a242(0x9a7)],_0x2debf8=Number(_0x12e48e[_0x38a242(0xa0a)]||0x1),_0xff9198=$dataSkills[_0x2debf8];if(!_0x234348)return;if(!_0xff9198)return;const _0xbb9a83=VisuMZ[_0x38a242(0x77f)](_0x12e48e[_0x38a242(0x42e)]),_0x69c9d1=VisuMZ[_0x38a242(0x77f)](_0x12e48e['Targets']);for(const _0x76239e of _0xbb9a83){for(const _0x791af3 of _0x69c9d1){if(!_0x791af3)continue;_0x1b37af[_0x38a242(0x190)](_0x38a242(0xb09),_0x76239e,_0x791af3,_0xff9198);}}_0x234348[_0x38a242(0x415)](_0x38a242(0xbd0));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xbe2),_0x183f92=>{const _0x43f7fe=_0x2dcaec;if(!SceneManager[_0x43f7fe(0xa2b)]())return;VisuMZ[_0x43f7fe(0x44f)](_0x183f92,_0x183f92);const _0x2b03ce=VisuMZ[_0x43f7fe(0x77f)](_0x183f92[_0x43f7fe(0xad6)]);for(const _0x15e195 of _0x2b03ce){if(!_0x15e195)continue;if(!_0x15e195[_0x43f7fe(0x5d1)]())continue;_0x15e195[_0x43f7fe(0x5b0)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x6c9),_0x29e5d4=>{const _0x39f912=_0x2dcaec;if(!SceneManager[_0x39f912(0xa2b)]())return;if(!Imported[_0x39f912(0x5a7)])return;if(!BattleManager[_0x39f912(0x356)]())return;VisuMZ[_0x39f912(0x44f)](_0x29e5d4,_0x29e5d4);const _0x2064f4=_0x29e5d4['ActionCount'];BattleManager[_0x39f912(0x173)]&&BattleManager[_0x39f912(0x173)]['friendsUnit']()[_0x39f912(0x2ec)](_0x2064f4);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x7c5),_0xcb642b=>{const _0x14279c=_0x2dcaec;if(!SceneManager[_0x14279c(0xa2b)]())return;if(!Imported[_0x14279c(0x2fe)])return;if(!BattleManager[_0x14279c(0x80c)]())return;VisuMZ['ConvertParams'](_0xcb642b,_0xcb642b);const _0x5a09d9=_0xcb642b[_0x14279c(0xb9d)];BattleManager['_subject']&&BattleManager[_0x14279c(0x173)][_0x14279c(0x630)]()[_0x14279c(0x5ee)](_0x5a09d9);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x80d),_0x102fac=>{const _0x3f59ad=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3f59ad(0x44f)](_0x102fac,_0x102fac);const _0x2d9754=VisuMZ[_0x3f59ad(0x77f)](_0x102fac['Targets']),_0x3d3d2b=_0x102fac[_0x3f59ad(0x9f7)],_0x118f53=_0x102fac[_0x3f59ad(0x872)],_0x2eb675=_0x102fac['MP_Rate'],_0x3270c3=_0x102fac[_0x3f59ad(0x6c4)],_0x500aef=_0x102fac[_0x3f59ad(0x6cf)],_0x54c5c6=_0x102fac['TP_Flat'],_0x19f4e8=_0x102fac[_0x3f59ad(0x8bb)];for(const _0x3f49e6 of _0x2d9754){if(!_0x3f49e6)continue;const _0x5377d5=_0x3f49e6[_0x3f59ad(0x2b5)](),_0x598ce5=Math[_0x3f59ad(0x976)](_0x3d3d2b*_0x3f49e6['mhp']+_0x118f53),_0x297fd3=Math[_0x3f59ad(0x976)](_0x2eb675*_0x3f49e6['mmp']+_0x3270c3),_0xab6e66=Math[_0x3f59ad(0x976)](_0x500aef*_0x3f49e6[_0x3f59ad(0x7e5)]()+_0x54c5c6);if(_0x598ce5!==0x0)_0x3f49e6[_0x3f59ad(0xc73)](_0x598ce5);if(_0x297fd3!==0x0)_0x3f49e6[_0x3f59ad(0x77c)](_0x297fd3);if(_0xab6e66!==0x0)_0x3f49e6['gainTp'](_0xab6e66);if(_0x19f4e8)_0x3f49e6[_0x3f59ad(0x3a0)]();_0x5377d5&&_0x3f49e6[_0x3f59ad(0x1f5)]()&&_0x3f49e6[_0x3f59ad(0x8b7)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_Immortal',_0x29316e=>{const _0x44646c=_0x2dcaec;if(!SceneManager[_0x44646c(0xa2b)]())return;VisuMZ[_0x44646c(0x44f)](_0x29316e,_0x29316e);const _0x4c04c9=VisuMZ['CreateActionSequenceTargets'](_0x29316e[_0x44646c(0xad6)]);for(const _0x1ad77c of _0x4c04c9){if(!_0x1ad77c)continue;_0x1ad77c[_0x44646c(0x44c)](_0x29316e[_0x44646c(0x17b)]);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x71d),_0x11e277=>{const _0x536027=_0x2dcaec;if(!SceneManager[_0x536027(0xa2b)]())return;VisuMZ[_0x536027(0x44f)](_0x11e277,_0x11e277);const _0x472278=BattleManager[_0x536027(0x151)],_0x36d4d1={'criticalHitRate':_0x11e277['CriticalHitRate'],'criticalHitFlat':_0x11e277['CriticalHitFlat'],'criticalDmgRate':_0x11e277[_0x536027(0x6d6)],'criticalDmgFlat':_0x11e277[_0x536027(0x8ef)],'damageRate':_0x11e277['DamageRate'],'damageFlat':_0x11e277['DamageFlat'],'hitRate':_0x11e277[_0x536027(0x692)],'hitFlat':_0x11e277[_0x536027(0x633)]};_0x472278[_0x536027(0x865)]=_0x36d4d1;}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x813),_0x420a7d=>{const _0x4c8a9d=_0x2dcaec;if(!SceneManager[_0x4c8a9d(0xa2b)]())return;VisuMZ[_0x4c8a9d(0x44f)](_0x420a7d,_0x420a7d);const _0x239f99=_0x420a7d[_0x4c8a9d(0x7a6)];SceneManager[_0x4c8a9d(0x496)]['playOnceParallelInterpreter'](_0x239f99);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x455),_0x32669e=>{const _0x33318a=_0x2dcaec;if(!SceneManager[_0x33318a(0xa2b)]())return;if(!Imported['VisuMZ_2_BattleSystemOTB'])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x33318a(0x44f)](_0x32669e,_0x32669e);const _0x158ec0=VisuMZ['CreateActionSequenceTargets'](_0x32669e[_0x33318a(0xad6)]);for(const _0x36ff15 of _0x158ec0){if(!_0x36ff15)continue;let _0x25bc9e=_0x32669e[_0x33318a(0x62f)],_0x10b47f=_0x32669e[_0x33318a(0xadf)],_0x57cf2d=_0x32669e['FollowTurn'];BattleManager[_0x33318a(0x43e)][_0x33318a(0x7f2)](_0x36ff15)?_0x25bc9e+=_0x57cf2d:_0x10b47f+=_0x57cf2d,BattleManager['turnOrderChangeOTB'](_0x36ff15,-_0x25bc9e,![]),BattleManager[_0x33318a(0x63b)](_0x36ff15,-_0x10b47f,!![]);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x774),_0x4860eb=>{const _0x17c6f=_0x2dcaec;if(!SceneManager[_0x17c6f(0xa2b)]())return;if(!Imported['VisuMZ_2_BattleSystemPTB'])return;if(!BattleManager[_0x17c6f(0x776)]())return;VisuMZ[_0x17c6f(0x44f)](_0x4860eb,_0x4860eb);const _0x461750=BattleManager['_subject'][_0x17c6f(0x630)](),_0x37f8ec=_0x4860eb[_0x17c6f(0xb79)],_0x5f4fb6=_0x4860eb[_0x17c6f(0x737)]||_0x17c6f(0x362),_0x347108=_0x4860eb[_0x17c6f(0xa39)]||_0x17c6f(0x362),_0x1e907f=_0x4860eb[_0x17c6f(0x355)]||0x0,_0x27c678=_0x4860eb[_0x17c6f(0xc68)]||0x0;(_0x461750[_0x17c6f(0x1eb)]()||_0x37f8ec)&&(_0x37f8ec&&(_0x461750[_0x17c6f(0x6e1)]=_0x461750[_0x17c6f(0x6e1)]||{},_0x461750['_ptbActionCost'][_0x17c6f(0x50d)]=0x0),_0x461750[_0x17c6f(0x405)](_0x5f4fb6,_0x347108,_0x1e907f,_0x27c678));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x157),_0x57b569=>{const _0x23ae0d=_0x2dcaec;if(!SceneManager[_0x23ae0d(0xa2b)]())return;if(!Imported[_0x23ae0d(0x358)])return;if(!BattleManager['isPTB']())return;VisuMZ[_0x23ae0d(0x44f)](_0x57b569,_0x57b569);const _0x4432be=BattleManager[_0x23ae0d(0x173)][_0x23ae0d(0x630)]();let _0x109668=Math['max'](_0x57b569[_0x23ae0d(0x472)],0x0),_0x4e5d36=_0x4432be['getFullActionsPTB'](),_0x49daef=_0x4432be['getHalfActionsPTB']();while(_0x109668--){if(_0x4e5d36<=0x0&&_0x49daef<=0x0)break;else _0x4e5d36>0x0?(_0x4e5d36--,_0x49daef++):_0x49daef--;}_0x4432be[_0x23ae0d(0xa93)](_0x4e5d36),_0x4432be['setHalfActionsPTB'](_0x49daef);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1de),_0xcb3b54=>{const _0x58fbe1=_0x2dcaec;if(!SceneManager[_0x58fbe1(0xa2b)]())return;if(!Imported[_0x58fbe1(0x358)])return;if(!BattleManager[_0x58fbe1(0x776)]())return;VisuMZ[_0x58fbe1(0x44f)](_0xcb3b54,_0xcb3b54);const _0x295ab7=BattleManager[_0x58fbe1(0x173)][_0x58fbe1(0x630)]();let _0x302596=_0xcb3b54[_0x58fbe1(0x9ed)],_0x52d2d3=_0xcb3b54[_0x58fbe1(0x344)];_0x295ab7['gainFullActionsPTB'](_0x302596),_0x295ab7['gainHalfActionsPTB'](_0x52d2d3);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xc28),_0x44a18c=>{const _0x56943d=_0x2dcaec;if(!SceneManager[_0x56943d(0xa2b)]())return;VisuMZ['ConvertParams'](_0x44a18c,_0x44a18c);const _0x187afb=[_0x56943d(0x547),_0x56943d(0x4c5),_0x56943d(0x82f),'DEF','MAT','MDF',_0x56943d(0xa06),'LUK'],_0x56d251=_0x44a18c['Buffs'],_0x1974c7=_0x44a18c[_0x56943d(0x484)],_0x1c2b1d=VisuMZ['CreateActionSequenceTargets'](_0x44a18c[_0x56943d(0xad6)]);for(const _0x544c5a of _0x1c2b1d){if(!_0x544c5a)continue;for(const _0x3a82f6 of _0x56d251){const _0x572e23=_0x187afb[_0x56943d(0x7bc)](_0x3a82f6[_0x56943d(0xb9f)]()[_0x56943d(0x651)]());_0x572e23>=0x0&&_0x572e23<=0x7&&_0x544c5a['isBuffAffected'](_0x572e23)&&_0x544c5a[_0x56943d(0x968)](_0x572e23);}for(const _0x1c6aaf of _0x1974c7){const _0x12bd1d=_0x187afb[_0x56943d(0x7bc)](_0x1c6aaf['toUpperCase']()[_0x56943d(0x651)]());_0x12bd1d>=0x0&&_0x12bd1d<=0x7&&_0x544c5a[_0x56943d(0x91a)](_0x12bd1d)&&_0x544c5a[_0x56943d(0x968)](_0x12bd1d);}}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x84e),_0x29cbba=>{const _0x58bf89=_0x2dcaec;if(!SceneManager[_0x58bf89(0xa2b)]())return;VisuMZ[_0x58bf89(0x44f)](_0x29cbba,_0x29cbba);const _0x40a7c8=_0x29cbba[_0x58bf89(0x403)],_0x3ddc07=VisuMZ['CreateActionSequenceTargets'](_0x29cbba[_0x58bf89(0xad6)]);for(const _0x2554e0 of _0x3ddc07){if(!_0x2554e0)continue;for(const _0x584bd0 of _0x40a7c8){_0x2554e0[_0x58bf89(0x338)](_0x584bd0);}}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_StateTurnsChangeBy',_0x5c1b77=>{const _0x1b66e0=_0x2dcaec;if(!SceneManager[_0x1b66e0(0xa2b)]())return;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;VisuMZ[_0x1b66e0(0x44f)](_0x5c1b77,_0x5c1b77);const _0x374be6=VisuMZ['CreateActionSequenceTargets'](_0x5c1b77[_0x1b66e0(0xad6)]),_0x22c309=Number(_0x5c1b77[_0x1b66e0(0xb94)]),_0x1979a2=Number(_0x5c1b77[_0x1b66e0(0x37c)]),_0x206f14=_0x5c1b77[_0x1b66e0(0x985)];for(const _0x3eacb7 of _0x374be6){if(!_0x3eacb7)continue;_0x206f14&&!_0x3eacb7['isStateAffected'](_0x22c309)?(_0x3eacb7[_0x1b66e0(0x846)](_0x22c309),_0x3eacb7['setStateTurns'](_0x22c309,_0x1979a2)):_0x3eacb7[_0x1b66e0(0xaa9)](_0x22c309,_0x1979a2);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x6a5),_0x529ff7=>{const _0x300108=_0x2dcaec;if(!SceneManager[_0x300108(0xa2b)]())return;if(!Imported[_0x300108(0xb3c)])return;VisuMZ['ConvertParams'](_0x529ff7,_0x529ff7);const _0xcb59e3=VisuMZ[_0x300108(0x77f)](_0x529ff7[_0x300108(0xad6)]),_0x3b28ec=Number(_0x529ff7[_0x300108(0xb94)]),_0x30cb7b=Math[_0x300108(0x959)](Number(_0x529ff7[_0x300108(0x37c)]),0x0),_0x3be4c2=_0x529ff7[_0x300108(0x985)];for(const _0x135fc6 of _0xcb59e3){if(!_0x135fc6)continue;_0x3be4c2&&!_0x135fc6[_0x300108(0x485)](_0x3b28ec)&&_0x135fc6[_0x300108(0x846)](_0x3b28ec),_0x135fc6[_0x300108(0xb8f)](_0x3b28ec,_0x30cb7b);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x8de),_0x4f4a6b=>{const _0x133e2e=_0x2dcaec;if(!SceneManager[_0x133e2e(0xa2b)]())return;if(!Imported[_0x133e2e(0xb16)])return;if(!BattleManager[_0x133e2e(0x502)]())return;VisuMZ[_0x133e2e(0x44f)](_0x4f4a6b,_0x4f4a6b);const _0x275c78=_0x4f4a6b[_0x133e2e(0x85b)],_0x576623=VisuMZ['CreateActionSequenceTargets'](_0x4f4a6b[_0x133e2e(0xad6)]),_0x4d6af8=_0x4f4a6b['ForceExploited'],_0x5854dd=_0x4f4a6b[_0x133e2e(0x9a4)],_0x56cbee=_0x4f4a6b[_0x133e2e(0xc60)],_0x25cea5=BattleManager[_0x133e2e(0x151)];if(_0x275c78)for(const _0x26be74 of _0x576623){if(!_0x26be74)continue;if(_0x26be74===BattleManager[_0x133e2e(0x173)])continue;if(_0x4d6af8)_0x26be74['setSTBExploited'](![]);_0x26be74[_0x133e2e(0x8d5)](BattleManager[_0x133e2e(0x173)],_0x25cea5);}if(_0x5854dd&&BattleManager[_0x133e2e(0x173)]){if(_0x56cbee)BattleManager[_0x133e2e(0x173)][_0x133e2e(0x834)](![]);const _0xe67468=_0x576623[0x0];BattleManager[_0x133e2e(0x173)][_0x133e2e(0x788)](_0xe67468,_0x25cea5);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x900),_0x1c96b0=>{const _0x52876a=_0x2dcaec;if(!SceneManager[_0x52876a(0xa2b)]())return;if(!Imported[_0x52876a(0xb16)])return;if(!BattleManager[_0x52876a(0x502)]())return;VisuMZ[_0x52876a(0x44f)](_0x1c96b0,_0x1c96b0);const _0x2c2a94=_0x1c96b0[_0x52876a(0x6ea)];BattleManager[_0x52876a(0x173)]&&BattleManager[_0x52876a(0x173)][_0x52876a(0x567)](_0x2c2a94);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x787),_0x1848ff=>{const _0x202bcc=_0x2dcaec;if(!SceneManager[_0x202bcc(0xa2b)]())return;if(!Imported[_0x202bcc(0xb16)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x202bcc(0x44f)](_0x1848ff,_0x1848ff);let _0x57a6d0=_0x1848ff[_0x202bcc(0x6ea)];if(BattleManager[_0x202bcc(0x173)]){BattleManager[_0x202bcc(0x173)][_0x202bcc(0xaa2)]=BattleManager[_0x202bcc(0x173)][_0x202bcc(0xaa2)]||[];while(_0x57a6d0--){if(BattleManager[_0x202bcc(0x173)][_0x202bcc(0xaa2)][_0x202bcc(0x7ce)]<=0x0)break;BattleManager[_0x202bcc(0x173)][_0x202bcc(0xaa2)][_0x202bcc(0xa0f)]();}}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xbe5),_0x5675a1=>{const _0x2e0809=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2e0809(0x5a1)])return;VisuMZ[_0x2e0809(0x44f)](_0x5675a1,_0x5675a1);const _0x4fcc7c=VisuMZ[_0x2e0809(0x77f)](_0x5675a1[_0x2e0809(0xad6)]),_0x3de2ce=_0x5675a1[_0x2e0809(0xc3e)];for(const _0x4810cd of _0x4fcc7c){if(!_0x4810cd)continue;if(!_0x4810cd[_0x2e0809(0x8d6)]())continue;_0x4810cd[_0x2e0809(0xa44)](_0x3de2ce);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Mechanics_TextPopup',_0x50bcff=>{const _0x44e8e8=_0x2dcaec;if(!SceneManager[_0x44e8e8(0xa2b)]())return;VisuMZ[_0x44e8e8(0x44f)](_0x50bcff,_0x50bcff);const _0x168890=VisuMZ[_0x44e8e8(0x77f)](_0x50bcff['Targets']),_0x1e7fe6=_0x50bcff['Text'],_0x35be73={'textColor':ColorManager[_0x44e8e8(0x49e)](_0x50bcff[_0x44e8e8(0x5b4)]),'flashColor':_0x50bcff['FlashColor'],'flashDuration':_0x50bcff[_0x44e8e8(0x723)]};for(const _0x26d352 of _0x168890){if(!_0x26d352)continue;_0x26d352[_0x44e8e8(0x495)](_0x1e7fe6,_0x35be73);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xaff),_0x54b007=>{const _0x4cc2b3=_0x2dcaec;if(!SceneManager[_0x4cc2b3(0xa2b)]())return;VisuMZ['ConvertParams'](_0x54b007,_0x54b007);const _0x5d824d=VisuMZ[_0x4cc2b3(0x77f)](_0x54b007['Targets']);let _0x2178db=$gameVariables[_0x4cc2b3(0x2df)](_0x54b007[_0x4cc2b3(0x20e)]);Imported[_0x4cc2b3(0x6d3)]&&_0x54b007['DigitGrouping']&&(_0x2178db=VisuMZ[_0x4cc2b3(0x86f)](_0x2178db));const _0x2c38e6=String(_0x2178db),_0x19bcbe={'textColor':ColorManager[_0x4cc2b3(0x49e)](_0x54b007[_0x4cc2b3(0x5b4)]),'flashColor':_0x54b007['FlashColor'],'flashDuration':_0x54b007['FlashDuration']};for(const _0x1b012c of _0x5d824d){if(!_0x1b012c)continue;_0x1b012c['setupTextPopup'](_0x2c38e6,_0x19bcbe);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x348),_0x3a42af=>{const _0x1f8f01=_0x2dcaec;if(!SceneManager[_0x1f8f01(0xa2b)]())return;const _0x41f8b4=$gameTemp[_0x1f8f01(0x9c5)]();if(!_0x41f8b4)return;_0x41f8b4[_0x1f8f01(0x415)](_0x1f8f01(0x2c1));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x22f),_0x1c1534=>{const _0xa092c9=_0x2dcaec;if(!SceneManager[_0xa092c9(0xa2b)]())return;VisuMZ[_0xa092c9(0x44f)](_0x1c1534,_0x1c1534);const _0x1956a9=VisuMZ[_0xa092c9(0x77f)](_0x1c1534[_0xa092c9(0xad6)]);for(const _0x400d95 of _0x1956a9){if(!_0x400d95)continue;_0x400d95[_0xa092c9(0x20d)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xae1),_0xf98ded=>{const _0x3c3f10=_0x2dcaec;if(!SceneManager[_0x3c3f10(0xa2b)]())return;VisuMZ['ConvertParams'](_0xf98ded,_0xf98ded);const _0x4b1627=VisuMZ[_0x3c3f10(0x77f)](_0xf98ded[_0x3c3f10(0xad6)]),_0x550309=_0xf98ded[_0x3c3f10(0x212)]['toLowerCase']()['trim']();let _0x11eb9b=_0xf98ded[_0x3c3f10(0x406)];const _0x2b6501=_0xf98ded[_0x3c3f10(0x1ab)];![_0x3c3f10(0x75a),'thrust','swing',_0x3c3f10(0x17a)][_0x3c3f10(0x7f2)](_0x550309)&&(_0x11eb9b=![]);for(const _0xee11f0 of _0x4b1627){if(!_0xee11f0)continue;_0xee11f0[_0x3c3f10(0xafd)](_0x550309,_0x11eb9b,_0x2b6501);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Motion_MotionType',_0x965648=>{const _0x4c8ff8=_0x2dcaec;if(!SceneManager[_0x4c8ff8(0xa2b)]())return;VisuMZ['ConvertParams'](_0x965648,_0x965648);const _0x5e10ae=VisuMZ[_0x4c8ff8(0x77f)](_0x965648['Targets']),_0x265d5e=_0x965648[_0x4c8ff8(0x212)]['toLowerCase']()['trim'](),_0xab2071=_0x965648[_0x4c8ff8(0x406)];for(const _0x438d61 of _0x5e10ae){if(!_0x438d61)continue;_0x438d61['_showWeapon']=_0xab2071;if(_0x265d5e['match'](/ATTACK[ ](\d+)/i))_0x438d61[_0x4c8ff8(0x731)](Number(RegExp['$1']));else _0x265d5e===_0x4c8ff8(0x75a)?_0x438d61[_0x4c8ff8(0xa83)]():_0x438d61[_0x4c8ff8(0x4a5)](_0x265d5e);if(!_0xab2071)_0x438d61['startWeaponAnimation'](0x0);else{if(_0xab2071&&['thrust',_0x4c8ff8(0x5ea),_0x4c8ff8(0x369)][_0x4c8ff8(0x7f2)](_0x265d5e)){}}_0x438d61[_0x4c8ff8(0x560)]=undefined;}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x276),_0x4f3c68=>{const _0x3e3e28=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x3e3e28(0x44f)](_0x4f3c68,_0x4f3c68);const _0x48858f=BattleManager[_0x3e3e28(0x151)];if(!_0x48858f)return;if(!_0x48858f['item']())return;const _0x3b0011=VisuMZ['CreateActionSequenceTargets'](_0x4f3c68[_0x3e3e28(0xad6)]);for(const _0x1aff7c of _0x3b0011){if(!_0x1aff7c)continue;_0x1aff7c[_0x3e3e28(0x79c)](_0x48858f);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x764),_0x696e49=>{const _0xa48eab=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0xa48eab(0x44f)](_0x696e49,_0x696e49);const _0x2d401d=VisuMZ[_0xa48eab(0x77f)](_0x696e49[_0xa48eab(0xad6)]);for(const _0x24515d of _0x2d401d){if(!_0x24515d)continue;if(!_0x24515d['battler']())continue;_0x24515d[_0xa48eab(0xbc2)]()[_0xa48eab(0x5a4)]();}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb31),_0x5d6f1d=>{const _0x26a020=_0x2dcaec;if(!SceneManager[_0x26a020(0xa2b)]())return;VisuMZ[_0x26a020(0x44f)](_0x5d6f1d,_0x5d6f1d);const _0x362705=$gameTemp[_0x26a020(0x9c5)](),_0x4903f9=_0x5d6f1d[_0x26a020(0xc77)]*Sprite_Battler[_0x26a020(0x526)];_0x362705[_0x26a020(0x275)](_0x4903f9);}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x60a),_0x51b8f5=>{const _0x539188=_0x2dcaec;if(!SceneManager[_0x539188(0xa2b)]())return;VisuMZ[_0x539188(0x44f)](_0x51b8f5,_0x51b8f5);const _0xfb2975=$gameTemp['getLastPluginCommandInterpreter'](),_0x3055d0=BattleManager[_0x539188(0x151)];if(!_0xfb2975||!_0x3055d0)return;if(!_0x3055d0['item']())return;const _0x11114f=VisuMZ['CreateActionSequenceTargets'](_0x51b8f5[_0x539188(0xad6)]);for(const _0x5d6219 of _0x11114f){if(!_0x5d6219)continue;_0x5d6219[_0x539188(0x9fe)](_0x3055d0);}if(_0x51b8f5[_0x539188(0x372)])_0xfb2975[_0x539188(0x415)](_0x539188(0x1ee));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x71c),_0x1da674=>{const _0x581995=_0x2dcaec;if(!SceneManager[_0x581995(0xa2b)]())return;if(!$gameSystem[_0x581995(0x334)]())return;VisuMZ['ConvertParams'](_0x1da674,_0x1da674);const _0x69d532=$gameTemp[_0x581995(0x9c5)](),_0x38ca07=VisuMZ[_0x581995(0x77f)](_0x1da674[_0x581995(0xad6)]),_0x58d835=_0x1da674[_0x581995(0x4d8)],_0x2d25dc=_0x1da674[_0x581995(0x6ab)],_0x337019=_0x1da674[_0x581995(0xc66)],_0x545e38=_0x1da674[_0x581995(0x603)],_0x5cff79=_0x1da674['FaceDirection'],_0x3d4dd1=_0x1da674[_0x581995(0x9cf)],_0x2b80e4=_0x1da674[_0x581995(0x212)],_0x102f9c=_0x1da674[_0x581995(0x372)];if(!_0x69d532)return;for(const _0x2325cd of _0x38ca07){if(!_0x2325cd)continue;let _0x36893f=_0x2d25dc,_0x4972e6=_0x337019;if(_0x58d835[_0x581995(0xb9e)](/horz/i))_0x36893f*=_0x2325cd[_0x581995(0x8d6)]()?-0x1:0x1;if(_0x58d835['match'](/vert/i))_0x4972e6*=_0x2325cd[_0x581995(0x8d6)]()?-0x1:0x1;_0x2325cd[_0x581995(0x821)](_0x36893f,_0x4972e6,_0x545e38,_0x5cff79,_0x3d4dd1),_0x2325cd[_0x581995(0x4a5)](_0x2b80e4);}if(_0x102f9c)_0x69d532[_0x581995(0x415)](_0x581995(0x1ee));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Movement_HomeMoveToJsPoint',_0x473a3b=>{const _0x2a5794=_0x2dcaec;if(!SceneManager[_0x2a5794(0xa2b)]())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x2a5794(0x44f)](_0x473a3b,_0x473a3b);const _0x464944=$gameTemp[_0x2a5794(0x9c5)](),_0x26d899=VisuMZ['CreateActionSequenceTargets'](_0x473a3b[_0x2a5794(0xad6)]),_0x2e4605=_0x473a3b[_0x2a5794(0x25f)],_0x1db2fa=_0x473a3b['OffsetX'],_0x5ebf14=_0x473a3b[_0x2a5794(0x53d)],_0x538bcc=_0x473a3b[_0x2a5794(0x603)],_0x556698=_0x473a3b[_0x2a5794(0x375)],_0x167df4=_0x473a3b[_0x2a5794(0x9cf)],_0x8a27cf=_0x473a3b['MotionType'],_0x49f11a=_0x473a3b[_0x2a5794(0x372)];if(!_0x464944)return;for(const _0x18fa40 of _0x26d899){if(!_0x18fa40)continue;const _0x57624b=_0x473a3b[_0x2a5794(0x8ce)](_0x18fa40)||{'x':0x0,'y':0x0};let _0x3ed4b9=_0x57624b['x'],_0x2d3645=_0x57624b['y'];if(_0x2e4605[_0x2a5794(0xb9e)](/none/i))_0x3ed4b9+=_0x1db2fa,_0x2d3645+=_0x5ebf14;else{if(_0x2e4605['match'](/horz/i)&&_0x2e4605[_0x2a5794(0xb9e)](/vert/i))_0x3ed4b9+=_0x18fa40[_0x2a5794(0x8d6)]()?-_0x1db2fa:_0x1db2fa,_0x2d3645+=_0x18fa40[_0x2a5794(0x8d6)]()?-_0x5ebf14:_0x5ebf14;else{if(_0x2e4605[_0x2a5794(0xb9e)](/horz/i))_0x3ed4b9+=_0x18fa40[_0x2a5794(0x8d6)]()?-_0x1db2fa:_0x1db2fa,_0x2d3645+=_0x5ebf14;else _0x2e4605[_0x2a5794(0xb9e)](/vert/i)&&(_0x3ed4b9+=_0x1db2fa,_0x2d3645+=_0x18fa40[_0x2a5794(0x8d6)]()?-_0x5ebf14:_0x5ebf14);}}_0x18fa40[_0x2a5794(0x7dd)](_0x3ed4b9,_0x2d3645,_0x538bcc,_0x556698,_0x167df4,-0x1),_0x18fa40['requestMotion'](_0x8a27cf);}if(_0x49f11a)_0x464944[_0x2a5794(0x415)](_0x2a5794(0x1ee));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x669),_0x4cb2f0=>{const _0x42ce50=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x42ce50(0x334)]())return;VisuMZ[_0x42ce50(0x44f)](_0x4cb2f0,_0x4cb2f0);const _0x39b742=$gameTemp[_0x42ce50(0x9c5)](),_0x1c64cb=VisuMZ[_0x42ce50(0x77f)](_0x4cb2f0[_0x42ce50(0xad6)]),_0x1f50c0=_0x4cb2f0[_0x42ce50(0x3a1)],_0x453cea=_0x4cb2f0[_0x42ce50(0x25f)],_0x1476c2=_0x4cb2f0['OffsetX'],_0x12cee8=_0x4cb2f0[_0x42ce50(0x53d)],_0x42c27e=_0x4cb2f0[_0x42ce50(0x603)],_0x2979fd=_0x4cb2f0[_0x42ce50(0x375)],_0x20a024=_0x4cb2f0[_0x42ce50(0x9cf)],_0x9aeac6=_0x4cb2f0[_0x42ce50(0x212)],_0x59fe96=_0x4cb2f0[_0x42ce50(0x372)];if(!_0x39b742)return;for(const _0x5eab7b of _0x1c64cb){if(!_0x5eab7b)continue;let _0x2af205=_0x5eab7b[_0x42ce50(0xbc2)]()[_0x42ce50(0xae9)],_0x152cc9=_0x5eab7b[_0x42ce50(0xbc2)]()[_0x42ce50(0xa19)];if(_0x1f50c0['match'](/home/i))_0x2af205=_0x5eab7b[_0x42ce50(0xbc2)]()[_0x42ce50(0x5a6)],_0x152cc9=_0x5eab7b[_0x42ce50(0xbc2)]()['_homeY'];else{if(_0x1f50c0[_0x42ce50(0xb9e)](/center/i))_0x2af205=Graphics[_0x42ce50(0x555)]/0x2,_0x152cc9=Graphics[_0x42ce50(0xab4)]/0x2;else _0x1f50c0[_0x42ce50(0xb9e)](/point (\d+), (\d+)/i)&&(_0x2af205=Number(RegExp['$1']),_0x152cc9=Number(RegExp['$2']));}if(_0x453cea['match'](/none/i))_0x2af205+=_0x1476c2,_0x152cc9+=_0x12cee8;else{if(_0x453cea[_0x42ce50(0xb9e)](/horz/i)&&_0x453cea[_0x42ce50(0xb9e)](/vert/i))_0x2af205+=_0x5eab7b[_0x42ce50(0x8d6)]()?-_0x1476c2:_0x1476c2,_0x152cc9+=_0x5eab7b[_0x42ce50(0x8d6)]()?-_0x12cee8:_0x12cee8;else{if(_0x453cea['match'](/horz/i))_0x2af205+=_0x5eab7b[_0x42ce50(0x8d6)]()?-_0x1476c2:_0x1476c2,_0x152cc9+=_0x12cee8;else _0x453cea['match'](/vert/i)&&(_0x2af205+=_0x1476c2,_0x152cc9+=_0x5eab7b['isActor']()?-_0x12cee8:_0x12cee8);}}_0x5eab7b[_0x42ce50(0x7dd)](_0x2af205,_0x152cc9,_0x42c27e,_0x2979fd,_0x20a024,-0x1),_0x5eab7b[_0x42ce50(0x4a5)](_0x9aeac6);}if(_0x59fe96)_0x39b742[_0x42ce50(0x415)](_0x42ce50(0x1ee));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x87b),_0x23fba0=>{const _0x4ec7c3=_0x2dcaec;if(!SceneManager[_0x4ec7c3(0xa2b)]())return;if(!$gameSystem[_0x4ec7c3(0x334)]())return;VisuMZ[_0x4ec7c3(0x44f)](_0x23fba0,_0x23fba0);const _0x2edb10=$gameTemp[_0x4ec7c3(0x9c5)](),_0x34ae76=VisuMZ[_0x4ec7c3(0x77f)](_0x23fba0[_0x4ec7c3(0x81b)]),_0x38dc18=VisuMZ[_0x4ec7c3(0x77f)](_0x23fba0['Targets2']),_0x17c6cb=_0x23fba0[_0x4ec7c3(0x750)];let _0x556f9b=_0x23fba0[_0x4ec7c3(0x859)];const _0x534304=_0x23fba0[_0x4ec7c3(0x25f)],_0x5db2f8=_0x23fba0[_0x4ec7c3(0x842)],_0x1a8bea=_0x23fba0['OffsetY'],_0x37ca9b=_0x23fba0[_0x4ec7c3(0x603)],_0x721466=_0x23fba0[_0x4ec7c3(0x375)],_0x385379=_0x23fba0[_0x4ec7c3(0x9cf)],_0x2ec792=_0x23fba0[_0x4ec7c3(0x212)],_0x433bcd=_0x23fba0[_0x4ec7c3(0x372)],_0x1a5e0d=Math[_0x4ec7c3(0xaf1)](..._0x38dc18[_0x4ec7c3(0xc20)](_0x35f47e=>_0x35f47e[_0x4ec7c3(0xbc2)]()['_baseX']-_0x35f47e[_0x4ec7c3(0xbc2)]()[_0x4ec7c3(0x74d)]()/0x2)),_0x109887=Math['max'](..._0x38dc18['map'](_0x4e03e2=>_0x4e03e2[_0x4ec7c3(0xbc2)]()[_0x4ec7c3(0xae9)]+_0x4e03e2[_0x4ec7c3(0xbc2)]()['mainSpriteWidth']()/0x2)),_0x17d6f1=Math[_0x4ec7c3(0xaf1)](..._0x38dc18['map'](_0x1baac4=>_0x1baac4[_0x4ec7c3(0xbc2)]()[_0x4ec7c3(0xa19)]-_0x1baac4[_0x4ec7c3(0xbc2)]()[_0x4ec7c3(0x3c2)]())),_0x3e98f1=Math[_0x4ec7c3(0x959)](..._0x38dc18[_0x4ec7c3(0xc20)](_0xd2d8ea=>_0xd2d8ea[_0x4ec7c3(0xbc2)]()[_0x4ec7c3(0xa19)])),_0x3b1dec=_0x38dc18[_0x4ec7c3(0x5ed)](_0x415967=>_0x415967[_0x4ec7c3(0x8d6)]())['length'],_0x8fe62f=_0x38dc18[_0x4ec7c3(0x5ed)](_0x41957c=>_0x41957c['isEnemy']())[_0x4ec7c3(0x7ce)];let _0x4b1786=0x0,_0x3f7d14=0x0;if(_0x17c6cb['match'](/front/i))_0x4b1786=_0x3b1dec>=_0x8fe62f?_0x1a5e0d:_0x109887;else{if(_0x17c6cb[_0x4ec7c3(0xb9e)](/middle/i))_0x4b1786=(_0x1a5e0d+_0x109887)/0x2,_0x556f9b=-0x1;else _0x17c6cb[_0x4ec7c3(0xb9e)](/back/i)&&(_0x4b1786=_0x3b1dec>=_0x8fe62f?_0x109887:_0x1a5e0d);}if(_0x17c6cb[_0x4ec7c3(0xb9e)](/head/i))_0x3f7d14=_0x17d6f1;else{if(_0x17c6cb['match'](/center/i))_0x3f7d14=(_0x17d6f1+_0x3e98f1)/0x2;else _0x17c6cb[_0x4ec7c3(0xb9e)](/base/i)&&(_0x3f7d14=_0x3e98f1);}if(!_0x2edb10)return;for(const _0x19ef72 of _0x34ae76){if(!_0x19ef72)continue;let _0x1d7c23=_0x4b1786,_0x2e2b13=_0x3f7d14;if(_0x534304[_0x4ec7c3(0xb9e)](/none/i))_0x1d7c23+=_0x5db2f8,_0x2e2b13+=_0x1a8bea;else{if(_0x534304[_0x4ec7c3(0xb9e)](/horz/i)&&_0x534304['match'](/vert/i))_0x1d7c23+=_0x19ef72[_0x4ec7c3(0x8d6)]()?-_0x5db2f8:_0x5db2f8,_0x2e2b13+=_0x19ef72[_0x4ec7c3(0x8d6)]()?-_0x1a8bea:_0x1a8bea;else{if(_0x534304['match'](/horz/i))_0x1d7c23+=_0x19ef72['isActor']()?-_0x5db2f8:_0x5db2f8,_0x2e2b13+=_0x1a8bea;else _0x534304[_0x4ec7c3(0xb9e)](/vert/i)&&(_0x1d7c23+=_0x5db2f8,_0x2e2b13+=_0x19ef72[_0x4ec7c3(0x8d6)]()?-_0x1a8bea:_0x1a8bea);}}_0x19ef72[_0x4ec7c3(0x7dd)](_0x1d7c23,_0x2e2b13,_0x37ca9b,_0x721466,_0x385379,_0x556f9b),_0x19ef72[_0x4ec7c3(0x4a5)](_0x2ec792);}if(_0x433bcd)_0x2edb10[_0x4ec7c3(0x415)](_0x4ec7c3(0x1ee));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0xa29),_0xc5525b=>{const _0x144941=_0x2dcaec;if(!SceneManager[_0x144941(0xa2b)]())return;if(!$gameSystem[_0x144941(0x334)]())return;VisuMZ[_0x144941(0x44f)](_0xc5525b,_0xc5525b);const _0x13d4fb=VisuMZ[_0x144941(0x77f)](_0xc5525b[_0x144941(0xad6)]);let _0x41db0b=_0xc5525b[_0x144941(0x5f3)][_0x144941(0xb9e)](/back/i);for(const _0x493f2d of _0x13d4fb){if(!_0x493f2d)continue;if(_0xc5525b[_0x144941(0x5f3)]['match'](/rand/i))_0x41db0b=Math[_0x144941(0xb44)](0x2);_0x493f2d[_0x144941(0x5bd)](!!_0x41db0b);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x1e2),_0x5a4db4=>{const _0x451af5=_0x2dcaec;if(!SceneManager[_0x451af5(0xa2b)]())return;if(!$gameSystem[_0x451af5(0x334)]())return;VisuMZ[_0x451af5(0x44f)](_0x5a4db4,_0x5a4db4);const _0x2e587d=VisuMZ[_0x451af5(0x77f)](_0x5a4db4[_0x451af5(0xad6)]),_0x13fdde=_0x5a4db4[_0x451af5(0x93f)];for(const _0x505ebb of _0x2e587d){if(!_0x505ebb)continue;const _0x5784f4=_0x5a4db4[_0x451af5(0x96b)](_0x505ebb)||{'x':0x0,'y':0x0};let _0x46076a=_0x5784f4['x'],_0x33c157=_0x5784f4['y'];_0x505ebb[_0x451af5(0xb0b)](Math[_0x451af5(0x976)](_0x46076a),Math[_0x451af5(0x976)](_0x33c157),!!_0x13fdde);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x46c),_0x2e0204=>{const _0x437577=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x437577(0x334)]())return;VisuMZ[_0x437577(0x44f)](_0x2e0204,_0x2e0204);const _0x58fa0a=VisuMZ['CreateActionSequenceTargets'](_0x2e0204[_0x437577(0xad6)]);let _0x1a39b4=_0x2e0204[_0x437577(0x3ea)];const _0xb13213=_0x2e0204['FaceAway'];for(const _0x11d785 of _0x58fa0a){if(!_0x11d785)continue;let _0x51042c=_0x11d785['battler']()[_0x437577(0xae9)],_0x991baf=_0x11d785[_0x437577(0xbc2)]()[_0x437577(0xa19)];if(_0x1a39b4['match'](/home/i))_0x51042c=_0x11d785[_0x437577(0xbc2)]()['_homeX'],_0x991baf=_0x11d785['battler']()[_0x437577(0x94d)];else{if(_0x1a39b4['match'](/center/i))_0x51042c=Graphics[_0x437577(0x555)]/0x2,_0x991baf=Graphics[_0x437577(0xab4)]/0x2;else _0x1a39b4[_0x437577(0xb9e)](/point (\d+), (\d+)/i)&&(_0x51042c=Number(RegExp['$1']),_0x991baf=Number(RegExp['$2']));}_0x11d785[_0x437577(0xb0b)](Math[_0x437577(0x976)](_0x51042c),Math['round'](_0x991baf),!!_0xb13213);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],'ActSeq_Movement_FaceTarget',_0x18c382=>{const _0x758496=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x758496(0x334)]())return;VisuMZ[_0x758496(0x44f)](_0x18c382,_0x18c382);const _0x531695=VisuMZ[_0x758496(0x77f)](_0x18c382[_0x758496(0x81b)]),_0x3d1c41=VisuMZ[_0x758496(0x77f)](_0x18c382[_0x758496(0x883)]),_0x19c472=_0x3d1c41[_0x758496(0xc20)](_0x56d31a=>_0x56d31a&&_0x56d31a[_0x758496(0xbc2)]()?_0x56d31a['battler']()[_0x758496(0xae9)]:0x0)/(_0x3d1c41[_0x758496(0x7ce)]||0x1),_0x3f8dc9=_0x3d1c41[_0x758496(0xc20)](_0x4607bb=>_0x4607bb&&_0x4607bb[_0x758496(0xbc2)]()?_0x4607bb[_0x758496(0xbc2)]()[_0x758496(0xa19)]:0x0)/(_0x3d1c41['length']||0x1),_0x29c489=_0x18c382[_0x758496(0x93f)];for(const _0x5d99b7 of _0x531695){if(!_0x5d99b7)continue;_0x5d99b7['setBattlerFacePoint'](Math['round'](_0x19c472),Math[_0x758496(0x976)](_0x3f8dc9),!!_0x29c489);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa67),_0x1543f4=>{const _0x3f290f=_0x2dcaec;if(!SceneManager[_0x3f290f(0xa2b)]())return;VisuMZ['ConvertParams'](_0x1543f4,_0x1543f4);const _0x23148e=$gameTemp[_0x3f290f(0x9c5)](),_0xb8952b=VisuMZ[_0x3f290f(0x77f)](_0x1543f4[_0x3f290f(0xad6)]),_0x32029b=_0x1543f4[_0x3f290f(0x364)],_0x34bb7b=_0x1543f4['Duration'],_0x382e3d=_0x1543f4[_0x3f290f(0x9cf)],_0x57af79=_0x1543f4[_0x3f290f(0x530)];if(!_0x23148e)return;for(const _0x22f177 of _0xb8952b){if(!_0x22f177)continue;_0x22f177['floatBattler'](_0x32029b,_0x34bb7b,_0x382e3d);}if(_0x57af79)_0x23148e[_0x3f290f(0x415)]('battleFloat');}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x607),_0x3f7ead=>{const _0x55b1b7=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3f7ead,_0x3f7ead);const _0x11a43b=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x11a43b)return;const _0x1d4cc2=VisuMZ[_0x55b1b7(0x77f)](_0x3f7ead[_0x55b1b7(0xad6)]);for(const _0x380bcc of _0x1d4cc2){if(!_0x380bcc)continue;_0x380bcc['performActionEndMembers']();}BattleManager['_subject']&&BattleManager[_0x55b1b7(0x173)]['performActionEnd']();if(_0x3f7ead[_0x55b1b7(0x372)])_0x11a43b[_0x55b1b7(0x415)]('battleMove');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x8ca),_0x1168e6=>{const _0x55ce06=_0x2dcaec;if(!SceneManager[_0x55ce06(0xa2b)]())return;VisuMZ[_0x55ce06(0x44f)](_0x1168e6,_0x1168e6);const _0x2b4e5c=$gameTemp[_0x55ce06(0x9c5)](),_0x188e42=VisuMZ[_0x55ce06(0x77f)](_0x1168e6[_0x55ce06(0xad6)]),_0x40aabe=_0x1168e6['Height'],_0x56419e=_0x1168e6[_0x55ce06(0x603)],_0x41c0d0=_0x1168e6[_0x55ce06(0x23c)];if(!_0x2b4e5c)return;for(const _0x2b893b of _0x188e42){if(!_0x2b893b)continue;_0x2b893b['jumpBattler'](_0x40aabe,_0x56419e);}if(_0x41c0d0)_0x2b4e5c['setWaitMode'](_0x55ce06(0x418));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x9bd),_0x36b85a=>{const _0x121123=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x121123(0x44f)](_0x36b85a,_0x36b85a);const _0x33581a=$gameTemp[_0x121123(0x9c5)](),_0x2d8a35=VisuMZ[_0x121123(0x77f)](_0x36b85a['Targets']),_0x348a61=_0x36b85a[_0x121123(0x4d8)],_0x5627da=_0x36b85a['DistanceX'],_0x439dc6=_0x36b85a['DistanceY'],_0x4254c1=_0x36b85a[_0x121123(0x603)],_0x4d2e65=_0x36b85a[_0x121123(0x375)],_0x1ee841=_0x36b85a[_0x121123(0x9cf)],_0x228985=_0x36b85a[_0x121123(0x212)],_0x485187=_0x36b85a[_0x121123(0x372)];if(!_0x33581a)return;for(const _0x42b53d of _0x2d8a35){if(!_0x42b53d)continue;let _0x1e1bab=_0x5627da,_0x1ea1eb=_0x439dc6;if(_0x348a61[_0x121123(0xb9e)](/horz/i))_0x1e1bab*=_0x42b53d['isActor']()?-0x1:0x1;if(_0x348a61[_0x121123(0xb9e)](/vert/i))_0x1ea1eb*=_0x42b53d[_0x121123(0x8d6)]()?-0x1:0x1;_0x42b53d[_0x121123(0x39e)](_0x1e1bab,_0x1ea1eb,_0x4254c1,_0x4d2e65,_0x1ee841),_0x42b53d['requestMotion'](_0x228985);}if(_0x485187)_0x33581a['setWaitMode']('battleMove');}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x442),_0x9673ca=>{const _0x599c3d=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x599c3d(0x334)]())return;VisuMZ[_0x599c3d(0x44f)](_0x9673ca,_0x9673ca);const _0x181bc1=$gameTemp[_0x599c3d(0x9c5)](),_0x25a13c=VisuMZ[_0x599c3d(0x77f)](_0x9673ca[_0x599c3d(0xad6)]),_0x287be3=_0x9673ca['OffsetAdjust'],_0x3d40ba=_0x9673ca['OffsetX'],_0x5c4f73=_0x9673ca['OffsetY'],_0x3246b2=_0x9673ca[_0x599c3d(0x603)],_0x4fa7b9=_0x9673ca['FaceDirection'],_0x1bee78=_0x9673ca['EasingType'],_0x56077c=_0x9673ca['MotionType'],_0x507f5a=_0x9673ca['WaitForMovement'];if(!_0x181bc1)return;for(const _0x4aa1a5 of _0x25a13c){if(!_0x4aa1a5)continue;const _0x5b570e=_0x9673ca[_0x599c3d(0x8ce)](_0x4aa1a5)||{'x':0x0,'y':0x0};let _0x2d1b8b=_0x5b570e['x'],_0x234c3=_0x5b570e['y'];if(_0x287be3[_0x599c3d(0xb9e)](/none/i))_0x2d1b8b+=_0x3d40ba,_0x234c3+=_0x5c4f73;else{if(_0x287be3[_0x599c3d(0xb9e)](/horz/i)&&_0x287be3['match'](/vert/i))_0x2d1b8b+=_0x4aa1a5[_0x599c3d(0x8d6)]()?-_0x3d40ba:_0x3d40ba,_0x234c3+=_0x4aa1a5['isActor']()?-_0x5c4f73:_0x5c4f73;else{if(_0x287be3[_0x599c3d(0xb9e)](/horz/i))_0x2d1b8b+=_0x4aa1a5[_0x599c3d(0x8d6)]()?-_0x3d40ba:_0x3d40ba,_0x234c3+=_0x5c4f73;else _0x287be3['match'](/vert/i)&&(_0x2d1b8b+=_0x3d40ba,_0x234c3+=_0x4aa1a5['isActor']()?-_0x5c4f73:_0x5c4f73);}}_0x4aa1a5[_0x599c3d(0x241)](_0x2d1b8b,_0x234c3,_0x3246b2,_0x4fa7b9,_0x1bee78,-0x1),_0x4aa1a5['requestMotion'](_0x56077c);}if(_0x507f5a)_0x181bc1[_0x599c3d(0x415)](_0x599c3d(0x1ee));}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x64d),_0x72003e=>{const _0x24ea5b=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x24ea5b(0x334)]())return;VisuMZ[_0x24ea5b(0x44f)](_0x72003e,_0x72003e);const _0x35e91e=$gameTemp[_0x24ea5b(0x9c5)](),_0x5b7915=VisuMZ[_0x24ea5b(0x77f)](_0x72003e[_0x24ea5b(0xad6)]),_0x175939=_0x72003e[_0x24ea5b(0x3a1)],_0x54b521=_0x72003e[_0x24ea5b(0x25f)],_0x2eecbd=_0x72003e[_0x24ea5b(0x842)],_0x205f82=_0x72003e[_0x24ea5b(0x53d)],_0x19df0c=_0x72003e['Duration'],_0x4d5ca4=_0x72003e[_0x24ea5b(0x375)],_0x394d7e=_0x72003e[_0x24ea5b(0x9cf)],_0x155699=_0x72003e[_0x24ea5b(0x212)],_0x910d3=_0x72003e['WaitForMovement'];if(!_0x35e91e)return;for(const _0x548adb of _0x5b7915){if(!_0x548adb)continue;let _0x10f428=_0x548adb[_0x24ea5b(0xbc2)]()[_0x24ea5b(0xae9)],_0x3838e9=_0x548adb['battler']()[_0x24ea5b(0xa19)];if(_0x175939[_0x24ea5b(0xb9e)](/home/i))_0x10f428=_0x548adb['battler']()[_0x24ea5b(0x5a6)],_0x3838e9=_0x548adb[_0x24ea5b(0xbc2)]()[_0x24ea5b(0x94d)];else{if(_0x175939['match'](/center/i))_0x10f428=Graphics['boxWidth']/0x2,_0x3838e9=Graphics[_0x24ea5b(0xab4)]/0x2;else _0x175939[_0x24ea5b(0xb9e)](/point (\d+), (\d+)/i)&&(_0x10f428=Number(RegExp['$1']),_0x3838e9=Number(RegExp['$2']));}if(_0x54b521[_0x24ea5b(0xb9e)](/none/i))_0x10f428+=_0x2eecbd,_0x3838e9+=_0x205f82;else{if(_0x54b521[_0x24ea5b(0xb9e)](/horz/i)&&_0x54b521[_0x24ea5b(0xb9e)](/vert/i))_0x10f428+=_0x548adb[_0x24ea5b(0x8d6)]()?-_0x2eecbd:_0x2eecbd,_0x3838e9+=_0x548adb[_0x24ea5b(0x8d6)]()?-_0x205f82:_0x205f82;else{if(_0x54b521[_0x24ea5b(0xb9e)](/horz/i))_0x10f428+=_0x548adb[_0x24ea5b(0x8d6)]()?-_0x2eecbd:_0x2eecbd,_0x3838e9+=_0x205f82;else _0x54b521['match'](/vert/i)&&(_0x10f428+=_0x2eecbd,_0x3838e9+=_0x548adb['isActor']()?-_0x205f82:_0x205f82);}}_0x548adb[_0x24ea5b(0x241)](_0x10f428,_0x3838e9,_0x19df0c,_0x4d5ca4,_0x394d7e,-0x1),_0x548adb[_0x24ea5b(0x4a5)](_0x155699);}if(_0x910d3)_0x35e91e[_0x24ea5b(0x415)](_0x24ea5b(0x1ee));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x70e),_0x17b11e=>{const _0x4c99e8=_0x2dcaec;if(!SceneManager[_0x4c99e8(0xa2b)]())return;if(!$gameSystem[_0x4c99e8(0x334)]())return;VisuMZ[_0x4c99e8(0x44f)](_0x17b11e,_0x17b11e);const _0xe45de=$gameTemp['getLastPluginCommandInterpreter'](),_0x4905dc=VisuMZ[_0x4c99e8(0x77f)](_0x17b11e['Targets1']),_0x5c1265=VisuMZ[_0x4c99e8(0x77f)](_0x17b11e['Targets2']),_0x2bc661=_0x17b11e['TargetLocation'];let _0x58b224=_0x17b11e[_0x4c99e8(0x859)];const _0x544363=_0x17b11e[_0x4c99e8(0x25f)],_0x38781f=_0x17b11e[_0x4c99e8(0x842)],_0x4dde77=_0x17b11e['OffsetY'],_0x33fe19=_0x17b11e[_0x4c99e8(0x603)],_0x3d93dd=_0x17b11e[_0x4c99e8(0x375)],_0x297e2e=_0x17b11e[_0x4c99e8(0x9cf)],_0x416174=_0x17b11e[_0x4c99e8(0x212)],_0x4d53a7=_0x17b11e[_0x4c99e8(0x372)],_0x127bb6=Math[_0x4c99e8(0xaf1)](..._0x5c1265[_0x4c99e8(0xc20)](_0x56bc53=>_0x56bc53[_0x4c99e8(0xbc2)]()[_0x4c99e8(0xae9)]-_0x56bc53['battler']()[_0x4c99e8(0x74d)]()/0x2)),_0x354172=Math[_0x4c99e8(0x959)](..._0x5c1265[_0x4c99e8(0xc20)](_0x5c7ff2=>_0x5c7ff2[_0x4c99e8(0xbc2)]()[_0x4c99e8(0xae9)]+_0x5c7ff2[_0x4c99e8(0xbc2)]()[_0x4c99e8(0x74d)]()/0x2)),_0x3c12da=Math[_0x4c99e8(0xaf1)](..._0x5c1265['map'](_0x30fb8d=>_0x30fb8d['battler']()[_0x4c99e8(0xa19)]-_0x30fb8d[_0x4c99e8(0xbc2)]()[_0x4c99e8(0x3c2)]())),_0x5d3861=Math[_0x4c99e8(0x959)](..._0x5c1265[_0x4c99e8(0xc20)](_0x50d2a1=>_0x50d2a1[_0x4c99e8(0xbc2)]()[_0x4c99e8(0xa19)])),_0xf38525=_0x5c1265[_0x4c99e8(0x5ed)](_0x17985f=>_0x17985f[_0x4c99e8(0x8d6)]())['length'],_0x5b4172=_0x5c1265[_0x4c99e8(0x5ed)](_0x48b103=>_0x48b103[_0x4c99e8(0x5d1)]())[_0x4c99e8(0x7ce)];let _0x50e1a8=0x0,_0x5db03e=0x0;if(_0x2bc661[_0x4c99e8(0xb9e)](/front/i))_0x50e1a8=_0xf38525>=_0x5b4172?_0x127bb6:_0x354172;else{if(_0x2bc661[_0x4c99e8(0xb9e)](/middle/i))_0x50e1a8=(_0x127bb6+_0x354172)/0x2,_0x58b224=-0x1;else _0x2bc661[_0x4c99e8(0xb9e)](/back/i)&&(_0x50e1a8=_0xf38525>=_0x5b4172?_0x354172:_0x127bb6);}if(_0x2bc661[_0x4c99e8(0xb9e)](/head/i))_0x5db03e=_0x3c12da;else{if(_0x2bc661['match'](/center/i))_0x5db03e=(_0x3c12da+_0x5d3861)/0x2;else _0x2bc661[_0x4c99e8(0xb9e)](/base/i)&&(_0x5db03e=_0x5d3861);}if(!_0xe45de)return;for(const _0x4806c7 of _0x4905dc){if(!_0x4806c7)continue;let _0x28bd7d=_0x50e1a8,_0x6449e1=_0x5db03e;if(_0x544363[_0x4c99e8(0xb9e)](/none/i))_0x28bd7d+=_0x38781f,_0x6449e1+=_0x4dde77;else{if(_0x544363['match'](/horz/i)&&_0x544363[_0x4c99e8(0xb9e)](/vert/i))_0x28bd7d+=_0x4806c7[_0x4c99e8(0x8d6)]()?-_0x38781f:_0x38781f,_0x6449e1+=_0x4806c7['isActor']()?-_0x4dde77:_0x4dde77;else{if(_0x544363['match'](/horz/i))_0x28bd7d+=_0x4806c7[_0x4c99e8(0x8d6)]()?-_0x38781f:_0x38781f,_0x6449e1+=_0x4dde77;else _0x544363['match'](/vert/i)&&(_0x28bd7d+=_0x38781f,_0x6449e1+=_0x4806c7[_0x4c99e8(0x8d6)]()?-_0x4dde77:_0x4dde77);}}_0x4806c7[_0x4c99e8(0x241)](_0x28bd7d,_0x6449e1,_0x33fe19,_0x3d93dd,_0x297e2e,_0x58b224),_0x4806c7[_0x4c99e8(0x4a5)](_0x416174);}if(_0x4d53a7)_0xe45de[_0x4c99e8(0x415)](_0x4c99e8(0x1ee));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x56b),_0x3eb8e4=>{const _0x55b213=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x3eb8e4,_0x3eb8e4);const _0x3f086b=$gameTemp[_0x55b213(0x9c5)](),_0x43dc5d=VisuMZ[_0x55b213(0x77f)](_0x3eb8e4['Targets']),_0x3e483b=_0x3eb8e4['Opacity'],_0x26f616=_0x3eb8e4['Duration'],_0x5d8c72=_0x3eb8e4['EasingType'],_0xceaaae=_0x3eb8e4[_0x55b213(0xbb3)];if(!_0x3f086b)return;for(const _0x51390d of _0x43dc5d){if(!_0x51390d)continue;_0x51390d[_0x55b213(0x7cf)](_0x3e483b,_0x26f616,_0x5d8c72);}if(_0xceaaae)_0x3f086b[_0x55b213(0x415)](_0x55b213(0x6e6));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xa59),_0x40ea03=>{const _0x2001fa=_0x2dcaec;if(!SceneManager[_0x2001fa(0xa2b)]())return;VisuMZ[_0x2001fa(0x44f)](_0x40ea03,_0x40ea03);const _0x3c2e94=$gameTemp[_0x2001fa(0x9c5)](),_0x20b1a3=VisuMZ[_0x2001fa(0x77f)](_0x40ea03['Targets']),_0x5e7636=_0x40ea03[_0x2001fa(0x5c2)],_0x55701e=_0x40ea03[_0x2001fa(0x141)],_0x131c65=_0x40ea03[_0x2001fa(0x603)],_0x4b76f9=_0x40ea03[_0x2001fa(0x9cf)],_0x5dcb90=_0x40ea03['WaitForScale'];if(!_0x3c2e94)return;for(const _0x216e3a of _0x20b1a3){if(!_0x216e3a)continue;_0x216e3a[_0x2001fa(0x6ff)](_0x5e7636,_0x55701e,_0x131c65,_0x4b76f9);}if(_0x5dcb90)_0x3c2e94[_0x2001fa(0x415)]('battleGrow');}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x726),_0x7af4d8=>{const _0x38c37a=_0x2dcaec;if(!SceneManager[_0x38c37a(0xa2b)]())return;VisuMZ[_0x38c37a(0x44f)](_0x7af4d8,_0x7af4d8);const _0x2bc183=$gameTemp[_0x38c37a(0x9c5)](),_0x7aa06c=VisuMZ[_0x38c37a(0x77f)](_0x7af4d8['Targets']),_0x3436a9=_0x7af4d8[_0x38c37a(0x863)],_0x4d48ce=_0x7af4d8[_0x38c37a(0xae0)],_0x1e4e72=_0x7af4d8[_0x38c37a(0x603)],_0x12c0e8=_0x7af4d8['EasingType'],_0x43bed9=_0x7af4d8[_0x38c37a(0x366)];if(!_0x2bc183)return;for(const _0x57eac1 of _0x7aa06c){if(!_0x57eac1)continue;_0x57eac1[_0x38c37a(0x928)](_0x3436a9,_0x4d48ce,_0x1e4e72,_0x12c0e8);}if(_0x43bed9)_0x2bc183['setWaitMode'](_0x38c37a(0x27e));}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0xb87),_0xc15895=>{const _0x1bb9fc=_0x2dcaec;if(!SceneManager[_0x1bb9fc(0xa2b)]())return;VisuMZ[_0x1bb9fc(0x44f)](_0xc15895,_0xc15895);const _0x41df9e=$gameTemp[_0x1bb9fc(0x9c5)](),_0x4b3542=VisuMZ[_0x1bb9fc(0x77f)](_0xc15895[_0x1bb9fc(0xad6)]),_0x3abd5f=_0xc15895[_0x1bb9fc(0x34a)],_0x5e488f=_0xc15895[_0x1bb9fc(0x603)],_0x2af609=_0xc15895[_0x1bb9fc(0x9cf)],_0x1a8f76=_0xc15895[_0x1bb9fc(0x7d7)],_0x108cfc=_0xc15895['WaitForSpin'];if(!_0x41df9e)return;for(const _0x3cf4f2 of _0x4b3542){if(!_0x3cf4f2)continue;_0x3cf4f2[_0x1bb9fc(0x538)](_0x3abd5f,_0x5e488f,_0x2af609,_0x1a8f76);}if(_0x108cfc)_0x41df9e[_0x1bb9fc(0x415)](_0x1bb9fc(0x8a8));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x1fd),_0x84512e=>{const _0x2db58a=_0x2dcaec;if(!SceneManager[_0x2db58a(0xa2b)]())return;const _0x7ae488=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x7ae488)return;_0x7ae488[_0x2db58a(0x415)](_0x2db58a(0x6cb));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x243),_0x35745c=>{const _0x5ca8f8=_0x2dcaec;if(!SceneManager[_0x5ca8f8(0xa2b)]())return;const _0xe5f0d5=$gameTemp[_0x5ca8f8(0x9c5)]();if(!_0xe5f0d5)return;_0xe5f0d5['setWaitMode'](_0x5ca8f8(0x418));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x81d),_0x4fbbd9=>{const _0x317576=_0x2dcaec;if(!SceneManager[_0x317576(0xa2b)]())return;const _0x16f673=$gameTemp[_0x317576(0x9c5)]();if(!_0x16f673)return;_0x16f673[_0x317576(0x415)](_0x317576(0x1ee));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb9c),_0x33d00f=>{const _0x4aa5d1=_0x2dcaec;if(!SceneManager[_0x4aa5d1(0xa2b)]())return;const _0x368b8c=$gameTemp[_0x4aa5d1(0x9c5)]();if(!_0x368b8c)return;_0x368b8c[_0x4aa5d1(0x415)]('battleOpacity');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Movement_WaitForScale',_0x41d0c6=>{const _0x4d20cd=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;const _0x30bb1d=$gameTemp[_0x4d20cd(0x9c5)]();if(!_0x30bb1d)return;_0x30bb1d[_0x4d20cd(0x415)](_0x4d20cd(0x19f));}),PluginManager['registerCommand'](pluginData['name'],_0x2dcaec(0x9c1),_0x16837c=>{const _0x1aa40e=_0x2dcaec;if(!SceneManager[_0x1aa40e(0xa2b)]())return;const _0x59422d=$gameTemp[_0x1aa40e(0x9c5)]();if(!_0x59422d)return;_0x59422d['setWaitMode'](_0x1aa40e(0x27e));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x420),_0x2cbe4b=>{const _0x2cf739=_0x2dcaec;if(!SceneManager[_0x2cf739(0xa2b)]())return;const _0x322df2=$gameTemp[_0x2cf739(0x9c5)]();if(!_0x322df2)return;_0x322df2[_0x2cf739(0x415)](_0x2cf739(0x8a8));}),VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x519)]=function(){const _0x59fe83=_0x2dcaec;if(!Imported[_0x59fe83(0x801)])return;if(VisuMZ[_0x59fe83(0xb86)][_0x59fe83(0x620)]<1.08){let _0x393457='';_0x393457+='VisuMZ_3_ActSeqProjectiles\x20needs\x20to\x20be\x20updated\x20',_0x393457+=_0x59fe83(0x24e),alert(_0x393457),SceneManager['exit']();}},PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0xb08),_0xa5a1d3=>{const _0xd5a64e=_0x2dcaec;if(!SceneManager[_0xd5a64e(0xa2b)]())return;if(!Imported[_0xd5a64e(0x801)])return;VisuMZ[_0xd5a64e(0x44f)](_0xa5a1d3,_0xa5a1d3),VisuMZ[_0xd5a64e(0xae3)][_0xd5a64e(0x519)]();const _0x141dae=$gameTemp['getLastPluginCommandInterpreter'](),_0x1168ea=_0xa5a1d3[_0xd5a64e(0x9ab)];if(!_0x141dae)return;const _0x355d84=BattleManager[_0xd5a64e(0x2a3)];if(!_0x355d84)return;_0x355d84[_0xd5a64e(0x628)](_0xa5a1d3);if(_0x1168ea)_0x141dae[_0xd5a64e(0x415)](_0xd5a64e(0x5e5));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x667),_0x2bbb55=>{const _0x1b678a=_0x2dcaec;if(!SceneManager[_0x1b678a(0xa2b)]())return;if(!Imported[_0x1b678a(0x801)])return;VisuMZ[_0x1b678a(0x44f)](_0x2bbb55,_0x2bbb55),VisuMZ[_0x1b678a(0xae3)][_0x1b678a(0x519)]();const _0x488602=$gameTemp[_0x1b678a(0x9c5)](),_0x222c2f=_0x2bbb55['WaitForProjectile'];if(!_0x488602)return;const _0x43e8e6=BattleManager[_0x1b678a(0x2a3)];if(!_0x43e8e6)return;_0x43e8e6['createActionSequenceProjectile'](_0x2bbb55);if(_0x222c2f)_0x488602[_0x1b678a(0x415)](_0x1b678a(0x5e5));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x860),_0xcf3f34=>{const _0x14389e=_0x2dcaec;if(!SceneManager[_0x14389e(0xa2b)]())return;if(!Imported[_0x14389e(0x801)])return;VisuMZ[_0x14389e(0x44f)](_0xcf3f34,_0xcf3f34),VisuMZ[_0x14389e(0xae3)]['CheckActSeqProjectileVersion']();const _0x40eae1=$gameTemp['getLastPluginCommandInterpreter'](),_0x2a0b2a=_0xcf3f34[_0x14389e(0x9ab)];if(!_0x40eae1)return;const _0x3bac78=BattleManager[_0x14389e(0x2a3)];if(!_0x3bac78)return;_0x3bac78[_0x14389e(0x628)](_0xcf3f34);if(_0x2a0b2a)_0x40eae1[_0x14389e(0x415)](_0x14389e(0x5e5));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x7bf),_0x31bd49=>{const _0x4085a6=_0x2dcaec;if(!SceneManager[_0x4085a6(0xa2b)]())return;if(!Imported[_0x4085a6(0x161)])return;VisuMZ['ConvertParams'](_0x31bd49,_0x31bd49);const _0x4db7b7=$gameTemp[_0x4085a6(0x9c5)](),_0x12bde9=_0x31bd49[_0x4085a6(0x366)];if(!_0x4db7b7)return;$gameScreen['setBattleSkew'](_0x31bd49[_0x4085a6(0x863)],_0x31bd49[_0x4085a6(0xae0)],_0x31bd49['Duration'],_0x31bd49[_0x4085a6(0x9cf)]);if(_0x12bde9)_0x4db7b7[_0x4085a6(0x415)](_0x4085a6(0x839));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x8d3),_0x49ccb4=>{const _0x264bfb=_0x2dcaec;if(!SceneManager[_0x264bfb(0xa2b)]())return;if(!Imported[_0x264bfb(0x161)])return;VisuMZ[_0x264bfb(0x44f)](_0x49ccb4,_0x49ccb4);const _0x2dd74a=$gameTemp[_0x264bfb(0x9c5)](),_0x2ee0ee=_0x49ccb4[_0x264bfb(0x366)];if(!_0x2dd74a)return;$gameScreen['setBattleSkew'](0x0,0x0,_0x49ccb4[_0x264bfb(0x603)],_0x49ccb4[_0x264bfb(0x9cf)]);if(_0x2ee0ee)_0x2dd74a[_0x264bfb(0x415)]('battleSkew');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x4a2),_0xde71c7=>{const _0x54c367=_0x2dcaec;if(!SceneManager[_0x54c367(0xa2b)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x59595a=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x59595a)return;_0x59595a[_0x54c367(0x415)](_0x54c367(0x839));}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x36e),_0x290f87=>{const _0x5a2f31=_0x2dcaec;if(!SceneManager[_0x5a2f31(0xa2b)]())return;VisuMZ[_0x5a2f31(0x44f)](_0x290f87,_0x290f87);const _0x2cb971=$gameTemp['getLastPluginCommandInterpreter'](),_0x21245c=_0x290f87['Index'],_0x2d84f2=_0x290f87[_0x5a2f31(0x1ba)];if(!_0x2cb971)return;BattleManager[_0x5a2f31(0xc26)]=_0x21245c,BattleManager[_0x5a2f31(0xc39)]=BattleManager[_0x5a2f31(0x180)]?BattleManager['_allTargets'][BattleManager[_0x5a2f31(0xc26)]]||null:null;if(window[_0x5a2f31(0x8e7)])BattleManager[_0x5a2f31(0xbac)]();BattleManager[_0x5a2f31(0xc39)]&&_0x2d84f2['toUpperCase']()[_0x5a2f31(0x651)]()!==_0x5a2f31(0xc51)&&_0x2cb971['command119']([_0x2d84f2]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Target_NextTarget',_0x4b5ca3=>{const _0x2630b4=_0x2dcaec;if(!SceneManager[_0x2630b4(0xa2b)]())return;VisuMZ[_0x2630b4(0x44f)](_0x4b5ca3,_0x4b5ca3);const _0x3f5f4b=$gameTemp['getLastPluginCommandInterpreter'](),_0x44c6ea=_0x4b5ca3[_0x2630b4(0x1ba)];if(!_0x3f5f4b)return;BattleManager[_0x2630b4(0xc26)]++,BattleManager[_0x2630b4(0xc39)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(window[_0x2630b4(0x8e7)])BattleManager['updateBattleVariables']();BattleManager[_0x2630b4(0xc39)]&&_0x44c6ea[_0x2630b4(0xb9f)]()[_0x2630b4(0x651)]()!=='UNTITLED'&&_0x3f5f4b[_0x2630b4(0x8a4)]([_0x44c6ea]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],'ActSeq_Target_PrevTarget',_0xe2fdc2=>{const _0x47e0c9=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x47e0c9(0x44f)](_0xe2fdc2,_0xe2fdc2);const _0xf7ab22=$gameTemp['getLastPluginCommandInterpreter'](),_0x587c58=_0xe2fdc2[_0x47e0c9(0x1ba)];if(!_0xf7ab22)return;BattleManager['_targetIndex']--,BattleManager[_0x47e0c9(0xc39)]=BattleManager['_allTargets'][BattleManager['_targetIndex']]||null;if(window[_0x47e0c9(0x8e7)])BattleManager[_0x47e0c9(0xbac)]();BattleManager[_0x47e0c9(0xc39)]&&_0x587c58['toUpperCase']()['trim']()!==_0x47e0c9(0xc51)&&_0xf7ab22[_0x47e0c9(0x8a4)]([_0x587c58]);}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x946),_0x5ac7f5=>{const _0x334c17=_0x2dcaec;if(!SceneManager[_0x334c17(0xa2b)]())return;VisuMZ[_0x334c17(0x44f)](_0x5ac7f5,_0x5ac7f5);const _0x240251=$gameTemp['getLastPluginCommandInterpreter'](),_0x4df3f1=_0x5ac7f5[_0x334c17(0xb50)],_0x53ba43=_0x5ac7f5[_0x334c17(0x1ba)];if(!_0x240251)return;const _0x19ce0a=BattleManager[_0x334c17(0xc26)];for(;;){BattleManager[_0x334c17(0xc26)]=Math[_0x334c17(0xb44)](BattleManager[_0x334c17(0x180)][_0x334c17(0x7ce)]);if(!_0x4df3f1)break;if(BattleManager[_0x334c17(0xc26)]!==_0x19ce0a)break;if(BattleManager['_allTargets'][_0x334c17(0x7ce)]<=0x1){BattleManager[_0x334c17(0xc26)]=0x0;break;}}BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x334c17(0xc26)]]||null;if(window[_0x334c17(0x8e7)])BattleManager['updateBattleVariables']();BattleManager[_0x334c17(0xc39)]&&_0x53ba43['toUpperCase']()[_0x334c17(0x651)]()!==_0x334c17(0xc51)&&_0x240251[_0x334c17(0x8a4)]([_0x53ba43]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x5c5),_0x22076c=>{const _0x3db084=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x3db084(0x269)])return;if(!ConfigManager[_0x3db084(0xbb5)])return;VisuMZ['ConvertParams'](_0x22076c,_0x22076c);const _0x11494a=VisuMZ[_0x3db084(0x77f)](_0x22076c[_0x3db084(0xad6)]);let _0x3c561f=_0x22076c[_0x3db084(0x7b5)]||'';for(const _0x4a6169 of _0x11494a){if(!_0x4a6169)continue;_0x4a6169[_0x3db084(0x771)](_0x3c561f);}}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0x717),_0x375452=>{const _0x5c91b3=_0x2dcaec;if(!SceneManager[_0x5c91b3(0xa2b)]())return;if(!Imported[_0x5c91b3(0x269)])return;if(!ConfigManager[_0x5c91b3(0xbb5)])return;VisuMZ[_0x5c91b3(0x44f)](_0x375452,_0x375452);const _0x1382f0=VisuMZ[_0x5c91b3(0x77f)](_0x375452[_0x5c91b3(0xad6)]);let _0x27beac=(_0x375452[_0x5c91b3(0x260)]||'')+(_0x375452[_0x5c91b3(0xa52)]||'');for(const _0x1c76f9 of _0x1382f0){if(!_0x1c76f9)continue;_0x1c76f9[_0x5c91b3(0x771)](_0x27beac);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x7d9),_0x5b9e26=>{const _0x1582b9=_0x2dcaec;if(!SceneManager[_0x1582b9(0xa2b)]())return;VisuMZ[_0x1582b9(0x44f)](_0x5b9e26,_0x5b9e26);const _0x5d4231=VisuMZ[_0x1582b9(0x77f)](_0x5b9e26[_0x1582b9(0xad6)]);for(const _0x27ba69 of _0x5d4231){if(!_0x27ba69)continue;if(!_0x27ba69[_0x1582b9(0x8d6)]())continue;_0x27ba69[_0x1582b9(0x64e)]();}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x617),_0x437bf7=>{const _0x31ddc9=_0x2dcaec;if(!SceneManager[_0x31ddc9(0xa2b)]())return;VisuMZ[_0x31ddc9(0x44f)](_0x437bf7,_0x437bf7);const _0x23d587=$gameTemp[_0x31ddc9(0x9c5)]();let _0x5d5051=![];const _0x107638=_0x437bf7['JumpToLabel'],_0x4f85fb=VisuMZ[_0x31ddc9(0x77f)](_0x437bf7[_0x31ddc9(0xad6)]);for(const _0x2c0315 of _0x4f85fb){if(!_0x2c0315)continue;if(!_0x2c0315[_0x31ddc9(0x8d6)]())continue;_0x2c0315['nextActiveWeaponSlot'](),_0x2c0315['weapons']()[_0x31ddc9(0x7ce)]>0x0?_0x5d5051=!![]:_0x2c0315[_0x31ddc9(0x64e)]();}_0x5d5051&&_0x107638[_0x31ddc9(0xb9f)]()[_0x31ddc9(0x651)]()!==_0x31ddc9(0xc51)&&_0x23d587['command119']([_0x107638]);}),PluginManager[_0x2dcaec(0x1a8)](pluginData['name'],_0x2dcaec(0xb0c),_0xacea8f=>{const _0x154f3f=_0x2dcaec;if(!SceneManager[_0x154f3f(0xa2b)]())return;VisuMZ[_0x154f3f(0x44f)](_0xacea8f,_0xacea8f);let _0x5a8fb7=_0xacea8f[_0x154f3f(0x191)];_0x5a8fb7--,_0x5a8fb7=Math[_0x154f3f(0x959)](_0x5a8fb7,0x0);const _0xafd8b=VisuMZ[_0x154f3f(0x77f)](_0xacea8f[_0x154f3f(0xad6)]);for(const _0x9fe1bf of _0xafd8b){if(!_0x9fe1bf)continue;if(!_0x9fe1bf[_0x154f3f(0x8d6)]())continue;_0x9fe1bf[_0x154f3f(0x51c)](_0x5a8fb7);}}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x632),_0x2d0f01=>{const _0x2730dd=_0x2dcaec;if(!SceneManager[_0x2730dd(0xa2b)]())return;if(!Imported[_0x2730dd(0x161)])return;VisuMZ['ConvertParams'](_0x2d0f01,_0x2d0f01);const _0x3efc71=$gameTemp[_0x2730dd(0x9c5)](),_0x2b9a5a=_0x2d0f01[_0x2730dd(0x7ee)];if(!_0x3efc71)return;$gameScreen['setBattleZoom'](_0x2d0f01[_0x2730dd(0x3f6)],_0x2d0f01[_0x2730dd(0x603)],_0x2d0f01[_0x2730dd(0x9cf)]);if(_0x2b9a5a)_0x3efc71[_0x2730dd(0x415)](_0x2730dd(0x6aa));}),PluginManager['registerCommand'](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x82a),_0x461049=>{const _0x10b7a8=_0x2dcaec;if(!SceneManager[_0x10b7a8(0xa2b)]())return;if(!Imported[_0x10b7a8(0x161)])return;VisuMZ[_0x10b7a8(0x44f)](_0x461049,_0x461049);const _0x487a81=$gameTemp[_0x10b7a8(0x9c5)](),_0x55cae2=_0x461049[_0x10b7a8(0x7ee)];if(!_0x487a81)return;$gameScreen[_0x10b7a8(0x3ba)](0x1,_0x461049[_0x10b7a8(0x603)],_0x461049['EasingType']);if(_0x55cae2)_0x487a81[_0x10b7a8(0x415)]('battleZoom');}),PluginManager[_0x2dcaec(0x1a8)](pluginData[_0x2dcaec(0x321)],_0x2dcaec(0x5be),_0x2b7b3a=>{const _0x18c429=_0x2dcaec;if(!SceneManager[_0x18c429(0xa2b)]())return;if(!Imported[_0x18c429(0x161)])return;const _0x56f769=$gameTemp[_0x18c429(0x9c5)]();if(!_0x56f769)return;_0x56f769['setWaitMode'](_0x18c429(0x6aa));}),VisuMZ['BattleCore'][_0x2dcaec(0x32a)]=Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0xa50)],Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0xa50)]=function(){const _0x33947b=_0x2dcaec;this[_0x33947b(0x3c8)](),this[_0x33947b(0x368)](),this[_0x33947b(0xb8e)](),this['process_VisuMZ_BattleCore_CreateRegExp'](),VisuMZ[_0x33947b(0xae3)][_0x33947b(0x32a)][_0x33947b(0x390)](this),this[_0x33947b(0xbdb)](),this[_0x33947b(0x1ec)](),this[_0x33947b(0x2aa)](),this[_0x33947b(0xab8)]();},Scene_Boot[_0x2dcaec(0xaf6)]['process_VisuMZ_BattleCore_Notetags']=function(){const _0x4d83b0=_0x2dcaec;if(VisuMZ['ParseAllNotetags'])return;this[_0x4d83b0(0x3e9)](),this[_0x4d83b0(0x421)](),this[_0x4d83b0(0x81a)]();},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0x3c8)]=function(){const _0x4f8aee=_0x2dcaec,_0x3d45df=$dataSystem[_0x4f8aee(0x670)][_0x4f8aee(0x7ce)];for(let _0x30b3b2=0x0;_0x30b3b2<_0x3d45df;_0x30b3b2++){const _0x59560c=$dataSystem[_0x4f8aee(0x861)][_0x30b3b2];if(_0x59560c)continue;$dataSystem[_0x4f8aee(0x861)][_0x30b3b2]={'type':0x1,'weaponImageId':0x1};}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_PluginParams']=function(){const _0x477b83=_0x2dcaec,_0x58a613=VisuMZ['BattleCore'][_0x477b83(0xbeb)];_0x58a613[_0x477b83(0x53c)][_0x477b83(0xbc3)]===undefined&&(_0x58a613['Damage']['PopupPosition']=_0x477b83(0xb6c)),_0x58a613[_0x477b83(0x46b)][_0x477b83(0xacf)]===undefined&&(_0x58a613[_0x477b83(0x46b)][_0x477b83(0xacf)]=![]),_0x58a613[_0x477b83(0xc36)]['SmoothImage']===undefined&&(_0x58a613[_0x477b83(0xc36)][_0x477b83(0xacf)]=!![]),_0x58a613['Actor'][_0x477b83(0xb26)]===undefined&&(_0x58a613[_0x477b83(0x46b)][_0x477b83(0xb26)]=![]),_0x58a613[_0x477b83(0x46b)][_0x477b83(0x76e)]===undefined&&(_0x58a613[_0x477b83(0x46b)][_0x477b83(0x76e)]=!![]);},VisuMZ[_0x2dcaec(0x4c1)]={},Scene_Boot['prototype'][_0x2dcaec(0xb8e)]=function(){const _0x49cb2c=_0x2dcaec;for(const _0x5051ec of VisuMZ[_0x49cb2c(0xae3)][_0x49cb2c(0xbeb)][_0x49cb2c(0x53c)][_0x49cb2c(0x31d)]){if(!_0x5051ec)continue;const _0x2b326b=_0x5051ec['Name'][_0x49cb2c(0xb9f)]()[_0x49cb2c(0x651)]();VisuMZ[_0x49cb2c(0x4c1)][_0x2b326b]=_0x5051ec;}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xaea)]={'jsAccuracy':/<JS (?:ACCURACY|ACC|HIT|EVA)>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA)>/i,'jsAccuracyAsUser':/<JS (?:ACCURACY|ACC|HIT|EVA) AS USER>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS USER>/i,'jsAccuracyAsTarget':/<JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:ACCURACY|ACC|HIT|EVA) AS TARGET>/i,'jsCritRateAsUser':/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i,'jsCritRateAsTarget':/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0x780)]=function(){const _0x273fcf=_0x2dcaec,_0x37254d=VisuMZ[_0x273fcf(0xae3)][_0x273fcf(0xaea)],_0x16a698=_0x273fcf(0x8d1),_0x8dd50d=[[_0x273fcf(0xa22),_0x273fcf(0x794)],[_0x273fcf(0x95f),'POST-']],_0x5cd131=[[_0x273fcf(0xb3e),'JS\x20%1APPLY\x20%2'],[_0x273fcf(0xbcb),_0x273fcf(0x6de)]],_0x3b3370=[['',''],[_0x273fcf(0xb91),'AS\x20USER'],[_0x273fcf(0x7d0),_0x273fcf(0xa5c)]];for(const _0xff6d83 of _0x5cd131){for(const _0x3cde82 of _0x3b3370){for(const _0xcfe690 of _0x8dd50d){const _0x3cbb8a=_0xff6d83[0x0][_0x273fcf(0xb60)](_0xcfe690[0x0],_0x3cde82[0x0]),_0x418d20=_0xff6d83[0x1][_0x273fcf(0xb60)](_0xcfe690[0x1],_0x3cde82[0x1])[_0x273fcf(0x651)](),_0x47f730=new RegExp(_0x16a698['format'](_0x418d20),'i');_0x37254d[_0x3cbb8a]=_0x47f730;}}}const _0x550a27=[[_0x273fcf(0x99c),_0x273fcf(0x50a)],[_0x273fcf(0x706),_0x273fcf(0x987)]];for(const _0x11b587 of _0x550a27){for(const _0x2d7e45 of _0x8dd50d){const _0x5e7b16=_0x11b587[0x0]['format'](_0x2d7e45[0x0]),_0x511dba=_0x11b587[0x1][_0x273fcf(0xb60)](_0x2d7e45[0x1]),_0x1b36a4=new RegExp(_0x16a698[_0x273fcf(0xb60)](_0x511dba),'i');_0x37254d[_0x5e7b16]=_0x1b36a4;}}const _0x3a6eaf=[['%1StartBattleJS',_0x273fcf(0x2b9)],['%1EndBattleJS',_0x273fcf(0xb37)],[_0x273fcf(0xa62),'JS\x20BATTLE\x20VICTORY'],['BattleDefeatJS',_0x273fcf(0x60f)],[_0x273fcf(0x578),_0x273fcf(0x583)],['EscapeFailureJS',_0x273fcf(0x61c)],[_0x273fcf(0x308),_0x273fcf(0x8c3)],[_0x273fcf(0x169),_0x273fcf(0x75f)],[_0x273fcf(0xb58),_0x273fcf(0x722)]];for(const _0x2249b5 of _0x3a6eaf){for(const _0x1230ca of _0x8dd50d){const _0x273c41=_0x2249b5[0x0][_0x273fcf(0xb60)](_0x1230ca[0x0]),_0x3409ea=_0x2249b5[0x1][_0x273fcf(0xb60)](_0x1230ca[0x1]),_0x1ba63a=new RegExp(_0x16a698[_0x273fcf(0xb60)](_0x3409ea),'i');_0x37254d[_0x273c41]=_0x1ba63a;}}},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0x3e9)]=function(){const _0x3635e6=_0x2dcaec,_0x230f0e=$dataSkills[_0x3635e6(0xa5b)]($dataItems);for(const _0x2f95a1 of _0x230f0e){if(!_0x2f95a1)continue;VisuMZ[_0x3635e6(0xae3)]['Parse_Notetags_Action'](_0x2f95a1);}},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0x421)]=function(){const _0x2169dc=_0x2dcaec,_0x12aace=$dataActors[_0x2169dc(0xa5b)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0xf90a41 of _0x12aace){if(!_0xf90a41)continue;VisuMZ[_0x2169dc(0xae3)][_0x2169dc(0x9aa)](_0xf90a41),_0xf90a41[_0x2169dc(0x48d)]!==undefined&&VisuMZ[_0x2169dc(0xae3)][_0x2169dc(0x802)](_0xf90a41);}},Scene_Boot[_0x2dcaec(0xaf6)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x4f0ab6=_0x2dcaec,_0x4f8a66=VisuMZ[_0x4f0ab6(0xae3)]['Settings'][_0x4f0ab6(0x41e)]['BaseTroopIDs'],_0x532b10=[];for(const _0x3ad70e of _0x4f8a66){const _0x473e21=$dataTroops[_0x3ad70e];if(_0x473e21)_0x532b10['push'](JsonEx[_0x4f0ab6(0xa12)](_0x473e21));}for(const _0x1ebac4 of $dataTroops){if(!_0x1ebac4)continue;for(const _0x19ff40 of _0x532b10){if(_0x19ff40['id']===_0x1ebac4['id'])continue;_0x1ebac4['pages']=_0x1ebac4[_0x4f0ab6(0x459)]['concat'](_0x19ff40[_0x4f0ab6(0x459)]);}}},Scene_Boot['prototype'][_0x2dcaec(0x2aa)]=function(){const _0x2c6c83=_0x2dcaec,_0x150296=VisuMZ[_0x2c6c83(0xae3)]['Settings']['Mechanics'];if(_0x150296['BattleStartEvent']>0x0&&$dataCommonEvents[_0x150296[_0x2c6c83(0x745)]]){const _0x20d617=$dataCommonEvents[_0x150296[_0x2c6c83(0x745)]],_0x59bacb=_0x20d617[_0x2c6c83(0x97c)][_0x2c6c83(0x7ce)]-0x2,_0x5dd0bf=_0x20d617[_0x2c6c83(0x97c)][_0x59bacb];if(_0x5dd0bf&&_0x5dd0bf[_0x2c6c83(0x812)]!==0xe6){const _0x569201={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x2b1e03=_0x20d617['list'][_0x2c6c83(0x8ed)]();_0x20d617[_0x2c6c83(0x97c)][_0x2c6c83(0xc48)](_0x569201),_0x20d617[_0x2c6c83(0x97c)][_0x2c6c83(0xc48)](_0x2b1e03);}}},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0xab8)]=function(){const _0x581ebf=_0x2dcaec;VisuMZ[_0x581ebf(0xae3)][_0x581ebf(0x899)](),VisuMZ['BattleCore'][_0x581ebf(0x93d)]($dataSkills),VisuMZ[_0x581ebf(0xae3)][_0x581ebf(0x93d)]($dataItems);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x899)]=function(){const _0x2e9282=_0x2dcaec;VisuMZ[_0x2e9282(0xae3)]['_commonEventKey']={};for(const _0x333135 of $dataCommonEvents){if(!_0x333135)continue;if(_0x333135[_0x2e9282(0x321)][_0x2e9282(0xb9e)](/\[(.*)\]/i)){let _0x56eb71=String(RegExp['$1'])[_0x2e9282(0x1d3)](/,/g,'')[_0x2e9282(0xb9f)]()[_0x2e9282(0x651)]();VisuMZ[_0x2e9282(0xae3)][_0x2e9282(0x3b9)][_0x56eb71]=_0x333135['id'];}}},VisuMZ[_0x2dcaec(0xae3)]['BindCommonEventKeysForGroup']=function(_0x1386b0){const _0x386252=_0x2dcaec;for(const _0x1f8dc8 of _0x1386b0){if(!_0x1f8dc8)continue;VisuMZ[_0x386252(0xae3)][_0x386252(0x874)](_0x1f8dc8);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x874)]=function(_0xef9d64){const _0x54c537=_0x2dcaec;if(!_0xef9d64)return;if(!_0xef9d64['effects'])return;VisuMZ[_0x54c537(0xae3)][_0x54c537(0x3b9)]=VisuMZ[_0x54c537(0xae3)][_0x54c537(0x3b9)]||{};const _0x308414=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x59f2ee=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x5eee66=[];const _0x2322b2=_0xef9d64[_0x54c537(0x795)]['match'](_0x308414);if(_0x2322b2){for(const _0x1b327a of _0x2322b2){_0x1b327a[_0x54c537(0xb9e)](_0x308414);const _0x345abd=String(RegExp['$1'])['split'](',')[_0x54c537(0xc20)](_0x3fcca1=>String(_0x3fcca1)[_0x54c537(0xb9f)]()['trim']());_0x5eee66=_0x5eee66['concat'](_0x345abd);}!_0xef9d64[_0x54c537(0x795)][_0x54c537(0xb9e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xef9d64[_0x54c537(0x795)]+=_0x54c537(0x78a));;}if(_0xef9d64[_0x54c537(0x795)][_0x54c537(0xb9e)](_0x59f2ee)){const _0x34216f=String(RegExp['$1'])[_0x54c537(0x13b)](/[\r\n]+/)[_0x54c537(0xc20)](_0x144cc6=>String(_0x144cc6)[_0x54c537(0xb9f)]()['trim']());_0x5eee66=_0x5eee66[_0x54c537(0xa5b)](_0x34216f);!_0xef9d64['note'][_0x54c537(0xb9e)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xef9d64[_0x54c537(0x795)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}for(const _0x5de9f5 of _0x5eee66){if(VisuMZ[_0x54c537(0xae3)][_0x54c537(0x3b9)][_0x5de9f5]){const _0x1bd4fd=VisuMZ[_0x54c537(0xae3)][_0x54c537(0x3b9)][_0x5de9f5],_0xf02fdc={'code':0x2c,'dataId':_0x1bd4fd,'value1':0x1,'value2':0x0};_0xef9d64[_0x54c537(0xb29)][_0x54c537(0x190)](_0xf02fdc);}}},Scene_Boot[_0x2dcaec(0xaf6)][_0x2dcaec(0x81a)]=function(){const _0x52f71c=_0x2dcaec,_0x725baa=$dataSkills[_0x52f71c(0xa5b)]($dataItems);for(const _0x3a446c of _0x725baa){if(!_0x3a446c)continue;VisuMZ[_0x52f71c(0xae3)][_0x52f71c(0xb99)](_0x3a446c);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x456)]=VisuMZ['ParseActorNotetags'],VisuMZ[_0x2dcaec(0x456)]=function(_0x34feef){const _0x134b70=_0x2dcaec;VisuMZ[_0x134b70(0xae3)][_0x134b70(0x456)]&&VisuMZ[_0x134b70(0xae3)][_0x134b70(0x456)][_0x134b70(0x390)](this,_0x34feef),VisuMZ[_0x134b70(0xae3)][_0x134b70(0x9aa)](_0x34feef);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x638)]=VisuMZ[_0x2dcaec(0x638)],VisuMZ[_0x2dcaec(0x638)]=function(_0x911503){const _0x4c1f47=_0x2dcaec;VisuMZ[_0x4c1f47(0xae3)][_0x4c1f47(0x638)]&&VisuMZ[_0x4c1f47(0xae3)][_0x4c1f47(0x638)][_0x4c1f47(0x390)](this,_0x911503),VisuMZ[_0x4c1f47(0xae3)][_0x4c1f47(0x9aa)](_0x911503);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8bd)]=VisuMZ[_0x2dcaec(0x8bd)],VisuMZ[_0x2dcaec(0x8bd)]=function(_0x279328){const _0x13c712=_0x2dcaec;VisuMZ[_0x13c712(0xae3)]['ParseSkillNotetags']&&VisuMZ['BattleCore'][_0x13c712(0x8bd)][_0x13c712(0x390)](this,_0x279328),VisuMZ['BattleCore'][_0x13c712(0xae4)](_0x279328),VisuMZ[_0x13c712(0xae3)][_0x13c712(0xb99)](_0x279328);},VisuMZ['BattleCore'][_0x2dcaec(0x9ba)]=VisuMZ['ParseItemNotetags'],VisuMZ['ParseItemNotetags']=function(_0x2889c0){const _0x21ee93=_0x2dcaec;VisuMZ[_0x21ee93(0xae3)][_0x21ee93(0x9ba)]&&VisuMZ[_0x21ee93(0xae3)][_0x21ee93(0x9ba)][_0x21ee93(0x390)](this,_0x2889c0),VisuMZ[_0x21ee93(0xae3)]['Parse_Notetags_Action'](_0x2889c0),VisuMZ[_0x21ee93(0xae3)]['Parse_Notetags_Targets'](_0x2889c0);},VisuMZ[_0x2dcaec(0xae3)]['ParseWeaponNotetags']=VisuMZ[_0x2dcaec(0x42b)],VisuMZ[_0x2dcaec(0x42b)]=function(_0x5cabbf){const _0x3c2146=_0x2dcaec;VisuMZ[_0x3c2146(0xae3)][_0x3c2146(0x42b)]&&VisuMZ[_0x3c2146(0xae3)][_0x3c2146(0x42b)][_0x3c2146(0x390)](this,_0x5cabbf),VisuMZ[_0x3c2146(0xae3)][_0x3c2146(0x9aa)](_0x5cabbf);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x479)]=VisuMZ[_0x2dcaec(0x479)],VisuMZ[_0x2dcaec(0x479)]=function(_0x2bdc02){const _0x4210ed=_0x2dcaec;VisuMZ['BattleCore']['ParseArmorNotetags']&&VisuMZ[_0x4210ed(0xae3)]['ParseArmorNotetags'][_0x4210ed(0x390)](this,_0x2bdc02),VisuMZ['BattleCore'][_0x4210ed(0x9aa)](_0x2bdc02);},VisuMZ[_0x2dcaec(0xae3)]['ParseEnemyNotetags']=VisuMZ[_0x2dcaec(0x66b)],VisuMZ[_0x2dcaec(0x66b)]=function(_0x42cb54){const _0x4334ac=_0x2dcaec;VisuMZ['BattleCore']['ParseEnemyNotetags']&&VisuMZ[_0x4334ac(0xae3)][_0x4334ac(0x66b)][_0x4334ac(0x390)](this,_0x42cb54),VisuMZ[_0x4334ac(0xae3)][_0x4334ac(0x9aa)](_0x42cb54);},VisuMZ[_0x2dcaec(0xae3)]['ParseStateNotetags']=VisuMZ[_0x2dcaec(0x52c)],VisuMZ['ParseStateNotetags']=function(_0x3da83e){const _0x2cd58f=_0x2dcaec;VisuMZ[_0x2cd58f(0xae3)][_0x2cd58f(0x52c)]&&VisuMZ[_0x2cd58f(0xae3)][_0x2cd58f(0x52c)][_0x2cd58f(0x390)](this,_0x3da83e),VisuMZ[_0x2cd58f(0xae3)][_0x2cd58f(0x9aa)](_0x3da83e),VisuMZ['BattleCore']['Parse_Notetags_HelpDescription'](_0x3da83e);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xae4)]=function(_0xe2455d){const _0x1da03d=_0x2dcaec,_0x39745f=[_0x1da03d(0x259),'PostApplyJS',_0x1da03d(0x15e),_0x1da03d(0x9fa),_0x1da03d(0xb3f),_0x1da03d(0x3ac),_0x1da03d(0xa89),_0x1da03d(0x14e)];for(const _0x2ad4ba of _0x39745f){VisuMZ['BattleCore'][_0x1da03d(0x3c1)](_0xe2455d,_0x2ad4ba);}const _0x4a404c=_0xe2455d[_0x1da03d(0x795)];_0x4a404c[_0x1da03d(0xb9e)](/<ALWAYS CRITICAL/i)&&(_0xe2455d[_0x1da03d(0x63e)][_0x1da03d(0x73b)]=!![]),_0x4a404c[_0x1da03d(0xb9e)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0xe2455d[_0x1da03d(0x5a5)]=Math[_0x1da03d(0x959)](0x1,Number(RegExp['$1']))),_0x4a404c[_0x1da03d(0xb9e)](/<TARGET:[ ](.*)>/i)&&(_0xe2455d[_0x1da03d(0x147)]=String(RegExp['$1'])[_0x1da03d(0xb9f)]()[_0x1da03d(0x651)]());},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9aa)]=function(_0x5dfdce){const _0x17d2a7=_0x2dcaec,_0x57e5b7=[_0x17d2a7(0x492),_0x17d2a7(0x730),'PreDamageAsUserJS',_0x17d2a7(0x4b3),_0x17d2a7(0xba8),_0x17d2a7(0x288),_0x17d2a7(0x989),'PostDamageAsTargetJS',_0x17d2a7(0xb3f),'PostStartActionJS',_0x17d2a7(0xa89),'PostEndActionJS',_0x17d2a7(0x9ad),_0x17d2a7(0xa53),'PreEndBattleJS',_0x17d2a7(0x227),_0x17d2a7(0xa62),_0x17d2a7(0x3b7),_0x17d2a7(0x578),_0x17d2a7(0xaeb),_0x17d2a7(0x892),_0x17d2a7(0x29f),_0x17d2a7(0xb14),_0x17d2a7(0x531),_0x17d2a7(0xa24),_0x17d2a7(0x653)];for(const _0x558dd5 of _0x57e5b7){VisuMZ[_0x17d2a7(0xae3)][_0x17d2a7(0x3c1)](_0x5dfdce,_0x558dd5);}const _0x128570=['jsAccuracy',_0x17d2a7(0x24d),'jsAccuracyAsTarget',_0x17d2a7(0x438),_0x17d2a7(0x809)];for(const _0x15363f of _0x128570){VisuMZ['BattleCore'][_0x17d2a7(0x1bc)](_0x5dfdce,_0x15363f);}},VisuMZ['BattleCore']['Parse_Notetags_Targets']=function(_0x5b747a){const _0x50a9b7=_0x2dcaec,_0x1d8c5a=_0x5b747a[_0x50a9b7(0x795)];if(_0x1d8c5a[_0x50a9b7(0xb9e)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x5b318d=String(RegExp['$1']),_0x49b31c=VisuMZ[_0x50a9b7(0xae3)][_0x50a9b7(0x2a1)](_0x5b747a,_0x50a9b7(0xad6));VisuMZ['BattleCore'][_0x50a9b7(0x50e)](_0x5b318d,_0x49b31c);}if(_0x1d8c5a[_0x50a9b7(0xb9e)](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x3f15af=String(RegExp['$1']),_0x306035=VisuMZ[_0x50a9b7(0xae3)][_0x50a9b7(0x2a1)](_0x5b747a,_0x50a9b7(0x7e2));VisuMZ[_0x50a9b7(0xae3)][_0x50a9b7(0x2b6)](_0x3f15af,_0x306035);}},VisuMZ[_0x2dcaec(0xae3)]['JS']={},VisuMZ['BattleCore'][_0x2dcaec(0x3c1)]=function(_0x461feb,_0x4bbc0f){const _0x2f4177=_0x2dcaec,_0x23190a=_0x461feb[_0x2f4177(0x795)];if(_0x23190a[_0x2f4177(0xb9e)](VisuMZ['BattleCore']['RegExp'][_0x4bbc0f])){const _0x169c23=RegExp['$1'],_0x30625c=_0x2f4177(0xc2f)[_0x2f4177(0xb60)](_0x169c23),_0x29b16a=VisuMZ[_0x2f4177(0xae3)]['createKeyJS'](_0x461feb,_0x4bbc0f);VisuMZ['BattleCore']['JS'][_0x29b16a]=new Function(_0x30625c);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2a1)]=function(_0x518411,_0x1aeadf){const _0x14b770=_0x2dcaec;if(VisuMZ[_0x14b770(0x2a1)])return VisuMZ['createKeyJS'](_0x518411,_0x1aeadf);let _0xeb8ab5='';if($dataActors[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5='Actor-%1-%2'[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataClasses[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0x7f9)[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataSkills[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0xac1)['format'](_0x518411['id'],_0x1aeadf);if($dataItems[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5='Item-%1-%2'[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataWeapons[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0x140)[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataArmors[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0xc6e)[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataEnemies[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0x534)[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);if($dataStates[_0x14b770(0x7f2)](_0x518411))_0xeb8ab5=_0x14b770(0xb67)[_0x14b770(0xb60)](_0x518411['id'],_0x1aeadf);return _0xeb8ab5;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x50e)]=function(_0x1bae86,_0x5626df){const _0x1bd5ac=_0x2dcaec,_0x597974=_0x1bd5ac(0x979)[_0x1bd5ac(0xb60)](_0x1bae86);VisuMZ[_0x1bd5ac(0xae3)]['JS'][_0x5626df]=new Function(_0x597974);},VisuMZ['BattleCore'][_0x2dcaec(0x2b6)]=function(_0xfec423,_0x46cba2){const _0x476ad8=_0x2dcaec,_0xf84a1d=_0x476ad8(0x199)['format'](_0xfec423);VisuMZ[_0x476ad8(0xae3)]['JS'][_0x46cba2]=new Function(_0xf84a1d);},VisuMZ['BattleCore'][_0x2dcaec(0x1bc)]=function(_0x204a53,_0xeebafe){const _0x4088a3=_0x2dcaec,_0x448044=_0x204a53[_0x4088a3(0x795)];if(_0x448044[_0x4088a3(0xb9e)](VisuMZ[_0x4088a3(0xae3)][_0x4088a3(0xaea)][_0xeebafe])){const _0x14af06=RegExp['$1'],_0x5426eb=_0x4088a3(0x8eb)[_0x4088a3(0xb60)](_0x14af06),_0x4329a8=VisuMZ['BattleCore'][_0x4088a3(0x2a1)](_0x204a53,_0xeebafe);VisuMZ['BattleCore']['JS'][_0x4329a8]=new Function(_0x5426eb);}},VisuMZ[_0x2dcaec(0xae3)]['Parse_Notetags_HelpDescription']=function(_0x146f43){const _0x8149ab=_0x2dcaec;_0x146f43[_0x8149ab(0x7c3)]='-';const _0x585639=_0x146f43['note'];_0x585639[_0x8149ab(0xb9e)](/<(?:HELP|HELP DESCRIPTION|DESCRIPTION)>\s*([\s\S]*)\s*<\/(?:HELP|HELP DESCRIPTION|DESCRIPTION)>/i)&&(_0x146f43[_0x8149ab(0x7c3)]=String(RegExp['$1'])['trim']()),_0x585639['match'](/<(?:IN-BATTLE |)STATUS DESCRIPTION>\s*([\s\S]*)\s*<\/(?:IN-BATTLE |)STATUS DESCRIPTION>/i)&&(_0x146f43[_0x8149ab(0xa14)]=String(RegExp['$1'])[_0x8149ab(0x651)]()),_0x585639[_0x8149ab(0xb9e)](/<EXCLUDE FROM (?:HELP|STATUS|STATUS LIST|LISTING|STATUS LISTING)>/i)&&(_0x146f43[_0x8149ab(0x56a)]=!![]);},TextManager['autoBattle']=VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x586)][_0x2dcaec(0xc27)],TextManager['autoBattleStart']=VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0xaec)][_0x2dcaec(0x843)],TextManager['autoBattleStyle']=VisuMZ['BattleCore']['Settings']['AutoBattle'][_0x2dcaec(0x89c)],TextManager[_0x2dcaec(0x4ce)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x2bb)][_0x2dcaec(0x3e0)],ColorManager['getColor']=function(_0x47689d){const _0x2c101=_0x2dcaec;return _0x47689d=String(_0x47689d),_0x47689d[_0x2c101(0xb9e)](/#(.*)/i)?_0x2c101(0x687)['format'](String(RegExp['$1'])):this[_0x2c101(0x33d)](Number(_0x47689d));},DataManager[_0x2dcaec(0x47f)]=function(_0x275330){const _0x4fe736=_0x2dcaec;if(_0x275330['note'][_0x4fe736(0xb9e)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x202f4b=String(RegExp['$1'])[_0x4fe736(0xb9f)]()[_0x4fe736(0x651)]();if(_0x202f4b==='MANUAL')return _0x4fe736(0x45d);if(VisuMZ['DamageStyles'][_0x202f4b])return _0x202f4b;}const _0x5d7217=VisuMZ[_0x4fe736(0xae3)]['Settings'][_0x4fe736(0x53c)][_0x4fe736(0x481)][_0x4fe736(0xb9f)]()[_0x4fe736(0x651)]();if(VisuMZ['DamageStyles'][_0x5d7217])return _0x5d7217;return'MANUAL';},DataManager[_0x2dcaec(0x51b)]=function(_0x246d80){const _0x52eafe=_0x2dcaec;_0x246d80=_0x246d80['toUpperCase']()['trim'](),this[_0x52eafe(0x98b)]=this[_0x52eafe(0x98b)]||{};if(this[_0x52eafe(0x98b)][_0x246d80])return this['_stypeIDs'][_0x246d80];for(let _0x4ed696=0x1;_0x4ed696<0x64;_0x4ed696++){if(!$dataSystem[_0x52eafe(0xa55)][_0x4ed696])continue;let _0x20967e=$dataSystem[_0x52eafe(0xa55)][_0x4ed696][_0x52eafe(0xb9f)]()[_0x52eafe(0x651)]();_0x20967e=_0x20967e[_0x52eafe(0x1d3)](/\x1I\[(\d+)\]/gi,''),_0x20967e=_0x20967e['replace'](/\\I\[(\d+)\]/gi,''),this[_0x52eafe(0x98b)][_0x20967e]=_0x4ed696;}return this[_0x52eafe(0x98b)][_0x246d80]||0x0;},DataManager['getSkillIdWithName']=function(_0x49268e){const _0x48dc47=_0x2dcaec;_0x49268e=_0x49268e[_0x48dc47(0xb9f)]()['trim'](),this['_skillIDs']=this[_0x48dc47(0x1f0)]||{};if(this['_skillIDs'][_0x49268e])return this['_skillIDs'][_0x49268e];for(const _0x3b0079 of $dataSkills){if(!_0x3b0079)continue;this[_0x48dc47(0x1f0)][_0x3b0079[_0x48dc47(0x321)]['toUpperCase']()[_0x48dc47(0x651)]()]=_0x3b0079['id'];}return this[_0x48dc47(0x1f0)][_0x49268e]||0x0;},DataManager[_0x2dcaec(0xc5a)]=function(_0x1e939a){const _0x1a1960=_0x2dcaec;_0x1e939a=_0x1e939a[_0x1a1960(0xb9f)]()['trim'](),this[_0x1a1960(0x30d)]=this[_0x1a1960(0x30d)]||{};if(this['_enemyIDs'][_0x1e939a])return this['_enemyIDs'][_0x1e939a];for(const _0x20b546 of $dataEnemies){if(!_0x20b546)continue;this[_0x1a1960(0x30d)][_0x20b546[_0x1a1960(0x321)][_0x1a1960(0xb9f)]()[_0x1a1960(0x651)]()]=_0x20b546['id'];}return this[_0x1a1960(0x30d)][_0x1e939a]||0x0;},DataManager[_0x2dcaec(0xac6)]=function(_0x5044e4){const _0x4ad8d0=_0x2dcaec;_0x5044e4=_0x5044e4[_0x4ad8d0(0xb9f)]()[_0x4ad8d0(0x651)](),this[_0x4ad8d0(0x33c)]=this['_wtypeIDs']||{};if(this['_wtypeIDs'][_0x5044e4])return this[_0x4ad8d0(0x33c)][_0x5044e4];for(let _0x3956a6=0x1;_0x3956a6<0x64;_0x3956a6++){if(!$dataSystem[_0x4ad8d0(0x670)][_0x3956a6])continue;let _0x346696=$dataSystem[_0x4ad8d0(0x670)][_0x3956a6][_0x4ad8d0(0xb9f)]()['trim']();_0x346696=_0x346696[_0x4ad8d0(0x1d3)](/\x1I\[(\d+)\]/gi,''),_0x346696=_0x346696['replace'](/\\I\[(\d+)\]/gi,''),this[_0x4ad8d0(0x33c)][_0x346696]=_0x3956a6;}return this[_0x4ad8d0(0x33c)][_0x4ad8d0(0x477)]=0x0,this[_0x4ad8d0(0x33c)][_0x5044e4]||0x0;},DataManager[_0x2dcaec(0x376)]=function(_0x807003){const _0xb067e0=_0x2dcaec,_0x2853db=_0xb067e0(0xa8b);let _0x2abaf8=_0x807003[_0xb067e0(0x448)],_0x13357e=_0x807003['name'];const _0x5f36f3=_0x807003[_0xb067e0(0x795)];return _0x5f36f3[_0xb067e0(0xb9e)](/<DISPLAY ICON: (\d+)>/i)&&(_0x2abaf8=Number(RegExp['$1'])),_0x5f36f3[_0xb067e0(0xb9e)](/<DISPLAY TEXT: (.*)>/i)&&(_0x13357e=String(RegExp['$1'])),_0x2853db[_0xb067e0(0xb60)](_0x2abaf8,_0x13357e);},DataManager[_0x2dcaec(0x7b6)]=function(_0xe4cf8){const _0x24e43d=_0x2dcaec;return _0xe4cf8[_0x24e43d(0x795)][_0x24e43d(0xb9e)](/<COMMAND TEXT: (.*)>/i)?String(RegExp['$1']):_0xe4cf8[_0x24e43d(0x321)];},DataManager[_0x2dcaec(0x8ad)]=function(_0x3a70db){const _0x2cc6fe=_0x2dcaec;return _0x3a70db[_0x2cc6fe(0x795)][_0x2cc6fe(0xb9e)](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x3a70db[_0x2cc6fe(0x448)];},DataManager[_0x2dcaec(0x6cd)]=function(_0x291b73){const _0x1faac5=_0x2dcaec,_0x2cdfde=$dataEnemies[_0x291b73];if(_0x2cdfde){if(_0x2cdfde['note'][_0x1faac5(0xb9e)](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x2f7084=String(RegExp['$1'])[_0x1faac5(0x13b)](/[\r\n]+/)[_0x1faac5(0xb8d)](''),_0x142920=this[_0x1faac5(0x3ae)](_0x2f7084);_0x291b73=this[_0x1faac5(0xc5a)](_0x142920)||_0x291b73,_0x291b73=DataManager[_0x1faac5(0x6cd)](_0x291b73);}}return _0x291b73;},DataManager[_0x2dcaec(0x3ae)]=function(_0x2973e0){const _0x1d068a=_0x2dcaec;let _0x465604=0x0;const _0x12d047={};for(const _0x52f5ff of _0x2973e0){if(_0x52f5ff['match'](/(.*):[ ](\d+)/i)){const _0x6bc7ac=String(RegExp['$1'])[_0x1d068a(0x651)](),_0x335f04=Number(RegExp['$2']);_0x12d047[_0x6bc7ac]=_0x335f04,_0x465604+=_0x335f04;}else{if(_0x52f5ff[_0x1d068a(0xb9e)](/(.*):[ ](\d+\.?\d+)/i)){const _0x442d8d=String(RegExp['$1'])[_0x1d068a(0x651)](),_0x50b8d2=Number(RegExp['$2']);_0x12d047[_0x442d8d]=_0x50b8d2,_0x465604+=_0x50b8d2;}else _0x52f5ff!==''&&(_0x12d047[_0x52f5ff]=0x1,_0x465604++);}}if(_0x465604<=0x0)return'';let _0x597b50=Math[_0x1d068a(0x7af)]()*_0x465604;for(const _0x5effb3 in _0x12d047){_0x597b50-=_0x12d047[_0x5effb3];if(_0x597b50<=0x0)return _0x5effb3;}return'';},DataManager[_0x2dcaec(0xb75)]=function(_0x2045b2){const _0x4088da=_0x2dcaec;if(!_0x2045b2)return![];if(!VisuMZ[_0x4088da(0xae3)][_0x4088da(0xbeb)][_0x4088da(0x709)][_0x4088da(0x96c)])return![];if(_0x2045b2['note'][_0x4088da(0xb9e)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x2045b2[_0x4088da(0x795)][_0x4088da(0xb9e)](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x247e81 of _0x2045b2[_0x4088da(0xb29)]){if(!_0x247e81)continue;if(_0x247e81['code']===Game_Action['EFFECT_COMMON_EVENT'])return!![];}return![];},DataManager[_0x2dcaec(0x2f7)]=function(_0x14ddd2){const _0x36bd05=_0x2dcaec,_0x3b75b1=$dataTroops[_0x14ddd2];if(!_0x3b75b1)return'';let _0x43d3c3='';_0x43d3c3+=_0x3b75b1[_0x36bd05(0x321)];for(const _0x3c7707 of _0x3b75b1['pages']){for(const _0x43f2db of _0x3c7707[_0x36bd05(0x97c)]){[0x6c,0x198][_0x36bd05(0x7f2)](_0x43f2db[_0x36bd05(0x812)])&&(_0x43d3c3+='\x0a',_0x43d3c3+=_0x43f2db[_0x36bd05(0x718)][0x0]);}}return _0x43d3c3;},ConfigManager[_0x2dcaec(0x7ff)]=ConfigManager[_0x2dcaec(0x7ff)]??![],ConfigManager[_0x2dcaec(0xbe9)]=ConfigManager[_0x2dcaec(0xbe9)]??![],ConfigManager[_0x2dcaec(0x4ce)]=ConfigManager[_0x2dcaec(0x4ce)]??!![],VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbe8)]=ConfigManager[_0x2dcaec(0x13f)],ConfigManager[_0x2dcaec(0x13f)]=function(){const _0x7d5f2b=_0x2dcaec,_0x17f635=VisuMZ[_0x7d5f2b(0xae3)][_0x7d5f2b(0xbe8)]['call'](this);return _0x17f635[_0x7d5f2b(0x7ff)]=this[_0x7d5f2b(0x7ff)],_0x17f635['autoBattleUseSkills']=this[_0x7d5f2b(0xbe9)],_0x17f635[_0x7d5f2b(0x4ce)]=this[_0x7d5f2b(0x4ce)],_0x17f635;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9bf)]=ConfigManager[_0x2dcaec(0x9b6)],ConfigManager[_0x2dcaec(0x9b6)]=function(_0x52c09d){const _0x9f9508=_0x2dcaec;VisuMZ[_0x9f9508(0xae3)]['ConfigManager_applyData'][_0x9f9508(0x390)](this,_0x52c09d),_0x9f9508(0x7ff)in _0x52c09d?this['autoBattleAtStart']=_0x52c09d[_0x9f9508(0x7ff)]:this['autoBattleAtStart']=![],_0x9f9508(0xbe9)in _0x52c09d?this[_0x9f9508(0xbe9)]=_0x52c09d[_0x9f9508(0xbe9)]:this[_0x9f9508(0xbe9)]=![],_0x9f9508(0x4ce)in _0x52c09d?this[_0x9f9508(0x4ce)]=_0x52c09d[_0x9f9508(0x4ce)]:this[_0x9f9508(0x4ce)]=!![];},ImageManager[_0x2dcaec(0x890)]=ImageManager[_0x2dcaec(0x890)]||0x9,ImageManager['svActorVertCells']=ImageManager[_0x2dcaec(0x4b8)]||0x6,VisuMZ['BattleCore'][_0x2dcaec(0x9a9)]=BattleManager[_0x2dcaec(0xb15)],BattleManager[_0x2dcaec(0xb15)]=function(_0x2bfdcd,_0xe11894,_0x46bd94){const _0x2fd7ea=_0x2dcaec;VisuMZ[_0x2fd7ea(0xae3)][_0x2fd7ea(0x9a9)][_0x2fd7ea(0x390)](this,_0x2bfdcd,_0xe11894,_0x46bd94),this[_0x2fd7ea(0xb64)]={};},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_initMembers']=BattleManager[_0x2dcaec(0xaab)],BattleManager[_0x2dcaec(0xaab)]=function(){const _0x3ed822=_0x2dcaec;VisuMZ[_0x3ed822(0xae3)][_0x3ed822(0x927)][_0x3ed822(0x390)](this),this[_0x3ed822(0x9f8)]=[];},BattleManager[_0x2dcaec(0xbac)]=function(){const _0x1020e6=_0x2dcaec;$subject=this['_subject'],$targets=this[_0x1020e6(0xa28)],$target=this[_0x1020e6(0xc39)]||this['_targets'][this[_0x1020e6(0xc26)]||0x0];},BattleManager[_0x2dcaec(0xc7b)]=function(){const _0x1bbcd0=_0x2dcaec;if(!SceneManager[_0x1bbcd0(0xa2b)]())return;const _0x74307b=SceneManager[_0x1bbcd0(0x496)][_0x1bbcd0(0x300)];if(_0x74307b)_0x74307b['requestRefresh']();},BattleManager['battleSys']=function(){const _0x2df873=_0x2dcaec;if(BattleManager[_0x2df873(0x17f)]())return'TPB';return'DTB';},BattleManager[_0x2dcaec(0x8ab)]=function(_0x57a43e){const _0x19d401=_0x2dcaec;return _0x57a43e=_0x57a43e[_0x19d401(0xb9f)]()[_0x19d401(0x651)](),this['battleSys']()===_0x57a43e;},BattleManager[_0x2dcaec(0x98a)]=function(){const _0x3c81f3=_0x2dcaec;return this[_0x3c81f3(0x8ab)]('DTB');},BattleManager['isTurnBased']=function(){const _0x282c87=_0x2dcaec;return this[_0x282c87(0x98a)]();},BattleManager[_0x2dcaec(0x5ec)]=function(){const _0x32d06a=_0x2dcaec;return!this[_0x32d06a(0x921)]();},BattleManager[_0x2dcaec(0x1cb)]=function(){const _0x3cb163=_0x2dcaec;return!this['isTurnBased']()&&!this[_0x3cb163(0x5ec)]();},BattleManager[_0x2dcaec(0x501)]=function(_0x2bb574){const _0x52753d=_0x2dcaec;this[_0x52753d(0xb64)]=this['_battlerKeyCache']||{};if(this[_0x52753d(0xb64)][_0x2bb574]!==undefined)return this['_battlerKeyCache'][_0x2bb574];this[_0x52753d(0xb64)][_0x2bb574]=null;const _0x12647e=this[_0x52753d(0xb96)](),_0x3842c5=_0x12647e['find'](_0x2b0044=>_0x2b0044['battlerKey']()===_0x2bb574);if(_0x3842c5)this['_battlerKeyCache'][_0x2bb574]=_0x3842c5;return this['_battlerKeyCache'][_0x2bb574];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x233)]=function(){const _0xbb251d=_0x2dcaec;return _0xbb251d(0x1d6)[_0xbb251d(0xb60)](this[_0xbb251d(0x8d6)]()?_0xbb251d(0x3fc):'enemy',this[_0xbb251d(0x321)]()+'-'+(this[_0xbb251d(0x8d6)]()?this[_0xbb251d(0x8f3)]():this[_0xbb251d(0x6fc)]()));},Game_Action['prototype'][_0x2dcaec(0x200)]=function(_0x2250a3){const _0x388752=_0x2dcaec;if(this[_0x388752(0x274)]!=='')return;typeof _0x2250a3==='string'?this['_targetBattlerKey']=_0x2250a3['toLowerCase']()[_0x388752(0x651)]():this[_0x388752(0x274)]=_0x2250a3[_0x388752(0x233)]();},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x325)]=function(){const _0x1cda0c=_0x2dcaec;return[this[_0x1cda0c(0x5c1)]()];},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x5c1)]=function(){const _0xf7c0ff=_0x2dcaec,_0x1f9fd5=this[_0xf7c0ff(0x274)]||'',_0x588c20=BattleManager['getBattlerFromKey'](_0x1f9fd5);if(!_0x588c20)return this[_0xf7c0ff(0x748)]();if(!_0x588c20[_0xf7c0ff(0x2b5)]())return this[_0xf7c0ff(0x748)]();return _0x588c20;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x748)]=function(){const _0x45780a=_0x2dcaec,_0x5482dd=this[_0x45780a(0x274)];return _0x5482dd[_0x45780a(0xb9e)](/ACTOR/i)?this[_0x45780a(0x630)]()[_0x45780a(0xada)]():this[_0x45780a(0x2f2)]()[_0x45780a(0xada)]();},BattleManager[_0x2dcaec(0x78c)]=function(){const _0x1d922d=_0x2dcaec;return this['allBattleMembers']()[_0x1d922d(0x5ed)](_0x359750=>_0x359750[_0x1d922d(0x72c)]());},BattleManager['processBattleCoreJS']=function(_0x3299c5){const _0x37017f=_0x2dcaec;_0x3299c5===_0x37017f(0xa62)&&(this['_endingBattle']=!![]),$gameParty[_0x37017f(0xbd1)](_0x3299c5),$gameTroop[_0x37017f(0xbd1)](_0x3299c5);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x22b)]=BattleManager[_0x2dcaec(0x453)],BattleManager[_0x2dcaec(0x453)]=function(){const _0x40e836=_0x2dcaec;this['_endBattle']=![],this[_0x40e836(0x91c)]=ConfigManager['autoBattleAtStart'],this['_endingBattle']=![],this[_0x40e836(0xbd1)](_0x40e836(0x9ad)),VisuMZ[_0x40e836(0xae3)]['BattleManager_startBattle']['call'](this),this[_0x40e836(0xbd1)](_0x40e836(0xa53));},BattleManager['processPostBattleCommonEvents']=function(_0x520e46){const _0x472e58=_0x2dcaec,_0x2fbd5b=VisuMZ['BattleCore'][_0x472e58(0xbeb)]['Mechanics'];_0x520e46!==_0x472e58(0x4da)&&_0x2fbd5b[_0x472e58(0x8fa)]&&VisuMZ['BattleCore']['CheckMapBattleEventValid'](_0x2fbd5b[_0x472e58(0x8fa)])&&$gameTemp[_0x472e58(0x72f)](_0x2fbd5b['BattleEndEvent']);const _0x54d395=_0x472e58(0xbcd)[_0x472e58(0xb60)](_0x520e46);_0x2fbd5b[_0x54d395]&&VisuMZ[_0x472e58(0xae3)][_0x472e58(0x53b)](_0x2fbd5b[_0x54d395])&&$gameTemp['reserveCommonEvent'](_0x2fbd5b[_0x54d395]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x616)]=BattleManager[_0x2dcaec(0x168)],BattleManager[_0x2dcaec(0x168)]=function(){const _0x16cab4=_0x2dcaec;VisuMZ['BattleCore'][_0x16cab4(0x616)]['call'](this),SceneManager['isSceneBattle']()&&BattleManager[_0x16cab4(0x6a7)]();},VisuMZ['BattleCore'][_0x2dcaec(0x548)]=BattleManager['checkBattleEnd'],BattleManager['checkBattleEnd']=function(){const _0x174acf=_0x2dcaec;if(this[_0x174acf(0x584)]===_0x174acf(0x5d3)){if($gameTemp[_0x174acf(0x29c)]())return![];}return VisuMZ['BattleCore'][_0x174acf(0x548)]['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x350)]=BattleManager['processVictory'],BattleManager['processVictory']=function(){const _0x12dc59=_0x2dcaec;this[_0x12dc59(0x4a7)]=!![],this[_0x12dc59(0xbd1)](_0x12dc59(0xa62)),VisuMZ['BattleCore'][_0x12dc59(0x350)][_0x12dc59(0x390)](this),this['processPostBattleCommonEvents'](_0x12dc59(0x572));},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_processAbort']=BattleManager[_0x2dcaec(0x930)],BattleManager['processAbort']=function(){const _0x2fdcb7=_0x2dcaec;this['_endingBattle']=!![],VisuMZ[_0x2fdcb7(0xae3)]['BattleManager_processAbort']['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc57)]=BattleManager[_0x2dcaec(0x2e7)],BattleManager['processDefeat']=function(){const _0x4636cb=_0x2dcaec;this['_endingBattle']=!![],this['processBattleCoreJS'](_0x4636cb(0x3b7)),VisuMZ[_0x4636cb(0xae3)][_0x4636cb(0xc57)]['call'](this),this[_0x4636cb(0x49a)](_0x4636cb(0x2dc));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2f4)]=BattleManager[_0x2dcaec(0x28a)],BattleManager['endBattle']=function(_0x5c18ca){const _0x291efd=_0x2dcaec;this[_0x291efd(0x434)]=!![],this[_0x291efd(0x91c)]=![],this[_0x291efd(0xbd1)](_0x291efd(0x61e)),VisuMZ[_0x291efd(0xae3)][_0x291efd(0x2f4)][_0x291efd(0x390)](this,_0x5c18ca),this[_0x291efd(0xbd1)](_0x291efd(0x227));},VisuMZ['BattleCore'][_0x2dcaec(0x903)]=BattleManager[_0x2dcaec(0x749)],BattleManager[_0x2dcaec(0x749)]=function(){const _0x2645dd=_0x2dcaec;if(this[_0x2645dd(0x921)]())this[_0x2645dd(0xbd1)](_0x2645dd(0x892));VisuMZ[_0x2645dd(0xae3)][_0x2645dd(0x903)]['call'](this);if(this[_0x2645dd(0x921)]())this[_0x2645dd(0xbd1)]('PostStartTurnJS');},BattleManager['processTurn']=function(){const _0xe74c2e=_0x2dcaec,_0xa7f3bf=this[_0xe74c2e(0x173)],_0x374543=_0xa7f3bf[_0xe74c2e(0x3ab)]();_0x374543?(_0x374543['prepare'](),_0x374543['isValid']()?(this[_0xe74c2e(0xa42)](),_0xa7f3bf[_0xe74c2e(0x5e3)]()):(_0xa7f3bf[_0xe74c2e(0x5e3)](),this[_0xe74c2e(0x773)]())):(this['endAction'](),this['_subject']=null);},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_startAction']=BattleManager['startAction'],BattleManager['startAction']=function(){const _0x25be08=_0x2dcaec,_0x531526=this['_subject'][_0x25be08(0x3ab)](),_0x4648fc=this[_0x25be08(0x173)];_0x531526&&_0x531526['subject']()===_0x4648fc&&_0x531526[_0x25be08(0x6f1)]('PreStartActionJS'),VisuMZ[_0x25be08(0xae3)][_0x25be08(0x99a)][_0x25be08(0x390)](this),_0x531526&&_0x531526[_0x25be08(0xafb)]()===_0x4648fc&&_0x531526['actionBattleCoreJS'](_0x25be08(0x3ac));},VisuMZ['BattleCore'][_0x2dcaec(0x261)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0xa9f472=_0x2dcaec,_0x4dcd71=this[_0xa9f472(0x151)],_0x56486e=this[_0xa9f472(0x173)];_0x4dcd71&&_0x4dcd71!==this[_0xa9f472(0x546)]&&_0x4dcd71[_0xa9f472(0xafb)]()===_0x56486e&&_0x4dcd71[_0xa9f472(0x6f1)](_0xa9f472(0xa89)),this[_0xa9f472(0x173)]?VisuMZ[_0xa9f472(0xae3)]['BattleManager_endAction'][_0xa9f472(0x390)](this):this[_0xa9f472(0x584)]=_0xa9f472(0x5d3),_0x4dcd71&&_0x4dcd71!==this[_0xa9f472(0x546)]&&_0x4dcd71['subject']()===_0x56486e&&_0x4dcd71[_0xa9f472(0x6f1)]('PostEndActionJS'),this[_0xa9f472(0xbde)](this[_0xa9f472(0xb96)]()),this[_0xa9f472(0x546)]=this[_0xa9f472(0x151)];},BattleManager['refreshBattlerMotions']=function(_0x3763d9){const _0x8a4b48=_0x2dcaec;for(const _0x418d1b of _0x3763d9){if(!_0x418d1b)continue;if(!_0x418d1b[_0x8a4b48(0xbc2)]())continue;_0x418d1b['battler']()[_0x8a4b48(0x5a4)]();}},BattleManager[_0x2dcaec(0x7e0)]=function(){const _0x71ed81=_0x2dcaec;!this[_0x71ed81(0x9a7)][_0x71ed81(0x4c7)]()&&this['endAction']();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x248)]=function(){const _0xbbc0fa=_0x2dcaec;this[_0xbbc0fa(0x85f)]();if(Imported[_0xbbc0fa(0xb3c)]){const _0x3f83ae=VisuMZ[_0xbbc0fa(0xc24)][_0xbbc0fa(0xbeb)][_0xbbc0fa(0x403)];_0x3f83ae&&_0x3f83ae[_0xbbc0fa(0x1a3)]===![]&&this[_0xbbc0fa(0x36f)](0x1);}else this['removeStatesAuto'](0x1);this['removeBuffsAuto']();},VisuMZ['BattleCore'][_0x2dcaec(0x1d5)]=BattleManager[_0x2dcaec(0x70d)],BattleManager['invokeCounterAttack']=function(_0x97675f,_0x4feaae){const _0x54e196=_0x2dcaec;this[_0x54e196(0xc7e)]=!![],VisuMZ['BattleCore']['BattleManager_invokeCounterAttack'][_0x54e196(0x390)](this,_0x97675f,_0x4feaae),this[_0x54e196(0xc7e)]=undefined;},BattleManager[_0x2dcaec(0x3ca)]=function(){const _0x2f2eab=_0x2dcaec;this[_0x2f2eab(0x9f1)]=VisuMZ[_0x2f2eab(0xae3)][_0x2f2eab(0xbeb)][_0x2f2eab(0x41e)]['CalcEscapeRatioJS'][_0x2f2eab(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x606)]=BattleManager[_0x2dcaec(0x778)],BattleManager[_0x2dcaec(0x778)]=function(){const _0x31822d=_0x2dcaec;this[_0x31822d(0xbd1)](_0x31822d(0x578)),BattleManager[_0x31822d(0x2a3)][_0x31822d(0x84c)](),VisuMZ[_0x31822d(0xae3)][_0x31822d(0x606)]['call'](this),this['processPostBattleCommonEvents'](_0x31822d(0x5eb));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6c3)]=BattleManager[_0x2dcaec(0x54e)],BattleManager[_0x2dcaec(0x54e)]=function(){const _0x335b37=_0x2dcaec;this[_0x335b37(0xbd1)]('EscapeFailureJS');const _0x11a0aa=this[_0x335b37(0x9f1)];VisuMZ['BattleCore'][_0x335b37(0x6c3)][_0x335b37(0x390)](this),this[_0x335b37(0x9f1)]=_0x11a0aa+VisuMZ[_0x335b37(0xae3)][_0x335b37(0xbeb)]['Mechanics'][_0x335b37(0x80f)]['call'](this),this[_0x335b37(0x4b9)]=![],this[_0x335b37(0x49a)](_0x335b37(0x4da));},BattleManager[_0x2dcaec(0x3c3)]=function(){const _0x42725e=_0x2dcaec;let _0x2732df=![];if(this[_0x42725e(0x6b2)]())for(const _0x437985 of $gameTroop[_0x42725e(0x8b0)]()){this[_0x42725e(0x9a7)][_0x42725e(0x190)](_0x42725e(0x59f),TextManager[_0x42725e(0x232)][_0x42725e(0xb60)](_0x437985)),this[_0x42725e(0x9a7)][_0x42725e(0x190)](_0x42725e(0x275)),_0x2732df=!![];}if(this[_0x42725e(0xb48)])this['_logWindow'][_0x42725e(0x190)](_0x42725e(0x59f),TextManager[_0x42725e(0x219)][_0x42725e(0xb60)]($gameParty['name']())),this[_0x42725e(0x9a7)][_0x42725e(0x190)]('wait');else this[_0x42725e(0xc1a)]&&(this['_logWindow'][_0x42725e(0x190)]('addText',TextManager[_0x42725e(0xc22)][_0x42725e(0xb60)]($gameParty[_0x42725e(0x321)]())),this[_0x42725e(0x9a7)][_0x42725e(0x190)]('wait'));_0x2732df&&(this['_logWindow'][_0x42725e(0x190)](_0x42725e(0x275)),this[_0x42725e(0x9a7)][_0x42725e(0x190)](_0x42725e(0xb7e))),this['isTpb']()&&this[_0x42725e(0x73f)]()&&(this[_0x42725e(0x4f9)]=![]);},BattleManager[_0x2dcaec(0x6b2)]=function(){const _0x263124=_0x2dcaec;if(BattleManager[_0x263124(0x91c)])return![];return VisuMZ[_0x263124(0xae3)][_0x263124(0xbeb)][_0x263124(0xc36)][_0x263124(0xba5)];},VisuMZ['BattleCore']['BattleManager_startInput']=BattleManager[_0x2dcaec(0xc72)],BattleManager[_0x2dcaec(0xc72)]=function(){const _0x4a9cfe=_0x2dcaec;VisuMZ[_0x4a9cfe(0xae3)][_0x4a9cfe(0x1c8)]['call'](this),this[_0x4a9cfe(0x98a)]()&&this[_0x4a9cfe(0x73f)]()&&!this[_0x4a9cfe(0xc1a)]&&$gameParty[_0x4a9cfe(0xc01)]()&&this['selectNextCommand']();},BattleManager['isSkipPartyCommandWindow']=function(){const _0x24fbf2=_0x2dcaec;return VisuMZ[_0x24fbf2(0xae3)][_0x24fbf2(0xbeb)][_0x24fbf2(0x586)]['SkipPartyCmd'];},BattleManager[_0x2dcaec(0x34b)]=function(){const _0x10cb6b=_0x2dcaec;this['isPartyTpbInputtable']()&&this[_0x10cb6b(0x66c)]();},VisuMZ['BattleCore'][_0x2dcaec(0x463)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x287)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x287)]=function(){const _0x42cdb4=_0x2dcaec;VisuMZ[_0x42cdb4(0xae3)][_0x42cdb4(0x463)][_0x42cdb4(0x390)](this),BattleManager[_0x42cdb4(0x17f)]()&&BattleManager[_0x42cdb4(0x4f9)]&&(BattleManager[_0x42cdb4(0x4f9)]=![],this[_0x42cdb4(0xac0)]());},BattleManager['emulateAction']=function(_0x7ee23e,_0x4673ff,_0x2807c1){const _0x2a0fbe=_0x2dcaec;if(!_0x2807c1)return;if(!_0x7ee23e)return;if(!_0x4673ff)return;const _0x2ce761=this[_0x2a0fbe(0x151)];this[_0x2a0fbe(0x151)]=new Game_Action(_0x7ee23e);if(DataManager[_0x2a0fbe(0x408)](_0x2807c1))this['_action'][_0x2a0fbe(0x235)](_0x2807c1['id']);if(DataManager[_0x2a0fbe(0x37d)](_0x2807c1))this[_0x2a0fbe(0x151)][_0x2a0fbe(0xa16)](_0x2807c1['id']);if(this[_0x2a0fbe(0x151)][_0x2a0fbe(0x719)]())BattleManager[_0x2a0fbe(0x254)](_0x7ee23e,_0x4673ff);this[_0x2a0fbe(0x151)]=_0x2ce761;},BattleManager[_0x2dcaec(0x1c7)]=function(_0x19eece,_0x32e902){const _0x1bbf44=_0x2dcaec;this[_0x1bbf44(0x151)][_0x1bbf44(0xaf4)]=_0x32e902,this[_0x1bbf44(0x9a7)][_0x1bbf44(0x71b)](_0x32e902),this[_0x1bbf44(0x9a7)][_0x1bbf44(0x913)](_0x19eece,this[_0x1bbf44(0x151)]),this[_0x1bbf44(0x151)][_0x1bbf44(0xb68)](_0x19eece),this[_0x1bbf44(0x9a7)][_0x1bbf44(0x58f)](_0x19eece,_0x19eece);},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_makeActionOrders']=BattleManager[_0x2dcaec(0x37e)],BattleManager[_0x2dcaec(0x37e)]=function(){const _0x47b276=_0x2dcaec;VisuMZ[_0x47b276(0xae3)][_0x47b276(0x95c)]['call'](this),this[_0x47b276(0x43e)]=this[_0x47b276(0x43e)]['filter'](_0x4c4e93=>_0x4c4e93&&_0x4c4e93['isAppeared']());},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_updatePhase']=BattleManager[_0x2dcaec(0x1af)],BattleManager[_0x2dcaec(0x1af)]=function(_0x26a40b){const _0x24e611=_0x2dcaec;if(this['_phase']==='custom')this['updateCustomActionSequence']();else this['_phase']==='forceAction'?this[_0x24e611(0x825)]():VisuMZ[_0x24e611(0xae3)]['BattleManager_updatePhase']['call'](this,_0x26a40b);},BattleManager['prepareCustomActionSequence']=function(){const _0x1cad0b=_0x2dcaec;this['_allTargets']=this[_0x1cad0b(0xa28)][_0x1cad0b(0xa5e)](0x0),this[_0x1cad0b(0xc26)]=0x0,this[_0x1cad0b(0xc39)]=this['_allTargets'][0x0]||null,this[_0x1cad0b(0x584)]=_0x1cad0b(0xa81);},BattleManager[_0x2dcaec(0x398)]=function(){const _0x1d5da5=_0x2dcaec;!this[_0x1d5da5(0x95d)]()&&!this[_0x1d5da5(0x9a7)]['isBusy']()&&(this['_phase']='action');},BattleManager[_0x2dcaec(0x713)]=function(_0x4c9a86){const _0xd99df3=_0x2dcaec;this[_0xd99df3(0x43e)][_0xd99df3(0xb8d)](_0x4c9a86);if(_0x4c9a86===this[_0xd99df3(0x173)])return;const _0x27afda=JsonEx[_0xd99df3(0xa12)](_0x4c9a86[_0xd99df3(0x3ab)]());this[_0xd99df3(0x9f8)][_0xd99df3(0x190)]([_0x4c9a86,_0x27afda]);},BattleManager[_0x2dcaec(0x4fd)]=function(){},BattleManager['updateStart']=function(){const _0x5ce788=_0x2dcaec;if(this['isTpb']())this[_0x5ce788(0x584)]=_0x5ce788(0x5d3);else this[_0x5ce788(0x9f8)][_0x5ce788(0x7ce)]>0x0?this[_0x5ce788(0x584)]=_0x5ce788(0x5d3):this[_0x5ce788(0xc72)]();},BattleManager['getNextSubject']=function(){const _0x24a135=_0x2dcaec,_0x986c8f=this[_0x24a135(0x173)];_0x986c8f&&this['isTpb']()&&_0x986c8f['setActionState']('undecided');for(;;){const _0x5965dc=this['getNextSubjectFromPool']();if(!_0x5965dc)return null;if(_0x5965dc[_0x24a135(0x19e)]()&&_0x5965dc[_0x24a135(0x2b5)]())return _0x5965dc;}},BattleManager['getNextSubjectFromPool']=function(){const _0xd76499=_0x2dcaec;if(this[_0xd76499(0x9f8)][_0xd76499(0x7ce)]>0x0){const _0x2829c0=this[_0xd76499(0x9f8)]['shift'](),_0x317b28=_0x2829c0[0x0];return _0x317b28[_0xd76499(0xaa2)]=_0x317b28[_0xd76499(0xaa2)]||[],_0x317b28[_0xd76499(0xaa2)][0x0]=_0x2829c0[0x1],_0x317b28;}else return this[_0xd76499(0x43e)][_0xd76499(0xa0f)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x35f)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x713)],Game_Battler['prototype'][_0x2dcaec(0x713)]=function(_0x5100da,_0x4b0fde){const _0x38e077=_0x2dcaec;VisuMZ[_0x38e077(0xae3)]['Game_Battler_forceAction']['call'](this,_0x5100da,_0x4b0fde),this[_0x38e077(0xaa2)][this[_0x38e077(0xaa2)][_0x38e077(0x7ce)]-0x1][_0x38e077(0x206)]=!![];},Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x947)]=function(_0x5e7bb8){const _0x33ea9a=_0x2dcaec;return this[_0x33ea9a(0x5cf)](_0x5e7bb8[0x0],_0x5e7bb8[0x1],_0x51b1fe=>{const _0x2f91ec=_0x33ea9a;!_0x51b1fe['isDeathStateAffected']()&&(_0x51b1fe[_0x2f91ec(0x713)](_0x5e7bb8[0x2],_0x5e7bb8[0x3]),BattleManager['forceAction'](_0x51b1fe));}),!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa71)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x79a)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x79a)]=function(){const _0x4d9007=_0x2dcaec;VisuMZ['BattleCore']['Game_Battler_makeSpeed']['call'](this),this[_0x4d9007(0xaa2)][_0x4d9007(0x7ce)]<=0x0&&(this[_0x4d9007(0x671)]=Number[_0x4d9007(0x833)]);},BattleManager['shouldHideBattleEndPopups']=function(){const _0x34de71=_0x2dcaec;if(VisuMZ['BattleCore']['Settings'][_0x34de71(0x53c)]['EndBattlePopups']??!![])return![];return SceneManager[_0x34de71(0xa2b)]()&&this['_endingBattle'];},VisuMZ['BattleCore'][_0x2dcaec(0xa38)]=BattleManager[_0x2dcaec(0x66c)],BattleManager[_0x2dcaec(0x66c)]=function(){const _0x301a29=_0x2dcaec;this[_0x301a29(0x17f)]()?this[_0x301a29(0x6a8)]():VisuMZ[_0x301a29(0xae3)][_0x301a29(0xa38)][_0x301a29(0x390)](this);},BattleManager[_0x2dcaec(0x6a8)]=function(){const _0x4e9918=_0x2dcaec;if(this[_0x4e9918(0xc49)]){if(this[_0x4e9918(0xc49)][_0x4e9918(0x66c)]())return;this[_0x4e9918(0xbf5)](),this[_0x4e9918(0xa25)](),!this[_0x4e9918(0x173)]&&!this['_currentActor']&&SceneManager[_0x4e9918(0x496)][_0x4e9918(0x2a2)]();}else!this['_subject']&&this['selectNextActor']();},BattleManager[_0x2dcaec(0xa25)]=function(){const _0x5b2398=_0x2dcaec;(!this['isPartyTpbInputtable']()||this['needsActorInputCancel']())&&(this['_tpbSceneChangeCacheActor']&&(!$gameParty['battleMembers']()['includes'](this[_0x5b2398(0x8e2)])&&(this[_0x5b2398(0x8e2)]=null)),!this['_tpbSceneChangeCacheActor']?(this[_0x5b2398(0x3e4)](),this[_0x5b2398(0xc49)]=null,this[_0x5b2398(0x4b9)]=![]):this['revertTpbCachedActor']());},BattleManager[_0x2dcaec(0xa54)]=function(){const _0x3fdfa9=_0x2dcaec;!$gameParty['battleMembers']()[_0x3fdfa9(0x7f2)](this[_0x3fdfa9(0x8e2)])&&(this[_0x3fdfa9(0x8e2)]=null),this[_0x3fdfa9(0x8e2)]?(this['_currentActor']=this['_tpbSceneChangeCacheActor'],this[_0x3fdfa9(0xc49)][_0x3fdfa9(0x36b)]=_0x3fdfa9(0x55a),this[_0x3fdfa9(0x4b9)]=!![],this[_0x3fdfa9(0x8e2)]=null):(this['cancelActorInput'](),this[_0x3fdfa9(0xc49)]=null,this[_0x3fdfa9(0x4b9)]=![]);},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_isTpbMainPhase']=BattleManager[_0x2dcaec(0x4b4)],BattleManager['isTpbMainPhase']=function(){const _0x249d15=_0x2dcaec;return this[_0x249d15(0x584)]==='custom'?this[_0x249d15(0xb1e)]():VisuMZ[_0x249d15(0xae3)][_0x249d15(0xbed)][_0x249d15(0x390)](this);},BattleManager[_0x2dcaec(0xb1e)]=function(){const _0x53ab65=_0x2dcaec;return this[_0x53ab65(0x9b0)]();},VisuMZ['BattleCore']['BattleManager_cancelActorInput']=BattleManager['cancelActorInput'],BattleManager[_0x2dcaec(0x3e4)]=function(){const _0x128f2d=_0x2dcaec;this['isTpb']()&&this[_0x128f2d(0x584)]===_0x128f2d(0xb71)&&(this[_0x128f2d(0xc49)]=null),VisuMZ[_0x128f2d(0xae3)][_0x128f2d(0x956)][_0x128f2d(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)]['BattleManager_inputtingAction']=BattleManager[_0x2dcaec(0x524)],BattleManager['inputtingAction']=function(){const _0x2ca0e2=_0x2dcaec,_0x314927=this[_0x2ca0e2(0xc49)];if(_0x314927&&!_0x314927['inputtingAction']()){const _0xd8f954=_0x314927[_0x2ca0e2(0x8cd)];_0x314927[_0x2ca0e2(0xaa2)][_0xd8f954]=new Game_Action(_0x314927);}return VisuMZ['BattleCore'][_0x2ca0e2(0x7ef)][_0x2ca0e2(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x52e)]=BattleManager[_0x2dcaec(0xc5b)],BattleManager[_0x2dcaec(0xc5b)]=function(_0x570fea){const _0x7ed7bc=_0x2dcaec;if(this['_action'][_0x7ed7bc(0x25b)]())return![];return VisuMZ[_0x7ed7bc(0xae3)]['BattleManager_checkSubstitute']['call'](this,_0x570fea);},SceneManager['isSceneBattle']=function(){const _0x14536c=_0x2dcaec;return this[_0x14536c(0x496)]&&this[_0x14536c(0x496)][_0x14536c(0x61d)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){const _0x27676d=_0x2dcaec;return Spriteset_Battle['prototype'][_0x27676d(0x4d3)]();},SceneManager['isPreviousSceneBattleTransitionable']=function(){const _0x47c750=_0x2dcaec;if(SceneManager[_0x47c750(0xc29)](Scene_Options))return!![];return![];},SceneManager[_0x2dcaec(0xbfe)]=function(){if(SceneManager['isNextScene'](Scene_Options))return!![];return![];},SceneManager[_0x2dcaec(0x4e1)]=function(_0xec0065){const _0x202669=_0x2dcaec;if(!SceneManager[_0x202669(0xa2b)]())return!![];const _0x2e45ce=[_0x202669(0x515),_0x202669(0x505),_0x202669(0xbf9)];return _0x2e45ce[_0x202669(0x7f2)](_0xec0065[_0x202669(0x321)]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa66)]=SceneManager[_0x2dcaec(0x190)],SceneManager[_0x2dcaec(0x190)]=function(_0x51dd6a){const _0x2ebf59=_0x2dcaec;if(!SceneManager[_0x2ebf59(0x4e1)](_0x51dd6a))return this['displayBattleCoreTransitionErrorMsg'](_0x51dd6a);VisuMZ[_0x2ebf59(0xae3)][_0x2ebf59(0xa66)][_0x2ebf59(0x390)](this,_0x51dd6a);},SceneManager[_0x2dcaec(0x231)]=function(_0xce71fb){const _0x4f061c=_0x2dcaec;if(!$gameTemp['isPlaytest']())return;if(this[_0x4f061c(0x905)])return;this[_0x4f061c(0x905)]=!![];let _0x2188cc='';_0x2188cc+=_0x4f061c(0xb8a),_0x2188cc+=_0x4f061c(0x89b)[_0x4f061c(0xb60)](_0xce71fb['name']),alert(_0x2188cc);},VisuMZ[_0x2dcaec(0xae3)]['Game_Temp_initialize']=Game_Temp[_0x2dcaec(0xaf6)]['initialize'],Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(){const _0x53279a=_0x2dcaec;VisuMZ[_0x53279a(0xae3)][_0x53279a(0xa9f)][_0x53279a(0x390)](this),this[_0x53279a(0x853)]=[];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x317)]=Game_Temp['prototype'][_0x2dcaec(0x819)],Game_Temp['prototype']['requestAnimation']=function(_0x4cffaa,_0x5ba9b3,_0x2416d7){const _0x501bce=_0x2dcaec;_0x4cffaa=_0x4cffaa[_0x501bce(0x5ed)]((_0xe6ba8,_0x114cb3,_0x5c20e9)=>_0x5c20e9['indexOf'](_0xe6ba8)===_0x114cb3);SceneManager['isSceneBattle']()&&SceneManager[_0x501bce(0x78b)]()&&(_0x2416d7=!_0x2416d7);VisuMZ[_0x501bce(0xae3)][_0x501bce(0x317)][_0x501bce(0x390)](this,_0x4cffaa,_0x5ba9b3,_0x2416d7);SceneManager[_0x501bce(0xa2b)]()&&BattleManager[_0x501bce(0x2a3)][_0x501bce(0xc64)]();for(const _0x10966b of _0x4cffaa){_0x10966b&&_0x10966b[_0x501bce(0x5d1)]&&_0x10966b[_0x501bce(0x5d1)]()&&_0x10966b[_0x501bce(0x237)]();}},Game_Temp['prototype']['setLastPluginCommandInterpreter']=function(_0x30d83f){const _0x49a395=_0x2dcaec;this[_0x49a395(0x1f1)]=_0x30d83f;},Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c5)]=function(){const _0x47cf01=_0x2dcaec;return this[_0x47cf01(0x1f1)];},Game_Temp['prototype']['clearForcedGameTroopSettingsBattleCore']=function(){const _0x39de3d=_0x2dcaec;this[_0x39de3d(0x85d)]=undefined;},Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x8dc)]=function(_0xc45965){const _0x279d04=_0x2dcaec;$gameMap&&$dataMap&&$dataMap[_0x279d04(0x795)]&&this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x279d04(0x795)]);const _0x54df17=$dataTroops[_0xc45965];if(_0x54df17){let _0x4b0a49=DataManager['createTroopNote'](_0x54df17['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x4b0a49);}},Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x98e)]=function(_0x37b42b){const _0x280652=_0x2dcaec;if(!_0x37b42b)return;if(_0x37b42b[_0x280652(0xb9e)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*?)>/i)){const _0x229f1b=String(RegExp['$1']);if(_0x229f1b['match'](/DEFAULT/i))this[_0x280652(0x85d)]=_0x280652(0x30e);else{if(_0x229f1b[_0x280652(0xb9e)](/LIST/i))this[_0x280652(0x85d)]=_0x280652(0x97c);else{if(_0x229f1b['match'](/XP/i))this['_forcedBattleLayout']='xp';else{if(_0x229f1b[_0x280652(0xb9e)](/PORTRAIT/i))this['_forcedBattleLayout']=_0x280652(0x3ec);else{if(_0x229f1b['match'](/BORDER/i))this['_forcedBattleLayout']=_0x280652(0x541);else{if(_0x229f1b[_0x280652(0xb9e)](/(?:SIDEVIEW UI|SIDEVIEW)/i))Imported[_0x280652(0x78f)]?this['_forcedBattleLayout']=_0x280652(0x226):this[_0x280652(0x85d)]=_0x280652(0x30e);else _0x229f1b[_0x280652(0xb9e)](/(?:FRONTVIEW UI|FRONTVIEW)/i)&&(Imported[_0x280652(0x4d6)]?this[_0x280652(0x85d)]=_0x280652(0x6af):this[_0x280652(0x85d)]=_0x280652(0x30e));}}}}}}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x77e)]=Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x365)],Game_Temp[_0x2dcaec(0xaf6)]['requestBalloon']=function(_0x5b7452,_0x44f947){const _0x23bd6d=_0x2dcaec;SceneManager['isSceneBattle']()?this[_0x23bd6d(0xc0c)](_0x5b7452,_0x44f947):VisuMZ[_0x23bd6d(0xae3)][_0x23bd6d(0x77e)][_0x23bd6d(0x390)](this,_0x5b7452,_0x44f947);},Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0xc0c)]=function(_0x3c8dcc,_0x52ad11){const _0x38855c=_0x2dcaec,_0x5d1d9d={'target':_0x3c8dcc,'balloonId':_0x52ad11};this[_0x38855c(0x853)]=this['_battleBalloonQueue']||[],this[_0x38855c(0x853)][_0x38855c(0x190)](_0x5d1d9d);},Game_Temp[_0x2dcaec(0xaf6)][_0x2dcaec(0x949)]=function(){const _0x1a4253=_0x2dcaec;return this[_0x1a4253(0x853)]=this[_0x1a4253(0x853)]||[],this[_0x1a4253(0x853)]['shift']();},Game_Temp[_0x2dcaec(0xaf6)]['clearBattleBalloons']=function(){const _0xcc7067=_0x2dcaec;this[_0xcc7067(0x853)]=[];},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x5f8)]=function(){const _0x57c477=_0x2dcaec;this[_0x57c477(0x533)]===undefined&&(this[_0x57c477(0x533)]=[]);for(const _0x47c969 of this[_0x57c477(0x533)]){!_0x47c969[_0x57c477(0x383)]()&&this['removeBattleBalloon'](_0x47c969);}this['processBattleBalloonRequests']();},Spriteset_Battle['prototype'][_0x2dcaec(0x679)]=function(){const _0x1f6950=_0x2dcaec;for(;;){const _0xf932a=$gameTemp[_0x1f6950(0x949)]();if(_0xf932a)this[_0x1f6950(0x2e8)](_0xf932a);else break;}},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2e8)]=function(_0x1d0f7e){const _0x5e24de=_0x2dcaec,_0x18eddd=this[_0x5e24de(0x2c5)](_0x1d0f7e[_0x5e24de(0x4ae)]);if(_0x18eddd){let _0x3ad168=null;Imported['VisuMZ_4_IconBalloons']&&Array[_0x5e24de(0xb63)](_0x1d0f7e[_0x5e24de(0x960)])?_0x3ad168=new Sprite_IconBalloon():_0x3ad168=new Sprite_Balloon(),_0x3ad168[_0x5e24de(0x462)]=_0x1d0f7e['target'],_0x3ad168[_0x5e24de(0xc39)]=_0x18eddd,_0x3ad168[_0x5e24de(0xc39)][_0x5e24de(0x443)]=_0x18eddd,_0x3ad168['setup'](_0x18eddd,_0x1d0f7e[_0x5e24de(0x960)]),BattleManager[_0x5e24de(0x1d4)](_0x3ad168),this['_battleBalloonSprites'][_0x5e24de(0x190)](_0x3ad168);}},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e8)]=function(_0x246963){const _0x114e40=_0x2dcaec;this[_0x114e40(0x533)][_0x114e40(0xb8d)](_0x246963),BattleManager[_0x114e40(0x641)](_0x246963),_0x246963[_0x114e40(0x221)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x30c)]=function(_0x10f070,_0x5e8086){},Sprite_Battler[_0x2dcaec(0xaf6)]['isSpriteVS8dir']=function(){return![];},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x59a)]=function(){const _0x2e7db0=_0x2dcaec;return this[_0x2e7db0(0x533)]=this[_0x2e7db0(0x533)]||[],this[_0x2e7db0(0x533)][_0x2e7db0(0x7ce)]>0x0;},VisuMZ['BattleCore'][_0x2dcaec(0x86c)]=Game_System[_0x2dcaec(0xaf6)]['initialize'],Game_System[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(){const _0x38bf26=_0x2dcaec;VisuMZ[_0x38bf26(0xae3)][_0x38bf26(0x86c)][_0x38bf26(0x390)](this),this[_0x38bf26(0x469)]();},Game_System['prototype']['initBattleCore']=function(){const _0x19b84c=_0x2dcaec;this[_0x19b84c(0xc75)]=this[_0x19b84c(0xc75)]||[];},Game_System['prototype'][_0x2dcaec(0x8b4)]=function(){const _0x5e78db=_0x2dcaec;if(this[_0x5e78db(0xc75)]===undefined)this[_0x5e78db(0x469)]();return this[_0x5e78db(0xc75)];},Game_System[_0x2dcaec(0xaf6)][_0x2dcaec(0x5bb)]=function(_0x1009dc){const _0x41aeb5=_0x2dcaec;if(this[_0x41aeb5(0xc75)]===undefined)this[_0x41aeb5(0x469)]();if(!_0x1009dc)return;if(this[_0x41aeb5(0xc75)][_0x41aeb5(0x7f2)](_0x1009dc))return;this['_defeatedEnemies'][_0x41aeb5(0x190)](_0x1009dc),this['_defeatedEnemies']['sort']((_0x2bd580,_0x354a80)=>_0x2bd580-_0x354a80);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4ac)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x4e3)],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x4e3)]=function(_0x187049){const _0x1a778b=_0x2dcaec,_0x5f92a4=this[_0x1a778b(0x2b5)](),_0x4b56a4=this[_0x1a778b(0x79f)]();VisuMZ[_0x1a778b(0xae3)][_0x1a778b(0x4ac)][_0x1a778b(0x390)](this,_0x187049),this[_0x1a778b(0x5d1)]()&&_0x5f92a4&&this[_0x1a778b(0x1f5)]()&&(this[_0x1a778b(0x257)]=!this[_0x1a778b(0x5fc)](),$gameSystem[_0x1a778b(0x5bb)](this[_0x1a778b(0xab2)]())),SceneManager[_0x1a778b(0xa2b)]()&&_0x4b56a4!==this[_0x1a778b(0x79f)]()&&(this[_0x1a778b(0xbc2)]()&&this[_0x1a778b(0xbc2)]()[_0x1a778b(0x5a4)]());},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x5fc)]=function(){const _0x45922c=_0x2dcaec;return $gameSystem[_0x45922c(0x8b4)]()['includes'](this[_0x45922c(0x535)]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa1a)]=Game_BattlerBase['prototype'][_0x2dcaec(0x752)],Game_BattlerBase[_0x2dcaec(0xaf6)]['eraseState']=function(_0xbee7e){const _0x34c7de=_0x2dcaec,_0x1b1202=this['_states']['includes'](_0xbee7e),_0x24876c=this[_0x34c7de(0x79f)]();VisuMZ[_0x34c7de(0xae3)][_0x34c7de(0xa1a)][_0x34c7de(0x390)](this,_0xbee7e),this[_0x34c7de(0x5d1)]()&&_0xbee7e===this[_0x34c7de(0x636)]()&&this[_0x34c7de(0x2b5)]()&&(this[_0x34c7de(0x257)]=![]),!this[_0x34c7de(0x3ff)]&&!this[_0x34c7de(0x97d)]&&SceneManager[_0x34c7de(0xa2b)]()&&(_0x1b1202&&!this[_0x34c7de(0xa7f)][_0x34c7de(0x7f2)](_0xbee7e)&&this[_0x34c7de(0xb03)](),_0x24876c!==this['stateMotionIndex']()&&(this[_0x34c7de(0xbc2)]()&&this['battler']()[_0x34c7de(0x5a4)]()));},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_clear']=Game_Action['prototype']['clear'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xb7e)]=function(){const _0xa4faac=_0x2dcaec;VisuMZ[_0xa4faac(0xae3)][_0xa4faac(0x4d7)][_0xa4faac(0x390)](this),this['_armorPenetration']={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this['_multipliers']={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0xa4faac(0x30e),this[_0xa4faac(0x569)]();},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x569)]=function(){this['_targetBattlerKey']='';},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8d7)]=Game_Action['prototype'][_0x2dcaec(0xaee)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xaee)]=function(_0x2d771c){const _0x21a3a3=_0x2dcaec;VisuMZ[_0x21a3a3(0xae3)][_0x21a3a3(0x8d7)][_0x21a3a3(0x390)](this,_0x2d771c),this[_0x21a3a3(0x569)]();},VisuMZ['BattleCore'][_0x2dcaec(0xbf3)]=Game_Action['prototype'][_0x2dcaec(0xa16)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xa16)]=function(_0x2b118c){const _0x575a3d=_0x2dcaec;VisuMZ[_0x575a3d(0xae3)][_0x575a3d(0xbf3)][_0x575a3d(0x390)](this,_0x2b118c),this[_0x575a3d(0x569)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7e6)]=Game_Action[_0x2dcaec(0xaf6)]['setItem'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x235)]=function(_0x335c3f){const _0x5920e0=_0x2dcaec;VisuMZ['BattleCore'][_0x5920e0(0x7e6)][_0x5920e0(0x390)](this,_0x335c3f),this[_0x5920e0(0x569)]();},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x673)]=function(_0x52057a,_0x52331b){const _0x4fd665=_0x2dcaec;return VisuMZ[_0x4fd665(0xae3)][_0x4fd665(0xbeb)][_0x4fd665(0x53c)][_0x4fd665(0xc4f)][_0x4fd665(0x390)](this,_0x52057a,_0x52331b);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x1bd)]=function(_0x19bc34,_0x29a82e){const _0x1aeb13=_0x2dcaec;return VisuMZ['BattleCore'][_0x1aeb13(0xbeb)][_0x1aeb13(0x53c)][_0x1aeb13(0x5fd)][_0x1aeb13(0x390)](this,_0x19bc34,_0x29a82e);},Game_Action[_0x2dcaec(0xaf6)]['applyGuard']=function(_0x569802,_0x53eb74){const _0x2228c5=_0x2dcaec;return VisuMZ[_0x2228c5(0xae3)][_0x2228c5(0xbeb)][_0x2228c5(0x53c)][_0x2228c5(0x88e)][_0x2228c5(0x390)](this,_0x569802,_0x53eb74);},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_itemHit']=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x217)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x217)]=function(_0x1b08e2){const _0x3fc7ac=_0x2dcaec,_0x106e1d=this[_0x3fc7ac(0x719)]()[_0x3fc7ac(0x795)];if(_0x106e1d[_0x3fc7ac(0xb9e)](/<ALWAYS HIT>/i))return 0x1;else{if(_0x106e1d['match'](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{let _0x449700=VisuMZ[_0x3fc7ac(0xae3)][_0x3fc7ac(0x8a1)]['call'](this,_0x1b08e2);return _0x449700=this[_0x3fc7ac(0x865)]['hitRate']*_0x449700+this[_0x3fc7ac(0x865)]['hitFlat'],$gameParty[_0x3fc7ac(0x208)]()&&(_0x449700=this['applyBattleCoreHitRateJS'](_0x449700,_0x1b08e2)),_0x449700;}}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8c5)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x9cc)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x9cc)]=function(_0x257ea7){const _0x5b5428=_0x2dcaec;this[_0x5b5428(0x148)]=!![],VisuMZ[_0x5b5428(0xae3)]['Game_Action_updateLastTarget'][_0x5b5428(0x390)](this,_0x257ea7),this[_0x5b5428(0x148)]=undefined;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x457)]=function(_0x37b96f){const _0x135d73=_0x2dcaec;window[_0x135d73(0x691)]=this,window['a']=this[_0x135d73(0xafb)](),window['b']=_0x37b96f,window[_0x135d73(0x17e)]=this[_0x135d73(0xafb)](),window['target']=_0x37b96f,window[_0x135d73(0x255)]=this[_0x135d73(0x719)](),window['skill']=this[_0x135d73(0x719)](),window[_0x135d73(0x719)]=this[_0x135d73(0x719)]();},Game_Action[_0x2dcaec(0xaf6)]['clearGlobalVariables']=function(_0x3ce1fb){const _0x392af8=_0x2dcaec;window[_0x392af8(0x691)]=undefined,window['a']=undefined,window['b']=undefined,window[_0x392af8(0x17e)]=undefined,window[_0x392af8(0x4ae)]=undefined,window[_0x392af8(0x255)]=undefined,window[_0x392af8(0x7d5)]=undefined,window[_0x392af8(0x719)]=undefined;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x7c7)]=function(_0x441213,_0x415b9c){const _0x4c1b9b=_0x2dcaec;if(this[_0x4c1b9b(0x148)])return _0x441213;this[_0x4c1b9b(0x457)](_0x415b9c);if(this[_0x4c1b9b(0x719)]()){let _0x4cb34d=VisuMZ[_0x4c1b9b(0xae3)]['createKeyJS'](this[_0x4c1b9b(0x719)](),'jsAccuracy');VisuMZ[_0x4c1b9b(0xae3)]['JS'][_0x4cb34d]&&(_0x441213=VisuMZ[_0x4c1b9b(0xae3)]['JS'][_0x4cb34d][_0x4c1b9b(0x390)](this,this['subject'](),_0x415b9c,this[_0x4c1b9b(0x719)](),_0x441213));}for(const _0x2bc82c of this['subject']()['traitObjects']()){if(!_0x2bc82c)continue;key=VisuMZ[_0x4c1b9b(0xae3)]['createKeyJS'](_0x2bc82c,_0x4c1b9b(0x24d)),VisuMZ[_0x4c1b9b(0xae3)]['JS'][key]&&(_0x441213=VisuMZ['BattleCore']['JS'][key]['call'](this,this[_0x4c1b9b(0xafb)](),_0x415b9c,this[_0x4c1b9b(0x719)](),_0x441213));}for(const _0x321326 of _0x415b9c['traitObjects']()){if(!_0x321326)continue;key=VisuMZ[_0x4c1b9b(0xae3)][_0x4c1b9b(0x2a1)](_0x321326,_0x4c1b9b(0x4be)),VisuMZ[_0x4c1b9b(0xae3)]['JS'][key]&&(_0x441213=VisuMZ[_0x4c1b9b(0xae3)]['JS'][key]['call'](this,this[_0x4c1b9b(0xafb)](),_0x415b9c,this[_0x4c1b9b(0x719)](),_0x441213));}return this[_0x4c1b9b(0x30f)](_0x415b9c),_0x441213;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x488)]=function(_0x1ec503){const _0x340fc5=_0x2dcaec;if(!this[_0x340fc5(0x719)]()[_0x340fc5(0x63e)][_0x340fc5(0x73b)])return 0x0;let _0x3a2d80=VisuMZ['BattleCore'][_0x340fc5(0xbeb)][_0x340fc5(0x53c)]['CriticalHitRateJS']['call'](this,_0x1ec503);return _0x3a2d80=this[_0x340fc5(0x865)][_0x340fc5(0xb32)]*_0x3a2d80+this[_0x340fc5(0x865)][_0x340fc5(0x2ff)],$gameParty['inBattle']()&&(_0x3a2d80=this[_0x340fc5(0x67b)](_0x3a2d80,_0x1ec503)),_0x3a2d80;},Game_Action[_0x2dcaec(0xaf6)]['applyBattleCoreCriticalHitRateJS']=function(_0x252b57,_0x136550){const _0x2c82be=_0x2dcaec;this['declareGlobalVariables'](_0x136550),window['rate']=_0x252b57;{const _0x67accc=this[_0x2c82be(0xafb)]()[_0x2c82be(0x517)]();for(const _0x4a2f6f of _0x67accc){if(!_0x4a2f6f)continue;if(_0x4a2f6f['note'][_0x2c82be(0xb9e)](/<JS (?:CRITICAL RATE|CRI) AS USER>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS USER>/i)){const _0xa56663=String(RegExp['$1']);try{eval(_0xa56663);}catch(_0x1dfc1d){if($gameTemp[_0x2c82be(0x5b6)]())console[_0x2c82be(0x1e4)](_0x1dfc1d);}}}}{const _0x1a9b67=_0x136550[_0x2c82be(0x517)]();for(const _0x4844c6 of _0x1a9b67){if(!_0x4844c6)continue;if(_0x4844c6[_0x2c82be(0x795)][_0x2c82be(0xb9e)](/<JS (?:CRITICAL RATE|CRI) AS TARGET>\s*([\s\S]*?)\s*<\/JS (?:CRITICAL RATE|CRI) AS TARGET>/i)){const _0x1b904e=String(RegExp['$1']);try{eval(_0x1b904e);}catch(_0x6d5871){if($gameTemp['isPlaytest']())console[_0x2c82be(0x1e4)](_0x6d5871);}}}}return _0x252b57=window['rate'],this[_0x2c82be(0x30f)](_0x136550),_0x252b57;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x67b)]=function(_0x15f7c6,_0x109bf7){const _0x3e24ab=_0x2dcaec;this['declareGlobalVariables'](_0x109bf7);for(const _0x36ccff of this[_0x3e24ab(0xafb)]()[_0x3e24ab(0x517)]()){if(!_0x36ccff)continue;key=VisuMZ[_0x3e24ab(0xae3)]['createKeyJS'](_0x36ccff,_0x3e24ab(0x438)),VisuMZ[_0x3e24ab(0xae3)]['JS'][key]&&(_0x15f7c6=VisuMZ['BattleCore']['JS'][key]['call'](this,this['subject'](),_0x109bf7,this[_0x3e24ab(0x719)](),_0x15f7c6));}for(const _0x5495f0 of _0x109bf7[_0x3e24ab(0x517)]()){if(!_0x5495f0)continue;key=VisuMZ['BattleCore'][_0x3e24ab(0x2a1)](_0x5495f0,_0x3e24ab(0x809)),VisuMZ[_0x3e24ab(0xae3)]['JS'][key]&&(_0x15f7c6=VisuMZ[_0x3e24ab(0xae3)]['JS'][key][_0x3e24ab(0x390)](this,this[_0x3e24ab(0xafb)](),_0x109bf7,this[_0x3e24ab(0x719)](),_0x15f7c6));}return this['clearGlobalVariables'](_0x109bf7),_0x15f7c6;},Game_Action[_0x2dcaec(0xaf6)]['applyCritical']=function(_0x4e31d3){const _0x16f36c=_0x2dcaec;return _0x4e31d3=VisuMZ[_0x16f36c(0xae3)][_0x16f36c(0xbeb)]['Damage']['CriticalHitMultiplier'][_0x16f36c(0x390)](this,_0x4e31d3),_0x4e31d3=this['_multipliers'][_0x16f36c(0x1e1)]*_0x4e31d3+this[_0x16f36c(0x865)][_0x16f36c(0x770)],_0x4e31d3;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2b0)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x91f)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x91f)]=function(_0x282d65){const _0x2c5972=_0x2dcaec;if(this[_0x2c5972(0x342)]!==_0x2c5972(0x30e))return this[_0x2c5972(0x35a)](_0x282d65);else return DataManager['getDamageStyle'](this['item']())==='MANUAL'?VisuMZ[_0x2c5972(0xae3)][_0x2c5972(0x2b0)][_0x2c5972(0x390)](this,_0x282d65):this[_0x2c5972(0x3e8)](_0x282d65);},Game_Action['prototype']['setCustomDamageFormula']=function(_0x11c86b){const _0x53a07c=_0x2dcaec;this[_0x53a07c(0x342)]=_0x11c86b;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x35a)]=function(_0x1f16e1){const _0x4ea5b6=_0x2dcaec,_0x57ac75=this['item'](),_0x2e3f9e=_0x57ac75[_0x4ea5b6(0x63e)][_0x4ea5b6(0x30b)];_0x57ac75[_0x4ea5b6(0x63e)]['formula']=this['_customDamageFormula'];let _0x11dc40=VisuMZ[_0x4ea5b6(0xae3)][_0x4ea5b6(0x2b0)][_0x4ea5b6(0x390)](this,_0x1f16e1);return _0x57ac75['damage'][_0x4ea5b6(0x30b)]=_0x2e3f9e,_0x11dc40;},Game_Action['prototype']['damageStyle']=function(){const _0x50b3d5=_0x2dcaec;if(this[_0x50b3d5(0x719)]()['note'][_0x50b3d5(0xb9e)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x4c0a22=String(RegExp['$1'])[_0x50b3d5(0xb9f)]()['trim']();return _0x4c0a22;}return _0x50b3d5(0x45d);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x3e8)]=function(_0x229ddc){const _0x1d76cd=_0x2dcaec,_0x19eae7=DataManager[_0x1d76cd(0x47f)](this[_0x1d76cd(0x719)]()),_0x3683a9=VisuMZ['DamageStyles'][_0x19eae7];try{return _0x3683a9[_0x1d76cd(0x89f)]['call'](this,_0x229ddc);}catch(_0x235f63){if($gameTemp[_0x1d76cd(0x5b6)]())console[_0x1d76cd(0x1e4)](_0x235f63);return VisuMZ[_0x1d76cd(0xae3)][_0x1d76cd(0x2b0)][_0x1d76cd(0x390)](this);}},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x6a1)]=function(_0x11fc7d,_0x25b0fb){const _0x49a638=_0x2dcaec;if(this[_0x49a638(0x9eb)]())return _0x25b0fb;const _0x1af14a=this[_0x49a638(0xafb)](),_0x4af14f=_0x11fc7d;let _0x63e1fb=[],_0x190053=[];_0x63e1fb['push'](this[_0x49a638(0x48a)][_0x49a638(0x684)],this[_0x49a638(0x48a)][_0x49a638(0xb74)]),_0x190053[_0x49a638(0x190)](this[_0x49a638(0x48a)]['arPenRate'],this[_0x49a638(0x48a)][_0x49a638(0xbce)]);const _0x4c147b=this[_0x49a638(0x835)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x1e661e=this[_0x49a638(0x835)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x485496=this[_0x49a638(0x835)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x465a64=this[_0x49a638(0x835)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x63e1fb=_0x63e1fb[_0x49a638(0xa5b)](_0x4af14f[_0x49a638(0x517)]()[_0x49a638(0xc20)](_0x3805a4=>_0x3805a4&&_0x3805a4['note'][_0x49a638(0xb9e)](_0x4c147b)?Number(RegExp['$1']):0x0)),_0x190053=_0x190053[_0x49a638(0xa5b)](_0x4af14f[_0x49a638(0x517)]()[_0x49a638(0xc20)](_0x5d3155=>_0x5d3155&&_0x5d3155[_0x49a638(0x795)][_0x49a638(0xb9e)](_0x1e661e)?Number(RegExp['$1'])/0x64:0x0)),_0x63e1fb=_0x63e1fb['concat'](_0x1af14a[_0x49a638(0x517)]()[_0x49a638(0xc20)](_0xbec4dd=>_0xbec4dd&&_0xbec4dd[_0x49a638(0x795)][_0x49a638(0xb9e)](_0x485496)?Number(RegExp['$1']):0x0)),_0x190053=_0x190053['concat'](_0x1af14a[_0x49a638(0x517)]()[_0x49a638(0xc20)](_0x450bd9=>_0x450bd9&&_0x450bd9[_0x49a638(0x795)][_0x49a638(0xb9e)](_0x465a64)?Number(RegExp['$1'])/0x64:0x0)),this[_0x49a638(0x719)]()[_0x49a638(0x795)][_0x49a638(0xb9e)](_0x485496)&&_0x63e1fb[_0x49a638(0x190)](Number(RegExp['$1'])),this['item']()[_0x49a638(0x795)][_0x49a638(0xb9e)](_0x465a64)&&_0x190053['push'](Number(RegExp['$1'])),_0x25b0fb=_0x63e1fb['reduce']((_0x266ae9,_0xf7a22e)=>_0x266ae9-_0xf7a22e,_0x25b0fb),_0x25b0fb>0x0&&(_0x25b0fb=_0x190053[_0x49a638(0xbc0)]((_0x2bad55,_0x3d885f)=>_0x2bad55*(0x1-_0x3d885f),_0x25b0fb)),_0x25b0fb;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2d1)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x3f9)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x3f9)]=function(_0x3f6972,_0x380b66){const _0x1ac430=_0x2dcaec;_0x380b66=_0x380b66*this[_0x1ac430(0x865)][_0x1ac430(0xa74)],_0x380b66+=this[_0x1ac430(0x865)][_0x1ac430(0x6a3)]*(_0x380b66>=0x0?0x1:-0x1),_0x380b66=this[_0x1ac430(0x2cb)](_0x1ac430(0xb7c),_0x3f6972,_0x380b66,![]),_0x380b66=this[_0x1ac430(0xb5c)](_0x380b66),_0x380b66>0x0?_0x380b66=Math[_0x1ac430(0xbd6)](_0x380b66):_0x380b66=Math[_0x1ac430(0x6eb)](_0x380b66),this[_0x1ac430(0xb7f)]=_0x380b66,this[_0x1ac430(0x6c6)]=this[_0x1ac430(0x6c6)]||0x0,this[_0x1ac430(0x6c6)]+=_0x380b66,VisuMZ['BattleCore'][_0x1ac430(0x2d1)][_0x1ac430(0x390)](this,_0x3f6972,_0x380b66),this[_0x1ac430(0x2cb)](_0x1ac430(0x171),_0x3f6972,_0x380b66,!![]);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xb5c)]=function(_0x30a35c){const _0x19a56c=_0x2dcaec;if(this[_0x19a56c(0x4d0)]())return _0x30a35c;return _0x30a35c=this[_0x19a56c(0x45a)](_0x30a35c),_0x30a35c=this['applyHardDamageCap'](_0x30a35c),_0x30a35c;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x4d0)]=function(){const _0x5b04ed=_0x2dcaec,_0x311e1b=/<BYPASS DAMAGE CAP>/i;if(this[_0x5b04ed(0x719)]()['note'][_0x5b04ed(0xb9e)](_0x311e1b))return!![];if(this[_0x5b04ed(0xafb)]()[_0x5b04ed(0x517)]()[_0x5b04ed(0x624)](_0x3b951f=>_0x3b951f&&_0x3b951f[_0x5b04ed(0x795)][_0x5b04ed(0xb9e)](_0x311e1b)))return!![];return!VisuMZ[_0x5b04ed(0xae3)][_0x5b04ed(0xbeb)][_0x5b04ed(0x53c)][_0x5b04ed(0x4b5)];},Game_Action['prototype']['applySoftDamageCap']=function(_0x24c8a4){const _0x1ae089=_0x2dcaec;if(!VisuMZ[_0x1ae089(0xae3)][_0x1ae089(0xbeb)][_0x1ae089(0x53c)][_0x1ae089(0xae8)])return _0x24c8a4;const _0x595b8e=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x1ae089(0x719)]()[_0x1ae089(0x795)]['match'](_0x595b8e))return _0x24c8a4;if(this[_0x1ae089(0xafb)]()[_0x1ae089(0x517)]()['some'](_0x5b5e3c=>_0x5b5e3c&&_0x5b5e3c[_0x1ae089(0x795)]['match'](_0x595b8e)))return _0x24c8a4;const _0x3dc345=_0x24c8a4<0x0?-0x1:0x1;_0x24c8a4=Math[_0x1ae089(0x2ac)](_0x24c8a4);let _0x8da850=this[_0x1ae089(0xafb)]()[_0x1ae089(0x490)]();this[_0x1ae089(0x719)]()[_0x1ae089(0x795)][_0x1ae089(0xb9e)](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x8da850+=Number(RegExp['$1'])/0x64);_0x8da850=_0x8da850[_0x1ae089(0xc50)](0.01,0x1);const _0x4b7b7a=this['getHardDamageCap'](),_0xd16a84=_0x8da850*_0x4b7b7a;if(_0x24c8a4>_0xd16a84&&_0x4b7b7a>_0xd16a84){_0x24c8a4-=_0xd16a84;const _0x35aaad=VisuMZ[_0x1ae089(0xae3)][_0x1ae089(0xbeb)][_0x1ae089(0x53c)]['DefaultSoftScaler'],_0x1b116b=Math[_0x1ae089(0x959)](0x1-_0x24c8a4/((_0x4b7b7a-_0xd16a84)*_0x35aaad+_0x24c8a4),0.01);_0x24c8a4*=_0x1b116b,_0x24c8a4+=_0xd16a84;}return _0x24c8a4*_0x3dc345;},Game_Action['prototype']['getHardDamageCap']=function(){const _0xd2ae4b=_0x2dcaec;return this[_0xd2ae4b(0x719)]()[_0xd2ae4b(0x795)][_0xd2ae4b(0xb9e)](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this[_0xd2ae4b(0xafb)]()[_0xd2ae4b(0xb38)]();},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x381)]=function(_0x246fa6){const _0x34ca3d=_0x2dcaec;let _0xe03f28=this[_0x34ca3d(0x353)]();return _0x246fa6[_0x34ca3d(0xc50)](-_0xe03f28,_0xe03f28);},Game_Action['prototype'][_0x2dcaec(0x346)]=function(){const _0x4aa22e=_0x2dcaec;if(!this[_0x4aa22e(0x719)]())return![];if(!$gameParty[_0x4aa22e(0x208)]())return![];return(this[_0x4aa22e(0x719)]()[_0x4aa22e(0x795)]||'')[_0x4aa22e(0xb9e)](/<DISPERSE DAMAGE>/i);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x67e)]=function(_0x11bc9e){const _0x5ec1ca=_0x2dcaec;if(this['shouldDisperseDamage']()){let _0x483f46=BattleManager['_targets'];_0x11bc9e/=_0x483f46[_0x5ec1ca(0x7ce)],this[_0x5ec1ca(0x920)]()&&(_0x11bc9e*=this[_0x5ec1ca(0xafb)]()[_0x5ec1ca(0xa05)]()+0x1),_0x11bc9e=_0x11bc9e>0x0?Math['ceil'](_0x11bc9e):Math[_0x5ec1ca(0x6eb)](_0x11bc9e);}return _0x11bc9e;},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_makeDamageValueDisperse']=Game_Action['prototype'][_0x2dcaec(0x673)],Game_Action['prototype'][_0x2dcaec(0x673)]=function(_0x1cd73e,_0x5d79e6){const _0x3c23e7=_0x2dcaec;let _0x52158f=VisuMZ[_0x3c23e7(0xae3)][_0x3c23e7(0x5df)]['call'](this,_0x1cd73e,_0x5d79e6);return this['disperseDamage'](_0x52158f);},Game_Action['prototype']['itemEffectRecoverHp']=function(_0x5232aa,_0x59c92a){const _0x47475a=_0x2dcaec;let _0x3832f2=(_0x5232aa[_0x47475a(0x74e)]*_0x59c92a[_0x47475a(0x6d0)]+_0x59c92a[_0x47475a(0x862)])*_0x5232aa[_0x47475a(0x3b5)];_0x3832f2=this[_0x47475a(0x67e)](_0x3832f2),this[_0x47475a(0x408)]()&&(_0x3832f2*=this[_0x47475a(0xafb)]()['pha']),_0x3832f2=Math[_0x47475a(0x6eb)](_0x3832f2),_0x3832f2!==0x0&&(_0x5232aa['gainHp'](_0x3832f2),this['makeSuccess'](_0x5232aa));},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x1c6)]=function(_0x203927,_0x4df1db){const _0x3e5d8e=_0x2dcaec;let _0x4f2120=(_0x203927[_0x3e5d8e(0xaa1)]*_0x4df1db[_0x3e5d8e(0x6d0)]+_0x4df1db[_0x3e5d8e(0x862)])*_0x203927[_0x3e5d8e(0x3b5)];_0x4f2120=this[_0x3e5d8e(0x67e)](_0x4f2120),this['isItem']()&&(_0x4f2120*=this[_0x3e5d8e(0xafb)]()[_0x3e5d8e(0x803)]),_0x4f2120=Math[_0x3e5d8e(0x6eb)](_0x4f2120),_0x4f2120!==0x0&&(_0x203927[_0x3e5d8e(0x77c)](_0x4f2120),this[_0x3e5d8e(0x753)](_0x203927));},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x621)]=function(_0x295d0d,_0x41384b){const _0x33c6bc=_0x2dcaec;let _0x5a5e0c=Math['floor'](_0x41384b['value1']);_0x5a5e0c=this[_0x33c6bc(0x67e)](_0x5a5e0c),_0x5a5e0c!==0x0&&(_0x295d0d[_0x33c6bc(0x9df)](_0x5a5e0c),this[_0x33c6bc(0x753)](_0x295d0d));},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_apply']=Game_Action['prototype'][_0x2dcaec(0xb68)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xb68)]=function(_0x45bc37){const _0x421679=_0x2dcaec;if(_0x45bc37&&_0x45bc37[_0x421679(0x5d1)]())_0x45bc37[_0x421679(0x237)]();this[_0x421679(0x2cb)](_0x421679(0x69e),_0x45bc37,0x0,!![]),VisuMZ[_0x421679(0xae3)][_0x421679(0x9e4)]['call'](this,_0x45bc37),this['applyBattleCoreJS'](_0x421679(0x648),_0x45bc37,this[_0x421679(0xb7f)]||0x0,!![]),this[_0x421679(0x454)](_0x45bc37);},Game_Action[_0x2dcaec(0xaf6)]['applyBattleCoreJS']=function(_0x4f4f25,_0x185a7a,_0x2a1f43,_0x2fa8be){const _0x3d9644=_0x2dcaec;if(this['_tempBattler']||this['_tempActor'])return;_0x2a1f43=_0x2a1f43||0x0;const _0x924ad7=_0x2a1f43,_0xee43b8=VisuMZ[_0x3d9644(0xae3)][_0x3d9644(0xbeb)]['Mechanics'],_0xd6bbf0=_0x4f4f25[_0x3d9644(0xb60)]('');if(_0xee43b8[_0xd6bbf0]){_0x2a1f43=_0xee43b8[_0xd6bbf0]['call'](this,_0x2a1f43,_0x185a7a);if(_0x2fa8be)_0x2a1f43=_0x924ad7;}let _0x32acde=VisuMZ[_0x3d9644(0xae3)][_0x3d9644(0x2a1)](this[_0x3d9644(0x719)](),_0x4f4f25[_0x3d9644(0xb60)](''));if(VisuMZ[_0x3d9644(0xae3)]['JS'][_0x32acde]){_0x2a1f43=VisuMZ[_0x3d9644(0xae3)]['JS'][_0x32acde][_0x3d9644(0x390)](this,this[_0x3d9644(0xafb)](),_0x185a7a,this[_0x3d9644(0x719)](),_0x2a1f43);if(_0x2fa8be)_0x2a1f43=_0x924ad7;}for(const _0x271c6 of this['subject']()['traitObjects']()){if(!_0x271c6)continue;_0x32acde=VisuMZ['BattleCore'][_0x3d9644(0x2a1)](_0x271c6,_0x4f4f25[_0x3d9644(0xb60)](_0x3d9644(0xb91)));if(VisuMZ[_0x3d9644(0xae3)]['JS'][_0x32acde]){_0x2a1f43=VisuMZ['BattleCore']['JS'][_0x32acde][_0x3d9644(0x390)](this,this['subject'](),_0x185a7a,_0x271c6,_0x2a1f43);if(_0x2fa8be)_0x2a1f43=_0x924ad7;}}for(const _0x380755 of _0x185a7a['traitObjects']()){if(!_0x380755)continue;_0x32acde=VisuMZ[_0x3d9644(0xae3)][_0x3d9644(0x2a1)](_0x380755,_0x4f4f25[_0x3d9644(0xb60)]('AsTarget'));if(VisuMZ[_0x3d9644(0xae3)]['JS'][_0x32acde]){_0x2a1f43=VisuMZ[_0x3d9644(0xae3)]['JS'][_0x32acde][_0x3d9644(0x390)](this,this[_0x3d9644(0xafb)](),_0x185a7a,_0x380755,_0x2a1f43);if(_0x2fa8be)_0x2a1f43=_0x924ad7;}}return _0x2a1f43;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x6f1)]=function(_0x3a5952){const _0x20a18c=_0x2dcaec,_0x750f6e=this['_totalValue']||0x0,_0x3b713c=VisuMZ[_0x20a18c(0xae3)][_0x20a18c(0xbeb)][_0x20a18c(0x41e)],_0x482373=_0x3a5952[_0x20a18c(0xb60)]('');_0x3b713c[_0x482373]&&_0x3b713c[_0x482373][_0x20a18c(0x390)](this,_0x750f6e);let _0x5e469a=VisuMZ[_0x20a18c(0xae3)][_0x20a18c(0x2a1)](this[_0x20a18c(0x719)](),_0x3a5952);VisuMZ[_0x20a18c(0xae3)]['JS'][_0x5e469a]&&VisuMZ['BattleCore']['JS'][_0x5e469a][_0x20a18c(0x390)](this,this[_0x20a18c(0xafb)](),this['subject'](),this[_0x20a18c(0x719)](),_0x750f6e);for(const _0x4fe7d6 of this[_0x20a18c(0xafb)]()[_0x20a18c(0x517)]()){if(!_0x4fe7d6)continue;_0x5e469a=VisuMZ[_0x20a18c(0xae3)][_0x20a18c(0x2a1)](_0x4fe7d6,_0x3a5952),VisuMZ['BattleCore']['JS'][_0x5e469a]&&VisuMZ[_0x20a18c(0xae3)]['JS'][_0x5e469a][_0x20a18c(0x390)](this,this[_0x20a18c(0xafb)](),this[_0x20a18c(0xafb)](),_0x4fe7d6,_0x750f6e);}},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x15f)]=function(){const _0x49b28c=_0x2dcaec;return VisuMZ['BattleCore'][_0x49b28c(0xbeb)][_0x49b28c(0x41e)]['CalcActionSpeedJS'][_0x49b28c(0x390)](this);},Game_Action[_0x2dcaec(0xaf6)]['allowRandomSpeed']=function(){const _0x48391c=_0x2dcaec;return VisuMZ[_0x48391c(0xae3)]['Settings'][_0x48391c(0x41e)][_0x48391c(0x236)];},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xa8f)]=function(){const _0x410ad7=_0x2dcaec;if(this[_0x410ad7(0x274)]==='all\x20actors')return![];if(this[_0x410ad7(0x274)]===_0x410ad7(0x6a4))return![];if(!this['item']())return![];return this[_0x410ad7(0x719)]()[_0x410ad7(0x795)]['match'](/<JS TARGETS>/i);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c8)]=function(){const _0xbaf0b8=_0x2dcaec;if(this[_0xbaf0b8(0x274)]==='all\x20actors')return![];if(this['_targetBattlerKey']===_0xbaf0b8(0x6a4))return![];if(!this[_0xbaf0b8(0x29a)]&&this[_0xbaf0b8(0xafb)]()[_0xbaf0b8(0x66e)]())return![];if(this[_0xbaf0b8(0xa8f)]())return!![];if(!this[_0xbaf0b8(0x719)]())return![];return typeof this[_0xbaf0b8(0x719)]()[_0xbaf0b8(0x147)]===_0xbaf0b8(0x3b3);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x57e)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1f)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1f)]=function(){const _0x22736e=_0x2dcaec;if(this[_0x22736e(0x274)]===_0x22736e(0x7d3))return![];if(this[_0x22736e(0x274)]===_0x22736e(0x6a4))return!![];return this[_0x22736e(0x9c8)]()&&!this['isCustomBattleScope']()?this[_0x22736e(0xc3a)]():VisuMZ[_0x22736e(0xae3)]['Game_Action_isForOpponent'][_0x22736e(0x390)](this);},Game_Action[_0x2dcaec(0xaf6)]['isForOpponentBattleCore']=function(){const _0x533a15=_0x2dcaec,_0xe89472=String(this[_0x533a15(0x719)]()[_0x533a15(0x147)]);if(_0xe89472['match'](/ANY/i))return!![];return _0xe89472[_0x533a15(0xb9e)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x439)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x25b)],Game_Action['prototype'][_0x2dcaec(0x25b)]=function(){const _0x5a6354=_0x2dcaec;if(this[_0x5a6354(0x274)]===_0x5a6354(0x7d3))return!![];if(this[_0x5a6354(0x274)]===_0x5a6354(0x6a4))return![];return this['isBattleCoreTargetScope']()&&!this[_0x5a6354(0xa8f)]()?this[_0x5a6354(0x98d)]():VisuMZ[_0x5a6354(0xae3)][_0x5a6354(0x439)][_0x5a6354(0x390)](this);},Game_Action['prototype'][_0x2dcaec(0x98d)]=function(){const _0x5d7a86=_0x2dcaec,_0x184466=String(this[_0x5d7a86(0x719)]()[_0x5d7a86(0x147)]);return _0x184466[_0x5d7a86(0xb9e)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},Game_Action['prototype']['isForAnyone']=function(){const _0x272cb5=_0x2dcaec;if(this[_0x272cb5(0x9c8)]()&&!this[_0x272cb5(0xa8f)]()){const _0x1308fe=String(this['item']()[_0x272cb5(0x147)]);return _0x1308fe[_0x272cb5(0xb9e)](/(?:ENEMY|FOE)/i)&&_0x1308fe[_0x272cb5(0xb9e)](/OR/i)&&_0x1308fe[_0x272cb5(0xb9e)](/(?:ALLY|FRIEND)/i);}else return![];},Game_Action[_0x2dcaec(0xaf6)]['isForAnyoneFocusFriends']=function(){const _0x3e6e22=_0x2dcaec;if(this[_0x3e6e22(0xb17)]()){const _0x4ea056=String(this[_0x3e6e22(0x719)]()[_0x3e6e22(0x147)]);if(_0x4ea056[_0x3e6e22(0xb9e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];}return![];},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x94c)]=function(){const _0x196b99=_0x2dcaec;if(this[_0x196b99(0xb17)]()){const _0x12a2aa=String(this[_0x196b99(0x719)]()['scope']);if(_0x12a2aa[_0x196b99(0xb9e)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];}return![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x400)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x4ad)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x4ad)]=function(){const _0x3c2eb7=_0x2dcaec;if(this[_0x3c2eb7(0x274)]==='all\x20actors')return!![];return this[_0x3c2eb7(0x9c8)]()&&!this['isCustomBattleScope']()?this[_0x3c2eb7(0x936)]():VisuMZ[_0x3c2eb7(0xae3)][_0x3c2eb7(0x400)]['call'](this);},VisuMZ['BattleCore']['Game_Action_isForDeadFriend']=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x2ca)],Game_Action[_0x2dcaec(0xaf6)]['isForDeadFriend']=function(){const _0xea1287=_0x2dcaec;if(this[_0xea1287(0x274)]===_0xea1287(0x7d3))return VisuMZ[_0xea1287(0xae3)][_0xea1287(0x9a0)][_0xea1287(0x390)](this);return VisuMZ[_0xea1287(0xae3)][_0xea1287(0x9a0)][_0xea1287(0x390)](this);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x936)]=function(){const _0x1c6a95=_0x2dcaec;if(this[_0x1c6a95(0xb17)]())return!![];return![];},Game_Action['prototype'][_0x2dcaec(0x3a4)]=function(){const _0x4c8f4c=_0x2dcaec;return this[_0x4c8f4c(0x719)]()&&this['item']()[_0x4c8f4c(0x795)][_0x4c8f4c(0xb9e)](/<CANNOT TARGET (?:USER|SELF)>/i);},VisuMZ['BattleCore'][_0x2dcaec(0x619)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x22c)],Game_Action['prototype'][_0x2dcaec(0x22c)]=function(){const _0x35ce14=_0x2dcaec;if(this['_targetBattlerKey']===_0x35ce14(0x7d3))return![];if(this[_0x35ce14(0x274)]===_0x35ce14(0x6a4))return![];return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this['isForOneBattleCore']():VisuMZ[_0x35ce14(0xae3)][_0x35ce14(0x619)][_0x35ce14(0x390)](this);},Game_Action['prototype'][_0x2dcaec(0x380)]=function(){const _0x5193eb=_0x2dcaec;if(this[_0x5193eb(0xb17)]())return!![];return![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x618)]=Game_Action['prototype'][_0x2dcaec(0xc62)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xc62)]=function(){const _0xfbbdf6=_0x2dcaec;if(this[_0xfbbdf6(0x274)]===_0xfbbdf6(0x7d3))return![];if(this[_0xfbbdf6(0x274)]===_0xfbbdf6(0x6a4))return![];return this[_0xfbbdf6(0x9c8)]()&&!this[_0xfbbdf6(0xa8f)]()?this[_0xfbbdf6(0xaf0)]():VisuMZ[_0xfbbdf6(0xae3)][_0xfbbdf6(0x618)]['call'](this);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xaf0)]=function(){const _0x36442e=_0x2dcaec,_0x4d872d=String(this['item']()[_0x36442e(0x147)]);return _0x4d872d[_0x36442e(0xb9e)](/(?:RAND|RANDOM)/i);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x49d)]=Game_Action[_0x2dcaec(0xaf6)]['isForAll'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x377)]=function(){const _0x18655f=_0x2dcaec;if(this[_0x18655f(0x274)]===_0x18655f(0x7d3))return!![];if(this['_targetBattlerKey']==='all\x20enemies')return!![];return VisuMZ[_0x18655f(0xae3)][_0x18655f(0x49d)][_0x18655f(0x390)](this);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x8fc)]=function(){const _0x4c8372=_0x2dcaec;if(!this[_0x4c8372(0x719)]())return![];if(this[_0x4c8372(0x2ca)]())return![];return(this['item']()['note']||'')[_0x4c8372(0xb9e)](/<SINGLE OR MULTIPLE SELECT>/i);},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_testApply']=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x34c)],Game_Action[_0x2dcaec(0xaf6)]['testApply']=function(_0x244de5){const _0x46b330=_0x2dcaec;if(this['isForNotUser']()&&_0x244de5===this[_0x46b330(0xafb)]())return![];return VisuMZ[_0x46b330(0xae3)][_0x46b330(0x203)]['call'](this,_0x244de5);},VisuMZ['BattleCore'][_0x2dcaec(0x483)]=Game_Action[_0x2dcaec(0xaf6)]['itemTargetCandidates'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x4c9)]=function(){const _0x53ce6e=_0x2dcaec,_0x141092=VisuMZ[_0x53ce6e(0xae3)][_0x53ce6e(0x483)][_0x53ce6e(0x390)](this);if(this['isForNotUser']())_0x141092['remove'](this['subject']());return _0x141092;},VisuMZ['BattleCore'][_0x2dcaec(0x1d2)]=Game_Action['prototype'][_0x2dcaec(0x7cd)],Game_Action[_0x2dcaec(0xaf6)]['needsSelection']=function(){const _0x4b39b3=_0x2dcaec;return this['isBattleCoreTargetScope']()&&!this['isCustomBattleScope']()?this[_0x4b39b3(0x9db)]():VisuMZ[_0x4b39b3(0xae3)]['Game_Action_needsSelection']['call'](this);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x9db)]=function(){const _0x2e3246=_0x2dcaec,_0x5edddb=String(this['item']()[_0x2e3246(0x147)]);if(_0x5edddb['match'](/RANDOM/i))return![];if(_0x5edddb[_0x2e3246(0xb9e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x5edddb[_0x2e3246(0xb9e)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];if(_0x5edddb[_0x2e3246(0xb9e)](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i))return!![];if(_0x5edddb[_0x2e3246(0xb9e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i))return!![];return VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x2e3246(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x50c)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x6b5)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x6b5)]=function(){const _0x4eeb84=_0x2dcaec;let _0x69e3a9=[];return this['isBattleCoreTargetScope']()?this['isCustomBattleScope']()?_0x69e3a9=this[_0x4eeb84(0x3ef)]():_0x69e3a9=this['makeTargetsBattleCore']():_0x69e3a9=VisuMZ['BattleCore'][_0x4eeb84(0x50c)][_0x4eeb84(0x390)](this),_0x69e3a9=this[_0x4eeb84(0x7e1)](_0x69e3a9),_0x69e3a9;},Game_Action[_0x2dcaec(0xaf6)]['isSubjectValidForAnyoneSelect']=function(){const _0x3b05d6=_0x2dcaec;return this[_0x3b05d6(0xafb)]()['isActor']()&&!this[_0x3b05d6(0xafb)]()[_0x3b05d6(0x576)]();},Game_Action[_0x2dcaec(0xaf6)]['makeTargetsBattleCoreJS']=function(){const _0x381235=_0x2dcaec,_0x32b557=VisuMZ[_0x381235(0xae3)]['createKeyJS'](this['item'](),_0x381235(0xad6));if(VisuMZ[_0x381235(0xae3)]['JS'][_0x32b557]){targets=VisuMZ[_0x381235(0xae3)][_0x381235(0x50c)][_0x381235(0x390)](this);const _0x58c47d=VisuMZ[_0x381235(0xae3)]['createKeyJS'](this[_0x381235(0x719)](),'Targets');return targets=VisuMZ[_0x381235(0xae3)]['JS'][_0x58c47d]['call'](this,this[_0x381235(0xafb)](),targets),this[_0x381235(0x5cd)](targets);}return this[_0x381235(0x5c6)]();},Game_Action['prototype'][_0x2dcaec(0x5c6)]=function(){const _0x4599a3=_0x2dcaec;let _0xd2394a=[];const _0x3767a2=String(this[_0x4599a3(0x719)]()[_0x4599a3(0x147)]);if(this['isForAnyoneFocusOpponents']())return this['isSubjectValidForAnyoneSelect']()?(_0xd2394a=this[_0x4599a3(0x325)](),this[_0x4599a3(0x5cd)](_0xd2394a)):(this['_targetIndex']=-0x1,_0xd2394a[_0x4599a3(0x190)](...this[_0x4599a3(0xa6b)]()),this['repeatTargets'](_0xd2394a));if(this[_0x4599a3(0x5b5)]()){if(this[_0x4599a3(0x9c7)]())return _0xd2394a=this[_0x4599a3(0x325)](),this[_0x4599a3(0x5cd)](_0xd2394a);else{if(Imported[_0x4599a3(0x808)]){if(VisuMZ['BattleAI'][_0x4599a3(0x620)]<1.19){let _0x4755ce='';_0x4755ce+=_0x4599a3(0x5a0),_0x4755ce+=_0x4599a3(0x9e0),_0x4755ce+=_0x4599a3(0x461),alert(_0x4755ce),SceneManager[_0x4599a3(0x33f)]();}}return this[_0x4599a3(0xc26)]=-0x1,_0xd2394a[_0x4599a3(0x190)](...this[_0x4599a3(0xc5c)]()),this[_0x4599a3(0x5cd)](_0xd2394a);}}if(_0x3767a2[_0x4599a3(0xb9e)](/(\d+) RANDOM ANY/i)){let _0x384b50=Number(RegExp['$1']);while(_0x384b50--){const _0x5cf35e=Math[_0x4599a3(0xb44)](0x2)===0x0?this[_0x4599a3(0x2f2)]():this[_0x4599a3(0x630)]();_0xd2394a[_0x4599a3(0x190)](_0x5cf35e[_0x4599a3(0xada)]());}return this['repeatTargets'](_0xd2394a);}if(_0x3767a2['match'](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){let _0x19ae55=Number(RegExp['$1']);while(_0x19ae55--){_0xd2394a['push'](this[_0x4599a3(0x2f2)]()[_0x4599a3(0xada)]());}return this[_0x4599a3(0x5cd)](_0xd2394a);}if(_0x3767a2['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x49ea67=Number(RegExp['$1']);while(_0x49ea67--){_0xd2394a[_0x4599a3(0x190)](this[_0x4599a3(0x630)]()['trueRandomTarget']());}return this[_0x4599a3(0x5cd)](_0xd2394a);}if(_0x3767a2[_0x4599a3(0xb9e)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i))return _0xd2394a[_0x4599a3(0x190)](...this[_0x4599a3(0x630)]()[_0x4599a3(0x9ef)]()['filter'](_0x56569f=>_0x56569f!==this['subject']())),this[_0x4599a3(0x5cd)](_0xd2394a);return VisuMZ[_0x4599a3(0xae3)][_0x4599a3(0x50c)][_0x4599a3(0x390)](this);},Game_Action['prototype']['randomTargets']=function(_0x1fa02e){const _0x1a49ed=_0x2dcaec,_0x2812ab=[];for(let _0x22e0bf=0x0;_0x22e0bf<this[_0x1a49ed(0x7ca)]();_0x22e0bf++){_0x2812ab['push'](_0x1fa02e[_0x1a49ed(0xada)]());}return _0x2812ab;},Game_Action[_0x2dcaec(0xaf6)]['applyTargetFilters']=function(_0x1256e9){const _0x4dd66=_0x2dcaec;if(!this[_0x4dd66(0x719)]())return _0x1256e9;const _0x4e9f24=this[_0x4dd66(0x719)]()[_0x4dd66(0x795)];if(this[_0x4dd66(0x3a4)]()){this[_0x4dd66(0x377)]()&&_0x1256e9['remove'](this[_0x4dd66(0xafb)]());if(_0x1256e9['includes'](this[_0x4dd66(0xafb)]())){const _0x341609=this[_0x4dd66(0x630)]()['aliveMembers']()[_0x4dd66(0xb8d)](this[_0x4dd66(0xafb)]());if(_0x341609['length']>0x0){_0x341609[_0x4dd66(0x6bb)]((_0x5b1792,_0x538805)=>_0x5b1792['hpRate']()-_0x538805[_0x4dd66(0x2e2)]());while(_0x1256e9['includes'](this[_0x4dd66(0xafb)]())){const _0x4569d4=_0x1256e9[_0x4dd66(0x7bc)](this[_0x4dd66(0xafb)]());_0x1256e9[_0x4569d4]=_0x341609[Math[_0x4dd66(0xb44)](_0x341609['length'])];}}else _0x1256e9['remove'](this[_0x4dd66(0xafb)]());}}return _0x1256e9;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x266)]=Game_Action[_0x2dcaec(0xaf6)]['itemEffectAddAttackState'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c2)]=function(_0x47b0e1,_0x65454b){const _0x24723e=_0x2dcaec;VisuMZ[_0x24723e(0xae3)][_0x24723e(0x266)][_0x24723e(0x390)](this,_0x47b0e1,_0x65454b);if(!_0x47b0e1[_0x24723e(0x634)]())return;for(const _0xc0a68 of this['subject']()[_0x24723e(0x992)]()){if(_0xc0a68===_0x47b0e1[_0x24723e(0x636)]()){let _0x57cb4e=_0x65454b['value1'];_0x57cb4e*=_0x47b0e1['stateRate'](_0xc0a68),_0x57cb4e*=this['subject']()[_0x24723e(0x955)](_0xc0a68),_0x57cb4e*=this[_0x24723e(0x9c0)](_0x47b0e1),Math[_0x24723e(0x7af)]()<_0x57cb4e&&(_0x47b0e1[_0x24723e(0x5e7)]=!![],this[_0x24723e(0x753)](_0x47b0e1));}}},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_itemEffectAddNormalState']=Game_Action['prototype'][_0x2dcaec(0xa26)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xa26)]=function(_0xe41c36,_0x45347a){const _0x337327=_0x2dcaec;VisuMZ['BattleCore'][_0x337327(0xb4d)][_0x337327(0x390)](this,_0xe41c36,_0x45347a);if(!_0xe41c36[_0x337327(0x634)]())return;if(_0x45347a[_0x337327(0x91d)]!==_0xe41c36[_0x337327(0x636)]())return;let _0x4a2b71=_0x45347a['value1'];!this[_0x337327(0x9eb)]()&&(_0x4a2b71*=_0xe41c36[_0x337327(0x2a6)](_0x45347a[_0x337327(0x91d)]),_0x4a2b71*=this[_0x337327(0x9c0)](_0xe41c36)),Math['random']()<_0x4a2b71&&(_0xe41c36['_deathStateApplied']=!![],this[_0x337327(0x753)](_0xe41c36));},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_applyGlobal']=Game_Action[_0x2dcaec(0xaf6)]['applyGlobal'],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x329)]=function(){const _0x8c347c=_0x2dcaec;VisuMZ[_0x8c347c(0xae3)][_0x8c347c(0x6db)][_0x8c347c(0x390)](this),this['applyGlobalCommonEventNotetags'](),this[_0x8c347c(0x539)]();},Game_Action['prototype'][_0x2dcaec(0x341)]=function(){const _0x17b76e=_0x2dcaec;if(!SceneManager[_0x17b76e(0xa2b)]())return;const _0x71fba4=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x43ec18=this[_0x17b76e(0x719)]()['note']['match'](_0x71fba4);if(_0x43ec18)for(const _0x2d3c1e of _0x43ec18){if(!_0x2d3c1e)continue;_0x2d3c1e[_0x17b76e(0xb9e)](_0x71fba4);const _0x31d269=String(RegExp['$1'])[_0x17b76e(0x13b)](',')[_0x17b76e(0xc20)](_0x3e6424=>String(_0x3e6424)[_0x17b76e(0x651)]()),_0x975eca=_0x31d269[_0x17b76e(0xc20)](_0x3ce9d4=>DataManager['getCommonEventIdWithName'](_0x3ce9d4));for(const _0x2dcf9c of _0x975eca){const _0x1f0cf9=$dataCommonEvents[_0x2dcf9c];_0x1f0cf9&&$gameTemp[_0x17b76e(0x72f)](_0x2dcf9c);}}},DataManager['getCommonEventIdWithName']=function(_0x511ab2){const _0x467223=_0x2dcaec;_0x511ab2=_0x511ab2['toUpperCase']()[_0x467223(0x651)](),this[_0x467223(0x1a2)]=this[_0x467223(0x1a2)]||{};if(this[_0x467223(0x1a2)][_0x511ab2])return this[_0x467223(0x1a2)][_0x511ab2];for(const _0x5aa906 of $dataCommonEvents){if(!_0x5aa906)continue;let _0x4812f2=_0x5aa906[_0x467223(0x321)];_0x4812f2=_0x4812f2[_0x467223(0x1d3)](/\x1I\[(\d+)\]/gi,''),_0x4812f2=_0x4812f2[_0x467223(0x1d3)](/\\I\[(\d+)\]/gi,''),this[_0x467223(0x1a2)][_0x4812f2[_0x467223(0xb9f)]()['trim']()]=_0x5aa906['id'];}return this[_0x467223(0x1a2)][_0x511ab2]||0x0;},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x539)]=function(){const _0x167fea=_0x2dcaec;if(!SceneManager[_0x167fea(0xa2b)]())return;const _0x256c42=VisuMZ[_0x167fea(0xae3)][_0x167fea(0xbeb)][_0x167fea(0x41e)];_0x256c42['SwitchCritical']&&$gameSwitches['setValue'](_0x256c42[_0x167fea(0x211)],![]),_0x256c42[_0x167fea(0x87d)]&&$gameSwitches[_0x167fea(0xa8a)](_0x256c42[_0x167fea(0x87d)],![]),_0x256c42[_0x167fea(0xc1d)]&&$gameVariables[_0x167fea(0xa8a)](_0x256c42['VariableDmg'],0x0),_0x256c42[_0x167fea(0x878)]&&$gameVariables[_0x167fea(0xa8a)](_0x256c42[_0x167fea(0x878)],0x0);},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x454)]=function(_0x4ed87c){const _0x31734e=_0x2dcaec;if(!SceneManager[_0x31734e(0xa2b)]())return;if(!_0x4ed87c)return;const _0x53453b=_0x4ed87c['result'](),_0xb96412=VisuMZ[_0x31734e(0xae3)][_0x31734e(0xbeb)][_0x31734e(0x41e)];_0xb96412[_0x31734e(0x211)]&&_0x53453b[_0x31734e(0x73b)]&&$gameSwitches['setValue'](_0xb96412[_0x31734e(0x211)],!![]);_0xb96412['SwitchMissEvade']&&(_0x53453b[_0x31734e(0x2ef)]||_0x53453b['evaded'])&&$gameSwitches['setValue'](_0xb96412[_0x31734e(0x87d)],!![]);if(_0xb96412[_0x31734e(0xc1d)]){let _0x3977e5=$gameVariables[_0x31734e(0x2df)](_0xb96412[_0x31734e(0xc1d)]);_0x53453b[_0x31734e(0x414)]>0x0&&(_0x3977e5+=Math[_0x31734e(0x2ac)](_0x53453b[_0x31734e(0x414)])),$gameVariables[_0x31734e(0xa8a)](_0xb96412[_0x31734e(0xc1d)],_0x3977e5);}if(_0xb96412[_0x31734e(0x878)]){let _0xea77f9=$gameVariables[_0x31734e(0x2df)](_0xb96412[_0x31734e(0x878)]);_0x53453b[_0x31734e(0x414)]<0x0&&(_0xea77f9+=Math[_0x31734e(0x2ac)](_0x53453b[_0x31734e(0x414)])),$gameVariables[_0x31734e(0xa8a)](_0xb96412[_0x31734e(0x878)],_0xea77f9);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8d2)]={'lifeSteaItem':/<(.*?) (?:LIFE|MANA) STEAL:[ ](\d+)([%％])>/gi,'lifeStealTrait':/<(.*?) (?:LIFE|MANA) STEAL (.*?):[ ]([\+\-]\d+)([%％])>/gi,'cancelLifeSteal':/<CANCEL LIFE STEAL>/i,'cancelHpLifeSteal':/<CANCEL HP LIFE STEAL>/i,'cancelMpLifeSteal':/<CANCEL MP LIFE STEAL>/i,'guardLifeSteal':/<GUARD LIFE STEAL>/i,'guardHpLifeSteal':/<GUARD HP LIFE STEAL>/i,'guardMpLifeSteal':/<GUARD MP LIFE STEAL>/i,'disarmLifeSteal':/<DISARM LIFE STEAL>/i,'disarmHpLifeSteal':/<DISARM HP LIFE STEAL>/i,'disarmMpLifeSteal':/<DISARM MP LIFE STEAL>/i,'negativeLifeSteal':/<REVERSE LIFE STEAL>/i,'negativeHpLifeSteal':/<REVERSE HP LIFE STEAL>/i,'negativeMpLifeSteal':/<REVERSE MP LIFE STEAL>/i},VisuMZ[_0x2dcaec(0xae3)]['Game_Action_executeHpDamage']=Game_Action[_0x2dcaec(0xaf6)]['executeHpDamage'],Game_Action[_0x2dcaec(0xaf6)]['executeHpDamage']=function(_0x3d53df,_0x209bef){const _0x5762ad=_0x2dcaec;VisuMZ[_0x5762ad(0xae3)][_0x5762ad(0x1f2)][_0x5762ad(0x390)](this,_0x3d53df,_0x209bef);!this['isDrain']()&&_0x3d53df&&_0x3d53df[_0x5762ad(0x1b5)]()[_0x5762ad(0x414)]>0x0&&this[_0x5762ad(0x528)]('HP',_0x3d53df,_0x3d53df[_0x5762ad(0x1b5)]()[_0x5762ad(0x414)]);if(_0x3d53df){this[_0x5762ad(0x73c)]=this[_0x5762ad(0x73c)]||{};const _0x2a7b82=_0x3d53df['battlerKey']();this['_executeHpDamage'][_0x2a7b82]=_0x209bef;}},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x871)]=function(_0x4cedd8){const _0x5770c3=_0x2dcaec;this[_0x5770c3(0x73c)]=this['_executeHpDamage']||{};const _0x450d23=_0x4cedd8[_0x5770c3(0x233)]();return this[_0x5770c3(0x73c)][_0x450d23]||0x0;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x337)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x9ce)],Game_Action['prototype'][_0x2dcaec(0x9ce)]=function(_0x10265a,_0x4e7db6){const _0x2f59cc=_0x2dcaec;VisuMZ[_0x2f59cc(0xae3)][_0x2f59cc(0x337)][_0x2f59cc(0x390)](this,_0x10265a,_0x4e7db6),!this[_0x2f59cc(0x5f0)]()&&_0x10265a&&_0x10265a['result']()[_0x2f59cc(0x790)]>0x0&&this['performLifeSteal']('MP',_0x10265a,_0x10265a[_0x2f59cc(0x1b5)]()['mpDamage']);},Game_Action[_0x2dcaec(0xaf6)]['performLifeSteal']=function(_0x2a5563,_0xd5c67f,_0x7a14de){const _0x14de2c=_0x2dcaec;_0x2a5563=_0x2a5563[_0x14de2c(0xb9f)]()[_0x14de2c(0x651)]();const _0x3f236f=this[_0x14de2c(0x9b8)](_0x2a5563,_0xd5c67f);if(_0x3f236f<=0x0)return;const _0x161278=Math[_0x14de2c(0x976)](_0x7a14de*_0x3f236f);if(_0x161278<=0x0)return;let _0xdd2d39=this[_0x14de2c(0xafb)]();if(this[_0x14de2c(0xaf4)])_0xdd2d39=this['_reflectionTarget'];const _0x42aa7f=_0xd5c67f['isNegativeLifeSteal'](_0x2a5563)?-0x1:0x1;if(_0x2a5563==='HP')_0xdd2d39[_0x14de2c(0xc73)](_0x42aa7f*_0x161278);if(_0x2a5563==='MP')_0xdd2d39[_0x14de2c(0x77c)](_0x42aa7f*_0x161278);},Game_Action['prototype'][_0x2dcaec(0x9b8)]=function(_0x2d18b0,_0x4c438e){const _0x2a5a43=_0x2dcaec;if(this[_0x2a5a43(0xad1)](_0x2d18b0))return 0x0;if(this['subject']()[_0x2a5a43(0x2b1)](_0x2d18b0))return 0x0;if(_0x4c438e[_0x2a5a43(0xacc)](_0x2d18b0))return 0x0;let _0x4fbb41=0x0;return _0x4fbb41+=this[_0x2a5a43(0x245)](_0x2d18b0),_0x4fbb41+=this[_0x2a5a43(0xafb)]()[_0x2a5a43(0x9b8)](_0x2d18b0,this[_0x2a5a43(0x719)]()[_0x2a5a43(0x95b)]),_0x4fbb41['clamp'](0x0,0x1);},Game_Action[_0x2dcaec(0xaf6)]['isCancelLifeSteal']=function(_0xb43917){const _0x88e2a9=_0x2dcaec;_0xb43917=_0xb43917[_0x88e2a9(0xb9f)]()[_0x88e2a9(0x651)]();const _0x4a4a18=VisuMZ[_0x88e2a9(0xae3)][_0x88e2a9(0x8d2)],_0x8bd764=this[_0x88e2a9(0x719)]()[_0x88e2a9(0x795)]||'';if(_0x8bd764[_0x88e2a9(0xb9e)](_0x4a4a18[_0x88e2a9(0x2c9)]))return!![];if(_0xb43917==='HP'&&_0x8bd764[_0x88e2a9(0xb9e)](_0x4a4a18[_0x88e2a9(0xbf0)]))return!![];if(_0xb43917==='MP'&&_0x8bd764['match'](_0x4a4a18['cancelMpLifeSteal']))return!![];return![];},Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x245)]=function(_0x35b173){const _0x31e32d=_0x2dcaec,_0x5a8a65=VisuMZ[_0x31e32d(0xae3)][_0x31e32d(0x8d2)],_0x5bb0ed=this[_0x31e32d(0x719)]()[_0x31e32d(0x795)]||'';_0x35b173=_0x35b173[_0x31e32d(0xb9f)]()[_0x31e32d(0x651)]();const _0x4244c8=_0x5bb0ed[_0x31e32d(0xb9e)](_0x5a8a65[_0x31e32d(0x5db)]);if(_0x4244c8)for(const _0x27c96c of _0x4244c8){_0x27c96c['match'](_0x5a8a65[_0x31e32d(0x5db)]);const _0x72ddb0=String(RegExp['$1'])[_0x31e32d(0xb9f)]()[_0x31e32d(0x651)](),_0x59c79a=Number(RegExp['$2'])*0.01;if(_0x72ddb0!==_0x35b173)continue;return _0x59c79a;}return 0x0;},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x9b8)]=function(_0x288046,_0x529f5c){const _0x3a57b4=_0x2dcaec,_0x218dd4=VisuMZ['BattleCore']['LifeStealRegExp'];let _0x509e65=0x0;_0x288046=_0x288046[_0x3a57b4(0xb9f)]()[_0x3a57b4(0x651)]();for(const _0x22dd51 of this[_0x3a57b4(0x517)]()){if(!_0x22dd51)continue;const _0x294f22=_0x22dd51[_0x3a57b4(0x795)]||'',_0xc8bbd=_0x294f22['match'](_0x218dd4[_0x3a57b4(0x258)]);if(_0xc8bbd)for(const _0x48f0c8 of _0xc8bbd){_0x48f0c8[_0x3a57b4(0xb9e)](_0x218dd4['lifeStealTrait']);const _0x301bbe=String(RegExp['$1'])['toUpperCase']()[_0x3a57b4(0x651)](),_0x3aa1d6=String(RegExp['$2']),_0x369262=Number(RegExp['$3'])*0.01;if(_0x301bbe!==_0x288046)continue;if(_0x529f5c===Game_Action[_0x3a57b4(0x662)]&&_0x3aa1d6[_0x3a57b4(0xb9e)](/CERTAIN/i))_0x509e65+=_0x369262;else{if(_0x529f5c===Game_Action['HITTYPE_PHYSICAL']&&_0x3aa1d6[_0x3a57b4(0xb9e)](/PHYS/i))_0x509e65+=_0x369262;else _0x529f5c===Game_Action[_0x3a57b4(0xab9)]&&_0x3aa1d6[_0x3a57b4(0xb9e)](/MAGIC/i)&&(_0x509e65+=_0x369262);}}}return _0x509e65;},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x2b1)]=function(_0x4065f7){const _0x564deb=_0x2dcaec;_0x4065f7=_0x4065f7[_0x564deb(0xb9f)]()[_0x564deb(0x651)]();const _0x5434b7=VisuMZ['BattleCore'][_0x564deb(0x8d2)];for(const _0x76a546 of this[_0x564deb(0x517)]()){if(!_0x76a546)continue;const _0x35726b=_0x76a546[_0x564deb(0x795)]||'';if(_0x35726b[_0x564deb(0xb9e)](_0x5434b7[_0x564deb(0x24c)]))return!![];if(_0x4065f7==='HP'&&_0x35726b[_0x564deb(0xb9e)](_0x5434b7[_0x564deb(0xa77)]))return!![];if(_0x4065f7==='MP'&&_0x35726b['match'](_0x5434b7[_0x564deb(0x27f)]))return!![];}return![];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x6f2)]=function(_0x28859d){const _0x5108a1=_0x2dcaec;_0x28859d=_0x28859d['toUpperCase']()[_0x5108a1(0x651)]();const _0x2613ad=VisuMZ[_0x5108a1(0xae3)][_0x5108a1(0x8d2)];for(const _0x5ccdff of this[_0x5108a1(0x517)]()){if(!_0x5ccdff)continue;const _0x36b2a9=_0x5ccdff[_0x5108a1(0x795)]||'';if(_0x36b2a9[_0x5108a1(0xb9e)](_0x2613ad[_0x5108a1(0x6a9)]))return!![];if(_0x28859d==='HP'&&_0x36b2a9['match'](_0x2613ad['negativeHpLifeSteal']))return!![];if(_0x28859d==='MP'&&_0x36b2a9[_0x5108a1(0xb9e)](_0x2613ad[_0x5108a1(0x54f)]))return!![];}return![];},Game_BattlerBase[_0x2dcaec(0xaf6)]['isGuardLifeSteal']=function(_0x4507c1){const _0xf75e33=_0x2dcaec;_0x4507c1=_0x4507c1[_0xf75e33(0xb9f)]()[_0xf75e33(0x651)]();const _0x3aa129=VisuMZ[_0xf75e33(0xae3)][_0xf75e33(0x8d2)];for(const _0x162296 of this[_0xf75e33(0x517)]()){if(!_0x162296)continue;const _0x1a7479=_0x162296['note']||'';if(_0x1a7479[_0xf75e33(0xb9e)](_0x3aa129['guardLifeSteal']))return!![];if(_0x4507c1==='HP'&&_0x1a7479[_0xf75e33(0xb9e)](_0x3aa129[_0xf75e33(0x95a)]))return!![];if(_0x4507c1==='MP'&&_0x1a7479[_0xf75e33(0xb9e)](_0x3aa129[_0xf75e33(0xba0)]))return!![];}return![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x964)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xaab)],Game_BattlerBase['prototype'][_0x2dcaec(0xaab)]=function(){const _0x368331=_0x2dcaec;VisuMZ[_0x368331(0xae3)]['Game_BattlerBase_initMembers'][_0x368331(0x390)](this),this[_0x368331(0x5a8)]();},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x5a8)]=function(){this['_immortal']=![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc0b)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc9)],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc9)]=function(){const _0x197817=_0x2dcaec;this[_0x197817(0xc3c)]={},VisuMZ[_0x197817(0xae3)][_0x197817(0xc0b)]['call'](this);},Game_BattlerBase['prototype'][_0x2dcaec(0x520)]=function(_0x308691){const _0x52962b=_0x2dcaec;return this['_cache']=this['_cache']||{},this[_0x52962b(0xc3c)][_0x308691]!==undefined;},Game_BattlerBase['prototype'][_0x2dcaec(0xb38)]=function(){const _0x3dc9f6=_0x2dcaec;if(this[_0x3dc9f6(0xc3c)][_0x3dc9f6(0xb38)]!==undefined)return this[_0x3dc9f6(0xc3c)][_0x3dc9f6(0xb38)];const _0x1a6c65=/<DAMAGE CAP:[ ](\d+)>/i,_0x5134c6=this[_0x3dc9f6(0x517)]()[_0x3dc9f6(0xc20)](_0x101e4e=>_0x101e4e&&_0x101e4e[_0x3dc9f6(0x795)][_0x3dc9f6(0xb9e)](_0x1a6c65)?Number(RegExp['$1']):0x0);let _0x4c8e8d=_0x5134c6['length']>0x0?Math[_0x3dc9f6(0x959)](..._0x5134c6):0x0;if(_0x4c8e8d<=0x0)_0x4c8e8d=VisuMZ[_0x3dc9f6(0xae3)][_0x3dc9f6(0xbeb)][_0x3dc9f6(0x53c)][_0x3dc9f6(0x80e)];return this[_0x3dc9f6(0xc3c)][_0x3dc9f6(0xb38)]=_0x4c8e8d,this[_0x3dc9f6(0xc3c)]['hardDamageCap'];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x490)]=function(){const _0x342869=_0x2dcaec;if(this[_0x342869(0xc3c)]['softDamageCap']!==undefined)return this[_0x342869(0xc3c)][_0x342869(0x627)];let _0x17a521=VisuMZ[_0x342869(0xae3)][_0x342869(0xbeb)]['Damage'][_0x342869(0x7eb)];const _0x31677a=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x575d20=this['traitObjects']()[_0x342869(0xc20)](_0x1187ff=>_0x1187ff&&_0x1187ff[_0x342869(0x795)][_0x342869(0xb9e)](_0x31677a)?Number(RegExp['$1'])/0x64:0x0);return _0x17a521=_0x575d20['reduce']((_0x33c404,_0x438dad)=>_0x33c404+_0x438dad,_0x17a521),this[_0x342869(0xc3c)]['softDamageCap']=_0x17a521,this[_0x342869(0xc3c)]['softDamageCap'][_0x342869(0xc50)](0.01,0x1);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4ab)]=Game_BattlerBase[_0x2dcaec(0xaf6)]['die'],Game_BattlerBase[_0x2dcaec(0xaf6)]['die']=function(){const _0x5eb5f1=_0x2dcaec;VisuMZ['BattleCore'][_0x5eb5f1(0x4ab)][_0x5eb5f1(0x390)](this),SceneManager[_0x5eb5f1(0xa2b)]()&&(this[_0x5eb5f1(0x4a5)]('dead'),this[_0x5eb5f1(0xc3b)]=undefined);},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc2)]=function(){const _0x830764=_0x2dcaec;if(!SceneManager[_0x830764(0xa2b)]())return null;if(!SceneManager[_0x830764(0x496)][_0x830764(0x2a3)])return null;return SceneManager['_scene'][_0x830764(0x2a3)][_0x830764(0x2c5)](this);},Game_BattlerBase['prototype']['svBattlerAnchorX']=function(){const _0x19f08f=_0x2dcaec;return VisuMZ[_0x19f08f(0xae3)][_0x19f08f(0xbeb)][_0x19f08f(0x46b)][_0x19f08f(0x45c)];},Game_BattlerBase[_0x2dcaec(0xaf6)]['svBattlerAnchorY']=function(){const _0x518b55=_0x2dcaec;return VisuMZ[_0x518b55(0xae3)][_0x518b55(0xbeb)]['Actor'][_0x518b55(0x5e4)];},Game_BattlerBase['prototype']['svBattlerShadowVisible']=function(){const _0x3cc2a0=_0x2dcaec;return this[_0x3cc2a0(0x8d6)]&&this[_0x3cc2a0(0x8d6)]()?VisuMZ['BattleCore']['Settings']['Actor']['Shadow']:VisuMZ[_0x3cc2a0(0xae3)]['Settings'][_0x3cc2a0(0xc36)][_0x3cc2a0(0x916)];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x1b0)]=function(){return!![];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c1)]=function(){return 0x0;},Game_BattlerBase['prototype'][_0x2dcaec(0x7a9)]=function(){return 0x0;},Game_BattlerBase[_0x2dcaec(0xaf6)]['createBattleUIOffsetX']=function(_0x38e818){const _0x53bcf9=_0x2dcaec;if(!_0x38e818)return 0x0;let _0x15239f=0x0;const _0x31ae52=_0x38e818[_0x53bcf9(0x795)];return _0x31ae52[_0x53bcf9(0xb9e)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x15239f+=Number(RegExp['$1'])),_0x31ae52[_0x53bcf9(0xb9e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x15239f+=Number(RegExp['$1'])),_0x15239f;},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xa35)]=function(_0x58f824){const _0x53c94c=_0x2dcaec;if(!_0x58f824)return 0x0;let _0x3248aa=0x0;const _0x3587e8=_0x58f824[_0x53c94c(0x795)];return _0x3587e8[_0x53c94c(0xb9e)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&(_0x3248aa+=Number(RegExp['$1'])),_0x3587e8[_0x53c94c(0xb9e)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x3248aa+=Number(RegExp['$2'])),_0x3248aa;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6fa)]=Game_BattlerBase['prototype']['isStateResist'],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x2bd)]=function(_0x292f8c){const _0x384814=_0x2dcaec;if(_0x292f8c===this['deathStateId']()&&this[_0x384814(0x634)]())return!![];return VisuMZ['BattleCore'][_0x384814(0x6fa)][_0x384814(0x390)](this,_0x292f8c);},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x634)]=function(){const _0x4db8e5=_0x2dcaec;return this[_0x4db8e5(0x48e)];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x44c)]=function(_0x5a3c3f){const _0x11430a=_0x2dcaec;_0x5a3c3f?this[_0x11430a(0x2fb)]():this['removeImmortal']();},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x2fb)]=function(){const _0x1ac763=_0x2dcaec;if(this[_0x1ac763(0x1f5)]())return;this['_immortal']=!![],this['_deathStateApplied']=![];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xb5e)]=function(){const _0x20bc2f=_0x2dcaec,_0xa15799=this[_0x20bc2f(0x2b5)]();this[_0x20bc2f(0x48e)]=![],_0xa15799&&this[_0x20bc2f(0x5e7)]&&this[_0x20bc2f(0xb1b)](),this[_0x20bc2f(0x5e7)]=![],this[_0x20bc2f(0xbc9)](),this['isDead']()&&_0xa15799&&(this['performCollapse'](),this[_0x20bc2f(0xb03)]());},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5e9)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a5)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a5)]=function(){const _0x1cabbf=_0x2dcaec;return this[_0x1cabbf(0x719)]()?VisuMZ[_0x1cabbf(0xae3)][_0x1cabbf(0x5e9)][_0x1cabbf(0x390)](this):0x0;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4b6)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xb85)],Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0xb85)]=function(){const _0x187859=_0x2dcaec;if(this[_0x187859(0xafb)]()&&this[_0x187859(0xafb)]()['canAttack']())VisuMZ[_0x187859(0xae3)][_0x187859(0x4b6)]['call'](this);else BattleManager[_0x187859(0xc7e)]?VisuMZ[_0x187859(0xae3)][_0x187859(0x4b6)][_0x187859(0x390)](this):this['clear']();},VisuMZ['BattleCore'][_0x2dcaec(0x720)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbf6)],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbf6)]=function(){const _0x19a798=_0x2dcaec;if(!this[_0x19a798(0x895)]())return![];return VisuMZ['BattleCore'][_0x19a798(0x720)][_0x19a798(0x390)](this);},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x895)]=function(){const _0x4744e5=_0x2dcaec;for(const _0x4b573b of this['traitObjects']()){if(!_0x4b573b)continue;if(_0x4b573b[_0x4744e5(0x795)][_0x4744e5(0xb9e)](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}return!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa0e)]=Game_Action[_0x2dcaec(0xaf6)]['setGuard'],Game_Action['prototype'][_0x2dcaec(0x1c5)]=function(){const _0x34e7d3=_0x2dcaec;this[_0x34e7d3(0xafb)]()[_0x34e7d3(0xbbe)]()&&VisuMZ[_0x34e7d3(0xae3)][_0x34e7d3(0xa0e)][_0x34e7d3(0x390)](this);},VisuMZ['BattleCore']['Game_BattlerBase_canGuard']=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbbe)],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbbe)]=function(){const _0x5292ce=_0x2dcaec;if(!this[_0x5292ce(0xa63)]())return![];return VisuMZ[_0x5292ce(0xae3)][_0x5292ce(0x6fe)][_0x5292ce(0x390)](this);},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xa63)]=function(){const _0x1ddb2a=_0x2dcaec;for(const _0x550f26 of this['traitObjects']()){if(!_0x550f26)continue;if(_0x550f26[_0x1ddb2a(0x795)][_0x1ddb2a(0xb9e)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}return!![];},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbb0)]=function(){const _0x37c425=_0x2dcaec;for(const _0x59b9fb of this['traitObjects']()){if(!_0x59b9fb)continue;if(_0x59b9fb[_0x37c425(0x795)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x672)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xb6e)],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xb6e)]=function(_0x3166a4){const _0x3ad7c1=_0x2dcaec;if(_0x3166a4&&_0x3166a4[_0x3ad7c1(0x795)]['match'](/<CANNOT TARGET (?:USER|SELF)>/i)){const _0x53fa24=this[_0x3ad7c1(0x630)]()['aliveMembers']();if(_0x53fa24[_0x3ad7c1(0x7ce)]===0x1&&_0x53fa24[0x0]===this)return![];}return VisuMZ[_0x3ad7c1(0xae3)]['Game_BattlerBase_meetsUsableItemConditions']['call'](this,_0x3166a4);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x855)]=function(){const _0x2dba20=_0x2dcaec;return VisuMZ[_0x2dba20(0xae3)][_0x2dba20(0xbeb)]['Mechanics'][_0x2dba20(0x236)];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9a8)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8b5)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8b5)]=function(){const _0x1f722b=_0x2dcaec;if(SceneManager[_0x1f722b(0xa2b)]()){if(BattleManager[_0x1f722b(0x17f)]()){if(this[_0x1f722b(0x6c2)]()<=0x0)return;}else{if($gameTroop[_0x1f722b(0x6c2)]()<=0x0)return;}}if(SceneManager['isSceneBattle']()&&BattleManager['isTpb']()&&this[_0x1f722b(0x29b)]===Graphics[_0x1f722b(0x7e7)])return;this['_lastRegenFrameCount']=Graphics['frameCount'],SceneManager['isSceneBattle']()&&this['processBattleCoreJS'](_0x1f722b(0xa24)),VisuMZ[_0x1f722b(0xae3)]['Game_Battler_regenerateAll'][_0x1f722b(0x390)](this),SceneManager[_0x1f722b(0xa2b)]()&&(this[_0x1f722b(0x77a)](),this[_0x1f722b(0xbd1)](_0x1f722b(0x653)));},Game_Battler[_0x2dcaec(0xaf6)]['regenerateAllBattleCore']=function(){const _0x5a0ac9=_0x2dcaec;if(SceneManager[_0x5a0ac9(0xa2b)]())for(const _0x309077 of this[_0x5a0ac9(0x517)]()){if(!_0x309077)continue;this['onRegeneratePlayStateAnimation'](_0x309077);}},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x424)]=function(_0x3e12e1){const _0x4ab1d6=_0x2dcaec;if(!Imported['VisuMZ_0_CoreEngine'])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x4ab1d6(0x1f5)]())return;if(this[_0x4ab1d6(0x478)]())return;if(_0x3e12e1['note'][_0x4ab1d6(0xb9e)](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){const _0x5a20cb=Number(RegExp['$1']);$gameTemp[_0x4ab1d6(0xbb2)]([this],_0x5a20cb,![],![]);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9b9)]=Game_Battler['prototype'][_0x2dcaec(0xc32)],Game_Battler['prototype'][_0x2dcaec(0xc32)]=function(){const _0x3d457c=_0x2dcaec;this[_0x3d457c(0xbd1)](_0x3d457c(0x892)),VisuMZ[_0x3d457c(0xae3)]['Game_Battler_startTpbTurn'][_0x3d457c(0x390)](this),this[_0x3d457c(0xbd1)]('PostStartTurnJS');},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xba3)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x81e)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x81e)]=function(){const _0x5e4ef2=_0x2dcaec;this[_0x5e4ef2(0xbd1)](_0x5e4ef2(0xb14)),VisuMZ[_0x5e4ef2(0xae3)][_0x5e4ef2(0xba3)][_0x5e4ef2(0x390)](this),VisuMZ[_0x5e4ef2(0xae3)][_0x5e4ef2(0xbeb)][_0x5e4ef2(0x41e)][_0x5e4ef2(0x5b7)]&&this['removeBuffsAuto'](),this[_0x5e4ef2(0xbd1)](_0x5e4ef2(0x531));},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xbd1)]=function(_0x1ca08d){const _0x42a24e=_0x2dcaec;if(this[_0x42a24e(0x97d)]||this[_0x42a24e(0x3ff)])return;const _0x4b1ef2=VisuMZ[_0x42a24e(0xae3)][_0x42a24e(0xbeb)][_0x42a24e(0x41e)];if(_0x4b1ef2[_0x1ca08d])_0x4b1ef2[_0x1ca08d]['call'](this);for(const _0x5ed286 of this[_0x42a24e(0x517)]()){if(!_0x5ed286)continue;key=VisuMZ['BattleCore']['createKeyJS'](_0x5ed286,_0x1ca08d),VisuMZ[_0x42a24e(0xae3)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key]['call'](this,this,this,_0x5ed286,0x0);}},Game_Battler['prototype']['chantStyle']=function(){const _0x5e2bc7=_0x2dcaec;return VisuMZ[_0x5e2bc7(0xae3)]['Settings'][_0x5e2bc7(0x46b)][_0x5e2bc7(0xa79)]||![];},Game_Battler[_0x2dcaec(0xaf6)]['isChanting']=function(){const _0x25e151=_0x2dcaec;if(this[_0x25e151(0xa1c)]()){if(this[_0x25e151(0x9ac)]()){if(this['_actions'][_0x25e151(0x624)](_0x3cc515=>_0x3cc515[_0x25e151(0x719)]()&&_0x3cc515[_0x25e151(0x410)]()))return!![];}else{if(this[_0x25e151(0xaa2)][_0x25e151(0x624)](_0x12868a=>_0x12868a[_0x25e151(0x719)]()&&_0x12868a[_0x25e151(0x67a)]()))return!![];}}if(BattleManager[_0x25e151(0x17f)]()&&this['_tpbState']==='casting')return this[_0x25e151(0x9ac)]()?this[_0x25e151(0x3ab)]()&&this['currentAction']()['item']()&&this['currentAction']()[_0x25e151(0x410)]():this[_0x25e151(0x3ab)]()&&this[_0x25e151(0x3ab)]()[_0x25e151(0x719)]()&&this[_0x25e151(0x3ab)]()[_0x25e151(0x67a)]();return![];},Game_Battler['prototype'][_0x2dcaec(0xa8e)]=function(){const _0x5bd1d4=_0x2dcaec;if(BattleManager[_0x5bd1d4(0x17f)]()&&this[_0x5bd1d4(0x36b)]===_0x5bd1d4(0x56f))return this[_0x5bd1d4(0x9ac)]()?this['currentAction']()&&this[_0x5bd1d4(0x3ab)]()[_0x5bd1d4(0x719)]()&&!this[_0x5bd1d4(0x3ab)]()['isMagical']():this[_0x5bd1d4(0x3ab)]()&&this[_0x5bd1d4(0x3ab)]()[_0x5bd1d4(0x719)]()&&!this[_0x5bd1d4(0x3ab)]()[_0x5bd1d4(0x67a)]();return![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbaf)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d8)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d8)]=function(){const _0x47b583=_0x2dcaec;VisuMZ['BattleCore']['Game_Battler_clearDamagePopup']['call'](this),this[_0x47b583(0x961)]=[];},Game_Battler['prototype'][_0x2dcaec(0x8c4)]=function(){const _0x28251f=_0x2dcaec;if(!this['_damagePopupArray'])this[_0x28251f(0x5d8)]();return this[_0x28251f(0x961)][_0x28251f(0x7ce)]>0x0;},Game_Battler['prototype']['startDamagePopup']=function(){const _0x554289=_0x2dcaec;if(!SceneManager[_0x554289(0xa2b)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this[_0x554289(0x961)])this['clearDamagePopup']();this[_0x554289(0xc14)]();const _0x31a2ef=this[_0x554289(0xbc2)]();if(_0x31a2ef)_0x31a2ef['setupDamagePopup']();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xc14)]=function(){const _0x17f8c5=_0x2dcaec,_0x521f9c=this[_0x17f8c5(0x1b5)]();if(_0x521f9c[_0x17f8c5(0x2ef)]||_0x521f9c[_0x17f8c5(0x938)]){const _0x5b6e27=JsonEx[_0x17f8c5(0xa12)](_0x521f9c);_0x5b6e27[_0x17f8c5(0x6c7)]=![],_0x5b6e27[_0x17f8c5(0x790)]=0x0,this['_damagePopupArray'][_0x17f8c5(0x190)](_0x5b6e27);if(!_0x521f9c[_0x17f8c5(0x414)]&&!_0x521f9c[_0x17f8c5(0x790)])return;}if(_0x521f9c[_0x17f8c5(0x6c7)]){const _0x2b82b6=JsonEx[_0x17f8c5(0xa12)](_0x521f9c);_0x2b82b6[_0x17f8c5(0x2ef)]=![],_0x2b82b6[_0x17f8c5(0x938)]=![],_0x2b82b6['mpDamage']=0x0,this[_0x17f8c5(0x961)][_0x17f8c5(0x190)](_0x2b82b6);}if(_0x521f9c['mpDamage']!==0x0){const _0x4897bc=JsonEx[_0x17f8c5(0xa12)](_0x521f9c);_0x4897bc[_0x17f8c5(0x2ef)]=![],_0x4897bc[_0x17f8c5(0x938)]=![],_0x4897bc[_0x17f8c5(0x6c7)]=![],this[_0x17f8c5(0x961)][_0x17f8c5(0x190)](_0x4897bc);}},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x637)]=function(){const _0x3c2a43=_0x2dcaec;if(!this[_0x3c2a43(0x961)])this['clearDamagePopup']();return VisuMZ[_0x3c2a43(0xae3)][_0x3c2a43(0xbeb)]['Damage']['NewPopupBottom']?this[_0x3c2a43(0x961)][_0x3c2a43(0xa0f)]():this[_0x3c2a43(0x961)][_0x3c2a43(0x8ed)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x495)]=function(_0x5d8f74,_0x5140cc){const _0xde879d=_0x2dcaec;if(!SceneManager[_0xde879d(0xa2b)]())return;if(BattleManager['shouldHideBattleEndPopups']())return;if(!this['battler']())return;if(_0x5d8f74[_0xde879d(0x7ce)]<=0x0)return;_0x5140cc=_0x5140cc||{},_0x5140cc[_0xde879d(0x33d)]=_0x5140cc[_0xde879d(0x33d)]||_0xde879d(0xb51),_0x5140cc[_0xde879d(0x4fa)]=_0x5140cc[_0xde879d(0x4fa)]||[0x0,0x0,0x0,0x0],_0x5140cc['flashDuration']=_0x5140cc['flashDuration']||0x0,this[_0xde879d(0xbc2)]()[_0xde879d(0x495)](_0x5d8f74,_0x5140cc);},Game_Battler['prototype'][_0x2dcaec(0x411)]=function(_0x22dfd9,_0x253e64,_0x9664a2){const _0x360b67=_0x2dcaec;if(!SceneManager['isSceneBattle']())return;if(BattleManager[_0x360b67(0x3d0)]())return;if(!this['battler']())return;if(_0x253e64[_0x360b67(0x7ce)]<=0x0)return;_0x9664a2=_0x9664a2||{},_0x9664a2['textColor']=_0x9664a2[_0x360b67(0x33d)]||_0x360b67(0xb51),_0x9664a2[_0x360b67(0x4fa)]=_0x9664a2[_0x360b67(0x4fa)]||[0x0,0x0,0x0,0x0],_0x9664a2[_0x360b67(0x7aa)]=_0x9664a2['flashDuration']||0x0,this[_0x360b67(0xbc2)]()[_0x360b67(0x411)](_0x22dfd9,_0x253e64,_0x9664a2);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x864)]=function(){const _0x420a0c=_0x2dcaec;if(this[_0x420a0c(0x478)]())return![];if(this[_0x420a0c(0x2b5)]()&&this['isAppeared']())return!![];if(this[_0x420a0c(0x5d1)]()&&this[_0x420a0c(0x5c7)]()){if(this[_0x420a0c(0x1f5)]()&&this[_0x420a0c(0xbb4)]())return![];}else{if(this['isDead']())return![];}return!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x491)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x4d5)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x4d5)]=function(){const _0x2e02a8=_0x2dcaec;VisuMZ['BattleCore']['Game_Battler_clearMotion'][_0x2e02a8(0x390)](this),this[_0x2e02a8(0x20d)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8e6)]=function(){return!![];},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x510)]=function(){return![];},VisuMZ['BattleCore'][_0x2dcaec(0x57a)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xa6e)],Game_Battler['prototype'][_0x2dcaec(0xa6e)]=function(_0x3d459f){const _0x13e968=_0x2dcaec;VisuMZ[_0x13e968(0xae3)]['Game_Battler_onBattleStart'][_0x13e968(0x390)](this,_0x3d459f),this[_0x13e968(0xac3)](_0x3d459f),this[_0x13e968(0x5d8)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xac3)]=function(_0x4b61e5){const _0x18ba1a=_0x2dcaec;this[_0x18ba1a(0x5bd)](![]),this['_forcedHomeX']=undefined,this[_0x18ba1a(0xb47)]=undefined;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x64a)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x579)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x579)]=function(){const _0x5164db=_0x2dcaec;VisuMZ['BattleCore'][_0x5164db(0x64a)]['call'](this),this[_0x5164db(0xc46)]();},Game_Battler[_0x2dcaec(0xaf6)]['onBattleEndBattleCore']=function(){const _0x14389b=_0x2dcaec;this[_0x14389b(0xb1c)]=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x2dcaec(0xae3)]['Game_Battler_performActionStart']=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x9fe)],Game_Battler['prototype'][_0x2dcaec(0x9fe)]=function(_0x2d31f1){const _0x119328=_0x2dcaec;VisuMZ[_0x119328(0xae3)][_0x119328(0x159)][_0x119328(0x390)](this,_0x2d31f1);if(!_0x2d31f1[_0x119328(0x215)]()){const _0x27e250=this['battler']();_0x27e250&&_0x27e250['stepForward']();}this['setBattlerFlip'](![]);},Game_Battler['prototype'][_0x2dcaec(0x18f)]=function(){const _0x4310dc=_0x2dcaec;this[_0x4310dc(0xc3b)]=undefined;const _0xba50be=this[_0x4310dc(0xad7)];this[_0x4310dc(0xad7)]=![];if(BattleManager[_0x4310dc(0x9b0)]()&&this['isInputting']()){const _0x1f7d91=this[_0x4310dc(0xbc2)]();if(_0x1f7d91&&_0xba50be)_0x1f7d91[_0x4310dc(0xb06)]();return;}const _0x53f417=this['battler']();if(_0x53f417)_0x53f417[_0x4310dc(0x844)]();this['setBattlerFlip'](![]),this[_0x4310dc(0xb03)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xc4b)]=function(_0x58dd6f){const _0xd476f4=_0x2dcaec;if(_0x58dd6f[_0xd476f4(0x920)]())this[_0xd476f4(0xa83)]();else{if(_0x58dd6f[_0xd476f4(0x215)]())this[_0xd476f4(0x4a5)](_0xd476f4(0x64c));else{if(_0x58dd6f['isMagical']())this[_0xd476f4(0x4a5)]('spell');else{if(_0x58dd6f[_0xd476f4(0x37d)]())[0x1,0x2,0x5,0x6][_0xd476f4(0x7f2)](_0x58dd6f[_0xd476f4(0x719)]()[_0xd476f4(0x63e)][_0xd476f4(0x134)])?this[_0xd476f4(0xa83)]():this[_0xd476f4(0x4a5)]('skill');else _0x58dd6f[_0xd476f4(0x408)]()&&this['requestMotion'](_0xd476f4(0x719));}}}},Game_Battler['prototype'][_0x2dcaec(0x58c)]=function(){const _0x4eb6d7=_0x2dcaec;return $dataSystem[_0x4eb6d7(0x861)][0x0];},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x37a)]=function(){const _0x31476d=_0x2dcaec,_0x5a09c2=this[_0x31476d(0x58c)]();return _0x5a09c2?_0x5a09c2['weaponImageId']:0x0;},Game_Battler[_0x2dcaec(0xaf6)]['performSubstitute']=function(_0x489819){const _0x330dac=_0x2dcaec;if(!$gameSystem[_0x330dac(0x334)]())return;const _0x1215a3=this[_0x330dac(0xbc2)](),_0xf11bb2=_0x489819[_0x330dac(0xbc2)]();if(!_0x1215a3||!_0xf11bb2)return;const _0x5c31d6=_0xf11bb2[_0x330dac(0xae9)],_0x436fa4=_0xf11bb2[_0x330dac(0xa19)];this[_0x330dac(0x241)](_0x5c31d6,_0x436fa4,0x0,![],_0x330dac(0x41d),-0x1),_0x1215a3['updatePosition']();const _0x39bdcc=VisuMZ['BattleCore']['Settings'][_0x330dac(0x709)];let _0x50ae62=(_0xf11bb2['width']+_0x1215a3['width'])/0x2;_0x50ae62*=this[_0x330dac(0x8d6)]()?0x1:-0x1;let _0x1f6b03=_0x39bdcc['StepDistanceY']*(this['isActor']()?0x1:-0x1);_0x489819[_0x330dac(0x39e)](_0x50ae62,_0x1f6b03,0x0,![],_0x330dac(0x41d)),_0xf11bb2[_0x330dac(0x906)]();},Game_Battler[_0x2dcaec(0xaf6)]['requestMotion']=function(_0x22524f){const _0x393d61=_0x2dcaec;if(SceneManager['isSceneBattle']()){const _0x3f95b3=this[_0x393d61(0xbc2)]();_0x3f95b3&&(_0x3f95b3[_0x393d61(0x3c5)](_0x22524f),['swing',_0x393d61(0x98f),_0x393d61(0x17a)]['includes'](_0x22524f)&&this[_0x393d61(0x1b3)]());}this['clearFreezeMotion']();},Game_Battler['prototype']['performWeaponAnimation']=function(){},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x4aa)]=function(_0x521d1d){const _0x1976cf=_0x2dcaec;if(SceneManager['isSceneBattle']()){const _0x2c4aa5=this['battler']();if(_0x2c4aa5)_0x2c4aa5[_0x1976cf(0x926)](_0x521d1d);}},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xad5)]=function(){const _0x2feca1=_0x2dcaec;if(SceneManager['isSceneBattle']()){const _0x57b6cb=this[_0x2feca1(0x37a)]();this['startWeaponAnimation'](_0x57b6cb);}},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x65e)]=function(_0x26b122,_0x263cb7){const _0x46b3d7=_0x2dcaec;if(!_0x26b122)return;if(!_0x26b122[_0x46b3d7(0x719)]())return;if(_0x26b122[_0x46b3d7(0x920)]())return;if(_0x26b122['isGuard']())return;if(_0x26b122[_0x46b3d7(0x408)]())return;if($gameTemp[_0x46b3d7(0x3e2)])return;let _0x33b6eb=0x0;const _0x2f99ea=VisuMZ[_0x46b3d7(0xae3)]['Settings'][_0x46b3d7(0x709)],_0x128e38=_0x26b122[_0x46b3d7(0x719)]()[_0x46b3d7(0x795)];if(_0x128e38[_0x46b3d7(0xb9e)](/<CAST ANIMATION: (\d+)>/i))_0x33b6eb=Number(RegExp['$1']);else{if(_0x128e38[_0x46b3d7(0xb9e)](/<NO CAST ANIMATION>/i))return;else{if(_0x26b122[_0x46b3d7(0x9eb)]())_0x33b6eb=_0x2f99ea[_0x46b3d7(0x222)];else{if(_0x26b122[_0x46b3d7(0x835)]())_0x33b6eb=_0x2f99ea[_0x46b3d7(0x339)];else _0x26b122[_0x46b3d7(0x410)]()&&(_0x33b6eb=_0x2f99ea[_0x46b3d7(0x7cb)]);}}}_0x33b6eb>0x0&&$gameTemp['requestAnimation']([this],_0x33b6eb,!!_0x263cb7);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x240)]=function(){const _0x264044=_0x2dcaec;SoundManager[_0x264044(0x76d)]();let _0x5723c6=VisuMZ[_0x264044(0xae3)][_0x264044(0xbeb)][_0x264044(0x709)][_0x264044(0x796)];_0x5723c6>0x0&&(Imported[_0x264044(0x6d3)]?$gameTemp[_0x264044(0xbb2)]([this],_0x5723c6):$gameTemp['requestAnimation']([this],_0x5723c6));},Game_Battler['prototype']['isActiveTpbReady']=function(){const _0x1540ff=_0x2dcaec;if(!$gameSystem['isSideView']())return![];if(!BattleManager[_0x1540ff(0x9b0)]())return![];if(!this['isAlive']())return![];if(this[_0x1540ff(0x5f5)]())return!![];if(this[_0x1540ff(0xbf1)]())return!![];if(this[_0x1540ff(0x6b9)]>=0x1)return!![];return![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x879)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb72)],Game_Battler['prototype'][_0x2dcaec(0xb72)]=function(){const _0xc3f4c3=_0x2dcaec;this[_0xc3f4c3(0x9d5)]()&&(this[_0xc3f4c3(0xc3b)]=!![]),VisuMZ[_0xc3f4c3(0xae3)][_0xc3f4c3(0x879)]['call'](this),this[_0xc3f4c3(0xb30)](),this[_0xc3f4c3(0x615)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xb84)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x3bf)],Game_Battler['prototype'][_0x2dcaec(0x3bf)]=function(){const _0x216c02=_0x2dcaec;this[_0x216c02(0x9d5)]()&&(this[_0x216c02(0xc3b)]=!![]),VisuMZ['BattleCore']['Game_Battler_performMiss'][_0x216c02(0x390)](this),this[_0x216c02(0xb30)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x195)]=Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xa04)],Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xa04)]=function(){const _0x5b35c7=_0x2dcaec;this[_0x5b35c7(0x9d5)]()&&(this[_0x5b35c7(0xc3b)]=!![]),VisuMZ['BattleCore'][_0x5b35c7(0x195)][_0x5b35c7(0x390)](this),this[_0x5b35c7(0xb30)]();},Game_Battler[_0x2dcaec(0xaf6)]['performFlinch']=function(){const _0x67e4e2=_0x2dcaec;if(!$gameSystem[_0x67e4e2(0x334)]())return;if(this['_flinched'])return;this[_0x67e4e2(0xad7)]=!![];const _0x5f30b5=this['battler']();if(_0x5f30b5)_0x5f30b5['stepFlinch']();},Game_Battler[_0x2dcaec(0xaf6)]['performShakeFlinch']=function(){const _0x347927=_0x2dcaec;if(!this['canBattlerMove']())return;const _0x4e403c=VisuMZ[_0x347927(0xae3)][_0x347927(0xbeb)]['Actor'];if(!(_0x4e403c['ShakeFlinch']??![]))return;if(this[_0x347927(0x7fe)]<=0x0)return;const _0x402533=this[_0x347927(0xbc2)]();if(_0x402533){const _0x1e0b0e=this[_0x347927(0x7fe)],_0x590896=(_0x1e0b0e/this['mhp'])[_0x347927(0xc50)](0.8,0x1),_0x42dced=_0x4e403c['ShakeFlinchPower']??0x30,_0x5398de=_0x590896*_0x42dced;_0x402533[_0x347927(0x2f9)](_0x5398de,_0x590896);}},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb03)]=function(){const _0x46347f=_0x2dcaec;if(this[_0x46347f(0x1f5)]()&&this[_0x46347f(0x866)]!==_0x46347f(0xbe7)){this[_0x46347f(0x4a5)]('dead');return;}if(this[_0x46347f(0x1f5)]()&&this['_motionType']===_0x46347f(0xbe7))return;if(!!this[_0x46347f(0x39d)])return;if(this[_0x46347f(0x5d1)]()){if(!this[_0x46347f(0x7e8)]()&&this!==BattleManager[_0x46347f(0x173)]){if(this[_0x46347f(0xbc2)]())this['battler']()[_0x46347f(0x5a4)]();}this[_0x46347f(0x20d)]();return;}if(this['_motionType']===_0x46347f(0x545))return;if(this[_0x46347f(0x866)]===_0x46347f(0x5b0)&&!BattleManager['isInputting']())return;if(this[_0x46347f(0x866)]==='guard'&&!BattleManager[_0x46347f(0x5f5)]())return;this[_0x46347f(0x4d5)]();if(BattleManager[_0x46347f(0x9b0)]()&&this===BattleManager[_0x46347f(0x173)])return;if(this[_0x46347f(0xbc2)]()&&BattleManager['isInputting']()){this['battler']()[_0x46347f(0x5a4)](),this['clearFreezeMotion']();return;}},Game_Enemy['prototype'][_0x2dcaec(0x7e8)]=function(){const _0x147804=_0x2dcaec;if(!this['hasSvBattler']())return![];const _0x594f94=this[_0x147804(0xbc2)]();if(!_0x594f94)return![];const _0x88b9d7=_0x594f94[_0x147804(0x8b3)];if(!_0x88b9d7)return![];const _0x51fdae=_0x88b9d7[_0x147804(0x20a)];return _0x51fdae&&!_0x51fdae[_0x147804(0x417)];},Game_Battler[_0x2dcaec(0xaf6)]['isBattlerFlipped']=function(){const _0x24c670=_0x2dcaec;return this[_0x24c670(0x213)];},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5bd)]=function(_0xac24fa){const _0x4d77e5=_0x2dcaec;if(!$gameSystem[_0x4d77e5(0x334)]())return;this[_0x4d77e5(0x213)]=_0xac24fa;const _0x789aab=this['battler']();if(_0x789aab)_0x789aab[_0x4d77e5(0x9f3)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb0b)]=function(_0x28c451,_0x1e7614,_0x2a9e36){const _0x3bb81e=_0x2dcaec;if(!$gameSystem[_0x3bb81e(0x334)]())return;const _0x4ced70=this['battler']();if(!_0x4ced70)return;if(_0x28c451===_0x4ced70[_0x3bb81e(0xae9)])return;let _0x12ad1a=![];if(this[_0x3bb81e(0x8d6)]()){if(_0x28c451>_0x4ced70[_0x3bb81e(0xae9)])_0x12ad1a=!![];if(_0x28c451<_0x4ced70[_0x3bb81e(0xae9)])_0x12ad1a=![];}else{if(this[_0x3bb81e(0x5d1)]()){if(_0x28c451>_0x4ced70[_0x3bb81e(0xae9)])_0x12ad1a=![];if(_0x28c451<_0x4ced70['_baseX'])_0x12ad1a=!![];}};this['setBattlerFlip'](_0x2a9e36?!_0x12ad1a:_0x12ad1a),_0x4ced70[_0x3bb81e(0x9f3)]();},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x39e)]=function(_0x24c657,_0x34e940,_0xdf893d,_0x5d2ada,_0x375694){const _0x482d4d=_0x2dcaec;if(!$gameSystem[_0x482d4d(0x334)]())return;const _0x3bfef2=this[_0x482d4d(0xbc2)]();if(!_0x3bfef2)return;if(_0x5d2ada)this[_0x482d4d(0xb0b)](_0x24c657+_0x3bfef2['_baseX'],_0x34e940+_0x3bfef2[_0x482d4d(0xa19)],![]);_0x24c657+=_0x3bfef2[_0x482d4d(0xae9)]-_0x3bfef2[_0x482d4d(0x5a6)],_0x34e940+=_0x3bfef2['_baseY']-_0x3bfef2['_homeY'],_0x3bfef2[_0x482d4d(0x84f)](_0x24c657,_0x34e940,_0xdf893d);if(Imported[_0x482d4d(0x6d3)])_0x3bfef2[_0x482d4d(0xbbb)](_0x375694||_0x482d4d(0x41d));},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x241)]=function(_0x2607ca,_0x1bb75b,_0x3deb40,_0x4a5c15,_0x35bb9d,_0x3dd532){const _0x52f8d4=_0x2dcaec;if(!$gameSystem['isSideView']())return;const _0x4be152=this[_0x52f8d4(0xbc2)]();if(!_0x4be152)return;if(_0x2607ca===Infinity||_0x1bb75b===Infinity)return;if(isNaN(_0x2607ca)||isNaN(_0x1bb75b))return;_0x3dd532=_0x3dd532||0x0;if(_0x3dd532>0x0){if(_0x4be152[_0x52f8d4(0xae9)]>_0x2607ca)_0x2607ca+=_0x4be152['width']/0x2+_0x3dd532;if(_0x4be152[_0x52f8d4(0xae9)]<_0x2607ca)_0x2607ca-=_0x4be152[_0x52f8d4(0x64b)]/0x2+_0x3dd532;}if(_0x4a5c15)this[_0x52f8d4(0xb0b)](_0x2607ca,_0x1bb75b,![]);_0x2607ca-=_0x4be152[_0x52f8d4(0x5a6)],_0x1bb75b-=_0x4be152[_0x52f8d4(0x94d)],_0x4be152[_0x52f8d4(0x84f)](_0x2607ca,_0x1bb75b,_0x3deb40);if(Imported[_0x52f8d4(0x6d3)])_0x4be152[_0x52f8d4(0xbbb)](_0x35bb9d||'Linear');},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x821)]=function(_0x423fea,_0x953a0d,_0x5a82ab,_0x1976a5,_0x25f705){const _0x42ba3c=_0x2dcaec;if(!$gameSystem[_0x42ba3c(0x334)]())return;const _0x36b022=this[_0x42ba3c(0xbc2)]();if(!_0x36b022)return;if(_0x1976a5)this[_0x42ba3c(0xb0b)](_0x423fea+_0x36b022['_baseX'],_0x953a0d+_0x36b022['_baseY'],![]);_0x423fea+=_0x36b022[_0x42ba3c(0x5a6)],_0x953a0d+=_0x36b022[_0x42ba3c(0x94d)],_0x36b022[_0x42ba3c(0x31a)](_0x423fea,_0x953a0d,_0x5a82ab,_0x25f705),this['_forcedHomeX']=_0x423fea,this['_forcedHomeY']=_0x953a0d;},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x7dd)]=function(_0x38aac6,_0x4fcbbc,_0x38d7dd,_0x53bc43,_0x2e5c52,_0x1b05cb){const _0x1f7420=_0x2dcaec;if(!$gameSystem[_0x1f7420(0x334)]())return;const _0x3d6761=this[_0x1f7420(0xbc2)]();if(!_0x3d6761)return;_0x1b05cb=_0x1b05cb||0x0;if(_0x1b05cb>0x0){if(_0x3d6761[_0x1f7420(0xae9)]>_0x38aac6)_0x38aac6+=_0x3d6761[_0x1f7420(0x64b)]/0x2+_0x1b05cb;if(_0x3d6761[_0x1f7420(0xae9)]<_0x38aac6)_0x38aac6-=_0x3d6761[_0x1f7420(0x64b)]/0x2+_0x1b05cb;}if(_0x53bc43)this[_0x1f7420(0xb0b)](_0x38aac6,_0x4fcbbc,![]);_0x3d6761['startHomeMove'](_0x38aac6,_0x4fcbbc,_0x38d7dd,_0x2e5c52),this['_forcedHomeX']=_0x38aac6,this[_0x1f7420(0xb47)]=_0x4fcbbc;},Game_Battler[_0x2dcaec(0xaf6)]['floatBattler']=function(_0x5a26cd,_0x5be19c,_0x58bb89){const _0x4ef49a=_0x2dcaec;if(!$gameSystem[_0x4ef49a(0x334)]())return;const _0x2b58ff=this[_0x4ef49a(0xbc2)]();if(!_0x2b58ff)return;_0x2b58ff[_0x4ef49a(0x98c)](_0x5a26cd,_0x5be19c,_0x58bb89);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x138)]=function(_0x14224d,_0xe1ea2e){const _0x4217d9=_0x2dcaec;if(!$gameSystem[_0x4217d9(0x334)]())return;const _0x2599ed=this['battler']();if(!_0x2599ed)return;_0x2599ed[_0x4217d9(0x335)](_0x14224d,_0xe1ea2e);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x538)]=function(_0x47e4c5,_0x366a69,_0x1e41d5,_0x16b680){const _0x1de252=_0x2dcaec;if(!$gameSystem[_0x1de252(0x334)]())return;const _0x48c8a3=this[_0x1de252(0xbc2)]();if(!_0x48c8a3)return;_0x48c8a3[_0x1de252(0x654)](_0x47e4c5,_0x366a69,_0x1e41d5,_0x16b680);},Game_Battler['prototype'][_0x2dcaec(0x928)]=function(_0x40dc44,_0x4d81ac,_0x1979ef,_0x16629b){const _0x57c8d4=_0x2dcaec;if(!$gameSystem[_0x57c8d4(0x334)]())return;const _0x4c1ec4=this['battler']();if(!_0x4c1ec4)return;this['isActor']()&&(_0x40dc44*=-0x1,_0x4d81ac*=-0x1),_0x4c1ec4[_0x57c8d4(0x7ea)](_0x40dc44,_0x4d81ac,_0x1979ef,_0x16629b);},Game_Battler[_0x2dcaec(0xaf6)]['growBattler']=function(_0xda8f64,_0x58c8fb,_0xe6ecdf,_0x4b36c0){const _0x12374d=_0x2dcaec;if(!$gameSystem[_0x12374d(0x334)]())return;const _0x471ff7=this['battler']();if(!_0x471ff7)return;_0x471ff7[_0x12374d(0xbd3)](_0xda8f64,_0x58c8fb,_0xe6ecdf,_0x4b36c0);},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x7cf)]=function(_0x1124de,_0x3c8b47,_0x2a8b60){const _0x226686=_0x2dcaec;if(!$gameSystem[_0x226686(0x334)]())return;const _0x4b5428=this['battler']();if(!_0x4b5428)return;_0x4b5428[_0x226686(0xaa5)](_0x1124de,_0x3c8b47,_0x2a8b60);},Game_Battler[_0x2dcaec(0xaf6)]['clearFreezeMotion']=function(){const _0x492294=_0x2dcaec,_0x43727b=!!this[_0x492294(0x39d)];this[_0x492294(0x39d)]=undefined,_0x43727b&&(this[_0x492294(0xb03)](),this[_0x492294(0x327)]());},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x327)]=function(){const _0xfcb7c4=_0x2dcaec;if(!SceneManager[_0xfcb7c4(0xa2b)]())return;const _0x2e57f2=this[_0xfcb7c4(0xbc2)]();if(!_0x2e57f2)return;let _0x3738da=this[_0xfcb7c4(0x8d6)]()?_0x2e57f2['_weaponSprite']:_0x2e57f2[_0xfcb7c4(0x8b3)][_0xfcb7c4(0x23f)];_0x3738da&&_0x3738da['setup'](0x0);},Game_Battler['prototype'][_0x2dcaec(0xafd)]=function(_0x2f705b,_0x4dffef,_0x5569c4){const _0x2b0fd9=_0x2dcaec;if(this[_0x2b0fd9(0x5d1)]()&&!this['hasSvBattler']())return;let _0x18f85b=0x0,_0x3dc6d9=0x0;_0x2f705b[_0x2b0fd9(0xb9e)](/ATTACK[ ](\d+)/i)&&(_0x3dc6d9=Number(RegExp['$1']),_0x3dc6d9--);if(this[_0x2b0fd9(0x8d6)]()){const _0xc1061a=this['weapons']();_0x18f85b=_0xc1061a[_0x3dc6d9]?_0xc1061a[_0x3dc6d9][_0x2b0fd9(0x498)]:0x0;}else this[_0x2b0fd9(0x5d1)]()&&(_0x18f85b=this['svBattlerData']()[_0x2b0fd9(0x498)]||0x0);const _0x136990=$dataSystem[_0x2b0fd9(0x861)][_0x18f85b];_0x2f705b[_0x2b0fd9(0xb9e)](/attack/i)&&(_0x2f705b=[_0x2b0fd9(0x98f),_0x2b0fd9(0x5ea),'missile'][_0x136990['type']]||_0x2b0fd9(0x5ea)),this['_freezeMotionData']={'motionType':_0x2f705b,'weaponImageId':_0x4dffef?_0x136990['weaponImageId']:0x0,'pattern':_0x5569c4};},Game_Battler[_0x2dcaec(0xaf6)]['isFriendly']=function(_0x21ed40){const _0xbd3c09=_0x2dcaec;if(!_0x21ed40)return![];return _0x21ed40[_0xbd3c09(0x630)]()===this[_0xbd3c09(0x630)]();},Game_Battler['prototype']['isOpponent']=function(_0x79d596){const _0x30f423=_0x2dcaec;if(!_0x79d596)return![];return _0x79d596[_0x30f423(0x2f2)]()===this['friendsUnit']();},Game_Battler['prototype'][_0x2dcaec(0x42f)]=function(){return![];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x42f)]=function(){const _0x3f88a5=_0x2dcaec;return this[_0x3f88a5(0x6e3)]()[_0x3f88a5(0xb9e)](/\$/i);},Game_Enemy[_0x2dcaec(0xaf6)]['hasStaticSvBattler']=function(){const _0x4597bf=_0x2dcaec;return this['hasSvBattler']()&&this[_0x4597bf(0x556)]()[_0x4597bf(0xb9e)](/\$/i);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x99f)]=Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0xb15)],Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0xb15)]=function(_0x792c8){const _0x1ab4d0=_0x2dcaec;VisuMZ['BattleCore'][_0x1ab4d0(0x99f)][_0x1ab4d0(0x390)](this,_0x792c8),this['initBattlePortrait']();},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x2f0)]=function(){const _0x393505=_0x2dcaec;this[_0x393505(0xab0)]='',this[_0x393505(0x3fc)]()&&this['actor']()['note'][_0x393505(0xb9e)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x393505(0xab0)]=String(RegExp['$1']));},Game_Actor[_0x2dcaec(0xaf6)]['getBattlePortraitFilename']=function(){const _0xdd2ab3=_0x2dcaec;if(this[_0xdd2ab3(0x296)]()!=='')return this[_0xdd2ab3(0x296)]();else{if(Imported[_0xdd2ab3(0x446)]&&this[_0xdd2ab3(0x9b4)]()!=='')return this[_0xdd2ab3(0x9b4)]();}return'';},Game_Actor[_0x2dcaec(0xaf6)]['getBattlePortrait']=function(){const _0x213c3d=_0x2dcaec;if(this['_battlePortrait']===undefined)this[_0x213c3d(0x2f0)]();return this[_0x213c3d(0xab0)];},Game_Actor[_0x2dcaec(0xaf6)]['setBattlePortrait']=function(_0xe55bd9){const _0x151a8e=_0x2dcaec;if(this['_battlePortrait']===undefined)this[_0x151a8e(0x2f0)]();this[_0x151a8e(0xab0)]=_0xe55bd9;if(SceneManager[_0x151a8e(0xa2b)]()&&$gameParty[_0x151a8e(0x429)]()[_0x151a8e(0x7f2)](this)){const _0xfbe683=SceneManager[_0x151a8e(0x496)][_0x151a8e(0x300)];_0xfbe683&&_0xfbe683[_0x151a8e(0x60b)](this);}},Game_Actor[_0x2dcaec(0xaf6)]['isSpriteVisible']=function(){return!![];},Game_Actor['prototype'][_0x2dcaec(0x576)]=function(){const _0x482314=_0x2dcaec;if(!this[_0x482314(0x66e)]()&&BattleManager[_0x482314(0x91c)])return!![];return Game_Battler[_0x482314(0xaf6)][_0x482314(0x576)][_0x482314(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0x83b)]=Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x710)],Game_Actor[_0x2dcaec(0xaf6)]['makeActionList']=function(){const _0x447793=_0x2dcaec;if(BattleManager[_0x447793(0x91c)]&&!ConfigManager[_0x447793(0xbe9)])return this[_0x447793(0x19b)]();else{return VisuMZ[_0x447793(0xae3)][_0x447793(0x83b)]['call'](this);;}},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x19b)]=function(){const _0x1c4f7b=_0x2dcaec,_0x1fe2d4=[],_0xac9363=new Game_Action(this);return _0xac9363[_0x1c4f7b(0xb85)](),_0x1fe2d4['push'](_0xac9363),_0x1fe2d4;},Game_Actor[_0x2dcaec(0xaf6)]['battleCommands']=function(){const _0x528546=_0x2dcaec;return this['currentClass']()['note'][_0x528546(0xb9e)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?String(RegExp['$1'])[_0x528546(0x13b)](/[\r\n]+/):VisuMZ[_0x528546(0xae3)]['Settings']['ActorCmd'][_0x528546(0x4fe)];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x9f5)]=function(){const _0x3da5e6=_0x2dcaec;if(this['_cache'][_0x3da5e6(0x5ba)]!==undefined)return this[_0x3da5e6(0xc3c)][_0x3da5e6(0x5ba)];return this[_0x3da5e6(0x3fc)]()[_0x3da5e6(0x795)][_0x3da5e6(0xb9e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0x3da5e6(0xc3c)][_0x3da5e6(0x5ba)]=eval(RegExp['$1']),this['_cache']['svAnchorY']=eval(RegExp['$2'])):this[_0x3da5e6(0xc3c)][_0x3da5e6(0x5ba)]=Game_Battler['prototype'][_0x3da5e6(0x9f5)][_0x3da5e6(0x390)](this),this[_0x3da5e6(0xc3c)][_0x3da5e6(0x5ba)];},Game_Actor[_0x2dcaec(0xaf6)]['svBattlerAnchorY']=function(){const _0x22d7d8=_0x2dcaec;if(this[_0x22d7d8(0xc3c)][_0x22d7d8(0xa65)]!==undefined)return this['_cache']['svAnchorY'];return this[_0x22d7d8(0x3fc)]()[_0x22d7d8(0x795)][_0x22d7d8(0xb9e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this['_cache'][_0x22d7d8(0x5ba)]=eval(RegExp['$1']),this[_0x22d7d8(0xc3c)][_0x22d7d8(0xa65)]=eval(RegExp['$2'])):this[_0x22d7d8(0xc3c)][_0x22d7d8(0xa65)]=Game_Battler[_0x22d7d8(0xaf6)][_0x22d7d8(0x942)]['call'](this),this[_0x22d7d8(0xc3c)][_0x22d7d8(0xa65)];},Game_Actor[_0x2dcaec(0xaf6)]['svBattlerShadowVisible']=function(){const _0x459afa=_0x2dcaec;if(this[_0x459afa(0xc3c)][_0x459afa(0x840)]!==undefined)return this[_0x459afa(0xc3c)][_0x459afa(0x840)];if(this['actor']()['note'][_0x459afa(0xb9e)](/<SIDEVIEW SHOW SHADOW>/i))this[_0x459afa(0xc3c)]['svShadow']=!![];else this[_0x459afa(0x3fc)]()[_0x459afa(0x795)]['match'](/<SIDEVIEW HIDE SHADOW>/i)?this[_0x459afa(0xc3c)]['svShadow']=![]:this[_0x459afa(0xc3c)][_0x459afa(0x840)]=Game_Battler[_0x459afa(0xaf6)][_0x459afa(0x4f7)][_0x459afa(0x390)](this);return this[_0x459afa(0xc3c)][_0x459afa(0x840)];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x1b0)]=function(){const _0x250045=_0x2dcaec;return VisuMZ['BattleCore']['Settings'][_0x250045(0x46b)][_0x250045(0xacf)];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x1b3)]=function(){const _0x45501a=_0x2dcaec,_0x4c53c3=this[_0x45501a(0x431)](),_0x3f0c42=_0x4c53c3[0x0]?_0x4c53c3[0x0][_0x45501a(0x498)]:0x0,_0x1e0cb6=$dataSystem['attackMotions'][_0x3f0c42];_0x1e0cb6&&this[_0x45501a(0x4aa)](_0x1e0cb6['weaponImageId']);},Game_Actor[_0x2dcaec(0xaf6)]['performAction']=function(_0x2a2eaf){const _0x3d3758=_0x2dcaec;Game_Battler['prototype'][_0x3d3758(0x79c)][_0x3d3758(0x390)](this,_0x2a2eaf),this[_0x3d3758(0xc4b)](_0x2a2eaf);},Game_Actor['prototype'][_0x2dcaec(0x58c)]=function(){const _0x419a3c=_0x2dcaec,_0x319576=this[_0x419a3c(0x431)](),_0xa116da=_0x319576[0x0]?_0x319576[0x0][_0x419a3c(0x498)]:0x0;return $dataSystem[_0x419a3c(0x861)][_0xa116da];},Game_Actor['prototype'][_0x2dcaec(0x92b)]=function(_0x2dee01){_0x2dee01=_0x2dee01||0x1,_0x2dee01--;const _0x2c0238=this['weapons']();return _0x2c0238[_0x2dee01]?_0x2c0238[_0x2dee01]['animationId']:0x0;},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x885)]=function(_0x552493){const _0x1081b3=_0x2dcaec;_0x552493=_0x552493||0x1,_0x552493--;const _0x37c193=this['weapons'](),_0x5ec199=_0x37c193[_0x552493]?_0x37c193[_0x552493][_0x1081b3(0x498)]:0x0;return $dataSystem[_0x1081b3(0x861)][_0x5ec199];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x731)]=function(_0x6b46bf){const _0x608171=_0x2dcaec;_0x6b46bf=_0x6b46bf||0x1,_0x6b46bf--;const _0x315e6e=this[_0x608171(0x431)](),_0x156a4d=_0x315e6e[_0x6b46bf]?_0x315e6e[_0x6b46bf][_0x608171(0x498)]:0x0,_0x277aff=$dataSystem[_0x608171(0x861)][_0x156a4d];if(_0x277aff){if(_0x277aff['type']===0x0)this[_0x608171(0x4a5)]('thrust');else{if(_0x277aff[_0x608171(0x134)]===0x1)this[_0x608171(0x4a5)]('swing');else _0x277aff[_0x608171(0x134)]===0x2&&this['requestMotion'](_0x608171(0x17a));}this[_0x608171(0x4aa)](_0x277aff[_0x608171(0xaf7)]);}},Game_Battler['prototype']['setActiveWeaponSlot']=function(_0x14bfa5){const _0x1a4ece=_0x2dcaec;if(this['isActor']()){const _0x4781a9=this[_0x1a4ece(0x431)]();if(_0x4781a9[_0x1a4ece(0x7ce)]>0x0){const _0x2564ea=_0x4781a9[_0x14bfa5];if(_0x2564ea)_0x14bfa5=this[_0x1a4ece(0x997)]()[_0x1a4ece(0x7bc)](_0x2564ea);}}this['_activeWeaponSlot']=_0x14bfa5||0x0,this[_0x1a4ece(0xc3c)]={};},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x79e)]=function(){const _0x19f841=_0x2dcaec;this[_0x19f841(0x9f2)]=this[_0x19f841(0x9f2)]||0x0,this[_0x19f841(0x9f2)]++,this[_0x19f841(0xc3c)]={};},Game_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x64e)]=function(){const _0x247e7b=_0x2dcaec;this[_0x247e7b(0x9f2)]=undefined,this['_cache']={};},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4d4)]=Game_Actor['prototype'][_0x2dcaec(0x997)],Game_Actor[_0x2dcaec(0xaf6)]['equips']=function(){const _0x1e717a=_0x2dcaec;let _0xba067e=VisuMZ[_0x1e717a(0xae3)][_0x1e717a(0x4d4)]['call'](this);if(this[_0x1e717a(0x986)])return _0xba067e;if(this[_0x1e717a(0x9f2)]!==undefined){this['_tempEquipCheck']=!![];const _0x1f926f=this[_0x1e717a(0x8fb)]();for(let _0xebd1=0x0;_0xebd1<_0x1f926f['length'];_0xebd1++){_0x1f926f[_0xebd1]===0x1&&this[_0x1e717a(0x9f2)]!==_0xebd1&&(_0xba067e[_0xebd1]=null);}this[_0x1e717a(0x986)]=undefined;}return _0xba067e;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x536)]=Game_BattlerBase[_0x2dcaec(0xaf6)]['param'],Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x8e0)]=function(_0x3c95e4){const _0x2efaf9=_0x2dcaec;this[_0x2efaf9(0x9f2)]!==undefined&&[0x0,0x1][_0x2efaf9(0x7f2)](_0x3c95e4)&&(this['_tempEquipCheck']=!![]);const _0x327428=VisuMZ[_0x2efaf9(0xae3)]['Game_BattlerBase_param'][_0x2efaf9(0x390)](this,_0x3c95e4);return this[_0x2efaf9(0x9f2)]!==undefined&&[0x0,0x1][_0x2efaf9(0x7f2)](_0x3c95e4)&&(this['_tempEquipCheck']=![]),_0x327428;},Window_BattleLog[_0x2dcaec(0xaf6)]['getDualWieldTimes']=function(_0x2770a5){const _0x5cd6b4=_0x2dcaec;return _0x2770a5[_0x5cd6b4(0x8d6)]()?_0x2770a5[_0x5cd6b4(0x431)]()[_0x5cd6b4(0x7ce)]||0x1:0x1;},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xc37)]=function(_0x47ba7c,_0x461f83){const _0x64a6f6=_0x2dcaec;_0x47ba7c&&_0x47ba7c[_0x64a6f6(0x8d6)]()&&_0x47ba7c[_0x64a6f6(0x51c)](_0x461f83),this[_0x64a6f6(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x2ab)]=function(_0x5b859f){const _0x14842f=_0x2dcaec;_0x5b859f&&_0x5b859f[_0x14842f(0x8d6)]()&&_0x5b859f[_0x14842f(0x64e)](),this['callNextMethod']();},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c1)]=function(){const _0x4ab88f=_0x2dcaec;let _0x5c51a4=_0x4ab88f(0x8c1);if(this[_0x4ab88f(0x520)](_0x5c51a4))return this[_0x4ab88f(0xc3c)][_0x5c51a4];return this[_0x4ab88f(0xc3c)][_0x5c51a4]=this[_0x4ab88f(0xace)](this[_0x4ab88f(0x3fc)]()),this[_0x4ab88f(0xc3c)][_0x5c51a4];},Game_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a9)]=function(){const _0x59e985=_0x2dcaec;let _0x1338ba=_0x59e985(0x7a9);if(this[_0x59e985(0x520)](_0x1338ba))return this['_cache'][_0x1338ba];return this[_0x59e985(0xc3c)][_0x1338ba]=this['createBattleUIOffsetY'](this['actor']()),this[_0x59e985(0xc3c)][_0x1338ba];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6c0)]=Game_Enemy['prototype'][_0x2dcaec(0xb15)],Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xb15)]=function(_0x22c9dd,_0x394557,_0x4910e6){const _0x2c1e3a=_0x2dcaec;_0x22c9dd=DataManager['swapEnemyIDs'](_0x22c9dd),VisuMZ[_0x2c1e3a(0xae3)][_0x2c1e3a(0x6c0)]['call'](this,_0x22c9dd,_0x394557,_0x4910e6),Imported[_0x2c1e3a(0xa6c)]&&this[_0x2c1e3a(0x3cf)](),this[_0x2c1e3a(0x1fe)](),this[_0x2c1e3a(0x767)](),this[_0x2c1e3a(0x253)](),Imported[_0x2c1e3a(0xa6c)]&&this['recoverAll']();},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x1fe)]=function(){const _0x3fda58=_0x2dcaec,_0x1cc484=VisuMZ['BattleCore']['Settings']['Enemy'];this[_0x3fda58(0x9f4)]=_0x1cc484[_0x3fda58(0xa47)],this[_0x3fda58(0x690)]={},this[_0x3fda58(0x237)]();},Game_Enemy[_0x2dcaec(0xaf6)]['setupBattleCoreData']=function(){const _0x47297b=_0x2dcaec,_0x44ce88=VisuMZ[_0x47297b(0xae3)][_0x47297b(0xbeb)][_0x47297b(0xc36)],_0x4b1728=this['enemy']()['note'];this[_0x47297b(0x690)]={'name':'','wtypeId':_0x44ce88['WtypeId'],'collapse':_0x44ce88[_0x47297b(0x8a9)],'motionIdle':_0x44ce88[_0x47297b(0x82b)],'width':_0x44ce88[_0x47297b(0x32d)]||0x40,'height':_0x44ce88['Height']||0x40,'anchorX':_0x44ce88[_0x47297b(0x45c)]||0x0,'anchorY':_0x44ce88[_0x47297b(0x5e4)]||0x0,'shadow':_0x44ce88[_0x47297b(0x916)]};_0x4b1728['match'](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this[_0x47297b(0x9f4)]=Number(RegExp['$1']));const _0x330cb4=this[_0x47297b(0x690)];if(_0x4b1728['match'](/<SIDEVIEW BATTLER: (.*)>/i))_0x330cb4[_0x47297b(0x321)]=String(RegExp['$1']);else{if(_0x4b1728['match'](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x8bb474=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)[_0x47297b(0xb8d)]('');_0x330cb4[_0x47297b(0x321)]=DataManager[_0x47297b(0x3ae)](_0x8bb474);}}_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x330cb4['anchorX']=eval(RegExp['$1']),_0x330cb4[_0x47297b(0x962)]=eval(RegExp['$2']));if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW COLLAPSE>/i))_0x330cb4[_0x47297b(0xbef)]=!![];else _0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW NO COLLAPSE>/i)&&(_0x330cb4['collapse']=![]);if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW SHOW SHADOW>/i))_0x330cb4[_0x47297b(0x76c)]=!![];else _0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x330cb4['shadow']=![]);if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW IDLE MOTION: (.*)>/i))_0x330cb4[_0x47297b(0xb41)]=String(RegExp['$1'])['toLowerCase']()['trim']();else{if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){const _0x3c7e94=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)['remove']('');_0x330cb4[_0x47297b(0xb41)]=DataManager[_0x47297b(0x3ae)](_0x3c7e94);}}_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x330cb4[_0x47297b(0x64b)]=Number(RegExp['$1']),_0x330cb4[_0x47297b(0x75c)]=Number(RegExp['$2']));if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW WEAPON: (.*)>/i))_0x330cb4[_0x47297b(0x498)]=DataManager[_0x47297b(0xac6)](RegExp['$1']);else{if(_0x4b1728[_0x47297b(0xb9e)](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x3f9865=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)[_0x47297b(0xb8d)](''),_0x73f913=DataManager[_0x47297b(0x3ae)](_0x3f9865);_0x330cb4['wtypeId']=DataManager[_0x47297b(0xac6)](_0x73f913);}}if(Imported['VisuMZ_1_ElementStatusCore']){const _0x188f22=this['getTraitSetKeys']();for(const _0x3375b5 of _0x188f22){const _0x2462ce=this['traitSet'](_0x3375b5)['Name'][_0x47297b(0xb9f)]()['trim'](),_0x451247=_0x3375b5[_0x47297b(0xb9f)]()[_0x47297b(0x651)]();if(_0x4b1728['match'](VisuMZ[_0x47297b(0x4f6)][_0x47297b(0xaea)][_0x47297b(0x7a8)[_0x47297b(0xb60)](_0x451247,_0x2462ce)]))_0x330cb4[_0x47297b(0x321)]=String(RegExp['$1']);else{if(_0x4b1728[_0x47297b(0xb9e)](VisuMZ[_0x47297b(0x4f6)][_0x47297b(0xaea)][_0x47297b(0x643)[_0x47297b(0xb60)](_0x451247,_0x2462ce)])){const _0x372d97=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)['remove']('');_0x330cb4[_0x47297b(0x321)]=DataManager['processRandomizedData'](_0x372d97);}}if(_0x4b1728['match'](VisuMZ['ElementStatusCore'][_0x47297b(0xaea)][_0x47297b(0x1ad)[_0x47297b(0xb60)](_0x451247,_0x2462ce)]))_0x330cb4[_0x47297b(0x498)]=DataManager[_0x47297b(0xac6)](RegExp['$1']);else{if(_0x4b1728[_0x47297b(0xb9e)](VisuMZ[_0x47297b(0x4f6)][_0x47297b(0xaea)]['SvWeaponMass-%1-%2'['format'](_0x451247,_0x2462ce)])){const _0x46dfb0=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)[_0x47297b(0xb8d)](''),_0x403dec=DataManager[_0x47297b(0x3ae)](_0x46dfb0);_0x330cb4['wtypeId']=DataManager['getWtypeIdWithName'](_0x403dec);}}if(_0x4b1728[_0x47297b(0xb9e)](VisuMZ[_0x47297b(0x4f6)][_0x47297b(0xaea)][_0x47297b(0x721)[_0x47297b(0xb60)](_0x451247,_0x2462ce)]))_0x330cb4[_0x47297b(0xb41)]=String(RegExp['$1'])[_0x47297b(0x918)]()[_0x47297b(0x651)]();else{if(_0x4b1728[_0x47297b(0xb9e)](VisuMZ[_0x47297b(0x4f6)][_0x47297b(0xaea)][_0x47297b(0x585)[_0x47297b(0xb60)](_0x451247,_0x2462ce)])){const _0x43ce98=String(RegExp['$1'])[_0x47297b(0x13b)](/[\r\n]+/)[_0x47297b(0xb8d)]('');_0x330cb4[_0x47297b(0xb41)]=DataManager[_0x47297b(0x3ae)](_0x43ce98);}}}}},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xb66)]=function(){const _0x30d0f4=_0x2dcaec;return this[_0x30d0f4(0x9f4)]||0x0;},Game_Enemy[_0x2dcaec(0xaf6)]['attackAnimationId2']=function(){const _0x5d0861=_0x2dcaec;return this[_0x5d0861(0xb66)]();},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x92b)]=function(_0x39799b){const _0x2132ae=_0x2dcaec;return this[_0x2132ae(0xb66)]();},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x8e6)]=function(){const _0x1f16fb=_0x2dcaec;if(this[_0x1f16fb(0x2cf)]()[_0x1f16fb(0x795)][_0x1f16fb(0xb9e)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler['prototype'][_0x1f16fb(0x8e6)]['call'](this);},Game_Enemy[_0x2dcaec(0xaf6)]['isBattlerGrounded']=function(){const _0x210a9c=_0x2dcaec;if(this[_0x210a9c(0x2cf)]()[_0x210a9c(0x795)][_0x210a9c(0xb9e)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x2dcaec(0xaf6)]['skills']=function(){const _0x5e7f76=_0x2dcaec,_0x2e4c83=[];for(const _0x5ccf02 of this['enemy']()[_0x5e7f76(0x8ba)]){const _0x164155=$dataSkills[_0x5ccf02['skillId']];if(_0x164155&&!_0x2e4c83[_0x5e7f76(0x7f2)](_0x164155))_0x2e4c83[_0x5e7f76(0x190)](_0x164155);}return _0x2e4c83;},Game_Enemy['prototype'][_0x2dcaec(0x8c1)]=function(){const _0x6ae130=_0x2dcaec;let _0x8354d5=_0x6ae130(0x8c1);if(this[_0x6ae130(0x520)](_0x8354d5))return this['_cache'][_0x8354d5];return this[_0x6ae130(0xc3c)][_0x8354d5]=this[_0x6ae130(0xace)](this[_0x6ae130(0x2cf)]()),this[_0x6ae130(0xc3c)][_0x8354d5];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x5c265e=_0x2dcaec;let _0x50549f=_0x5c265e(0x7a9);if(this['checkCacheKey'](_0x50549f))return this['_cache'][_0x50549f];return this[_0x5c265e(0xc3c)][_0x50549f]=this[_0x5c265e(0xa35)](this[_0x5c265e(0x2cf)]()),this[_0x5c265e(0xc3c)][_0x50549f];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x4b2)]=function(){const _0x1cdae4=_0x2dcaec;if(this[_0x1cdae4(0x690)]!==undefined)return this[_0x1cdae4(0x690)];return this[_0x1cdae4(0x767)](),this['_svBattlerData'];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x5c7)]=function(){const _0x335fbe=_0x2dcaec;return this[_0x335fbe(0x4b2)]()[_0x335fbe(0x321)]!=='';},Game_Enemy[_0x2dcaec(0xaf6)]['svBattlerName']=function(){const _0x553389=_0x2dcaec;return this[_0x553389(0x4b2)]()['name'];},Game_Enemy[_0x2dcaec(0xaf6)]['battlerSmoothImage']=function(){const _0x52a715=_0x2dcaec;return this[_0x52a715(0x5c7)]()?VisuMZ[_0x52a715(0xae3)][_0x52a715(0xbeb)][_0x52a715(0x46b)][_0x52a715(0xacf)]:VisuMZ[_0x52a715(0xae3)][_0x52a715(0xbeb)][_0x52a715(0xc36)]['SmoothImage'];},Game_Enemy['prototype'][_0x2dcaec(0x79c)]=function(_0x3ad2db){const _0x48e166=_0x2dcaec;Game_Battler['prototype'][_0x48e166(0x79c)][_0x48e166(0x390)](this,_0x3ad2db);if(this[_0x48e166(0x5c7)]())this[_0x48e166(0xc4b)](_0x3ad2db);},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xa83)]=function(){const _0x3e9971=_0x2dcaec,_0x21ec3c=this[_0x3e9971(0x4b2)]()[_0x3e9971(0x498)]||0x0,_0x31e381=$dataSystem['attackMotions'][_0x21ec3c];if(_0x31e381){if(_0x31e381[_0x3e9971(0x134)]===0x0)this[_0x3e9971(0x4a5)](_0x3e9971(0x98f));else{if(_0x31e381[_0x3e9971(0x134)]===0x1)this[_0x3e9971(0x4a5)](_0x3e9971(0x5ea));else _0x31e381[_0x3e9971(0x134)]===0x2&&this['requestMotion'](_0x3e9971(0x17a));}}},Game_Enemy['prototype'][_0x2dcaec(0x1b3)]=function(){const _0x5a48cb=_0x2dcaec,_0x132e73=this[_0x5a48cb(0x4b2)]()[_0x5a48cb(0x498)]||0x0,_0x211b69=$dataSystem['attackMotions'][_0x132e73];_0x211b69&&this[_0x5a48cb(0x4aa)](_0x211b69[_0x5a48cb(0xaf7)]);},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x58c)]=function(){const _0x7d872a=_0x2dcaec,_0xd5730f=this[_0x7d872a(0x4b2)]()[_0x7d872a(0x498)]||0x0;return $dataSystem[_0x7d872a(0x861)][_0xd5730f];},Game_Enemy['prototype'][_0x2dcaec(0x885)]=function(_0x41d952){return this['getAttackMotion']();},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xb72)]=function(){const _0x40818a=_0x2dcaec;Game_Battler[_0x40818a(0xaf6)][_0x40818a(0xb72)][_0x40818a(0x390)](this),this[_0x40818a(0xbfb)]()&&this[_0x40818a(0x5c7)]()&&this['requestMotion']('damage'),SoundManager[_0x40818a(0x96f)]();},Game_Enemy['prototype'][_0x2dcaec(0xa04)]=function(){const _0x492eeb=_0x2dcaec;Game_Battler[_0x492eeb(0xaf6)]['performEvasion'][_0x492eeb(0x390)](this),this[_0x492eeb(0x4a5)](_0x492eeb(0xc69));},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x697)]=function(){const _0x390fef=_0x2dcaec;Game_Battler[_0x390fef(0xaf6)]['performMagicEvasion']['call'](this),this[_0x390fef(0x4a5)](_0x390fef(0xc69));},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x580)]=function(){const _0x553c51=_0x2dcaec;Game_Battler[_0x553c51(0xaf6)][_0x553c51(0x580)][_0x553c51(0x390)](this),this['performAttack']();},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xbb4)]=function(){const _0x2ddcc4=_0x2dcaec;if(this['hasSvBattler']()){if(this['collapseType']()>=0x1)return!![];return this[_0x2ddcc4(0x4b2)]()['collapse'];}else return!![];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9f5)]=function(){const _0x5bd89b=_0x2dcaec;return this[_0x5bd89b(0x4b2)]()[_0x5bd89b(0x647)];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x942)]=function(){const _0x1471b8=_0x2dcaec;return this['svBattlerData']()[_0x1471b8(0x962)];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x4f7)]=function(){const _0x42ae6e=_0x2dcaec;return this[_0x42ae6e(0x4b2)]()[_0x42ae6e(0x76c)];},VisuMZ[_0x2dcaec(0xae3)]['Game_Enemy_transform']=Game_Enemy['prototype']['transform'],Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x67c)]=function(_0x3b4aa0){const _0x4e1fc2=_0x2dcaec;VisuMZ[_0x4e1fc2(0xae3)][_0x4e1fc2(0x5bc)][_0x4e1fc2(0x390)](this,_0x3b4aa0),this[_0x4e1fc2(0x1fe)](),this[_0x4e1fc2(0x767)]();const _0x44c13f=this[_0x4e1fc2(0xbc2)]();_0x44c13f&&(_0x44c13f[_0x4e1fc2(0xa2a)]=undefined,_0x44c13f[_0x4e1fc2(0x9a3)](this));},Game_Enemy['prototype'][_0x2dcaec(0x237)]=function(){const _0x20509a=_0x2dcaec,_0x422ee0=VisuMZ['BattleCore'][_0x20509a(0xbeb)][_0x20509a(0xc36)];this['_nameTempVisibleDuration']=_0x422ee0[_0x20509a(0x5da)]??0x0;},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x678)]=function(){const _0x25b3ea=_0x2dcaec;return this[_0x25b3ea(0x8ae)]&&this['_nameTempVisibleDuration']>0x0;},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x645)]=function(){const _0x2e1616=_0x2dcaec;this[_0x2e1616(0x8ae)]&&this[_0x2e1616(0x8ae)]>0x0&&this[_0x2e1616(0x8ae)]--;},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xc0f)]=function(){const _0x8e5c9f=_0x2dcaec;this[_0x8e5c9f(0x8ae)]=0x0;},Game_Enemy[_0x2dcaec(0xaf6)]['setupBattleCoreAspects']=function(){const _0x2c64d4=_0x2dcaec;this[_0x2c64d4(0x15d)]();const _0xa33813=this[_0x2c64d4(0x2cf)]()[_0x2c64d4(0x795)]||'';if(_0xa33813[_0x2c64d4(0xb9e)](/<ASPECT NAME:[ ](.*)>/i)){const _0x4ec9c3=String(RegExp['$1']);this[_0x2c64d4(0x83a)]()[_0x2c64d4(0x321)]=_0x4ec9c3[_0x2c64d4(0xb60)](this[_0x2c64d4(0x95e)]());}_0xa33813['match'](/<ASPECT ICON:[ ](\d+)>/i)&&(this[_0x2c64d4(0x83a)]()[_0x2c64d4(0x448)]=Number(RegExp['$1'])),_0xa33813[_0x2c64d4(0xb9e)](/<ASPECT COLOR:[ ](.*)>/i)&&(this['getAspectData']()[_0x2c64d4(0x476)]=String(RegExp['$1'])),_0xa33813['match'](/<ASPECT DESCRIPTION>\s*([\s\S]*)\s*<\/ASPECT DESCRIPTION>/i)&&(this[_0x2c64d4(0x83a)]()[_0x2c64d4(0x7c3)]=String(RegExp['$1']));},Game_Enemy['prototype'][_0x2dcaec(0x15d)]=function(){const _0x1ccbed=_0x2dcaec,_0x2a5538=VisuMZ[_0x1ccbed(0xae3)][_0x1ccbed(0xbeb)]['Enemy'][_0x1ccbed(0xb07)]??_0x1ccbed(0x1e6);this['_aspectData']={'name':_0x2a5538[_0x1ccbed(0xb60)](this[_0x1ccbed(0x95e)]()),'iconIndex':VisuMZ['BattleCore'][_0x1ccbed(0xbeb)][_0x1ccbed(0xc36)][_0x1ccbed(0x471)]??0x1a,'nameColor':VisuMZ[_0x1ccbed(0xae3)]['Settings']['Enemy'][_0x1ccbed(0xa84)]??'2','description':''};},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x83a)]=function(){const _0x112880=_0x2dcaec;if(this[_0x112880(0x404)]===undefined)this[_0x112880(0x253)]();return this[_0x112880(0x404)];},Game_Enemy['prototype'][_0x2dcaec(0x55e)]=function(){const _0x8d969b=_0x2dcaec;return(this[_0x8d969b(0x83a)]()[_0x8d969b(0x7c3)]||'')[_0x8d969b(0x7ce)]>0x0;},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xbca)]=function(){const _0x4117f8=_0x2dcaec;return VisuMZ[_0x4117f8(0xae3)][_0x4117f8(0xbeb)][_0x4117f8(0x53c)][_0x4117f8(0xbc3)];},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xbca)]=function(){const _0x138672=_0x2dcaec,_0x4687af=this[_0x138672(0x2cf)]()?this[_0x138672(0x2cf)]()[_0x138672(0x795)]||'':'';if(_0x4687af[_0x138672(0xb9e)](/<POPUP POSITION: HEAD>/i))return _0x138672(0x186);else{if(_0x4687af['match'](/<POPUP POSITION: CENTER>/i))return _0x138672(0xc43);else{if(_0x4687af[_0x138672(0xb9e)](/<POPUP POSITION: BASE>/i))return _0x138672(0xb6c);}}return Game_BattlerBase[_0x138672(0xaf6)][_0x138672(0xbca)][_0x138672(0x390)](this);},Game_BattlerBase['prototype'][_0x2dcaec(0x83e)]=function(){return 0x0;},Game_Enemy[_0x2dcaec(0xaf6)]['damagePopupOffsetX']=function(){const _0x120f98=_0x2dcaec,_0x4b38c=this[_0x120f98(0x2cf)]()?this[_0x120f98(0x2cf)]()['note']||'':'';if(_0x4b38c[_0x120f98(0xb9e)](/<POPUP OFFSET X: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x120f98(0xaf6)][_0x120f98(0x83e)][_0x120f98(0x390)](this);},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x4c3)]=function(){return 0x0;},Game_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x4c3)]=function(){const _0x3a94cb=_0x2dcaec,_0x20efdd=this[_0x3a94cb(0x2cf)]()?this[_0x3a94cb(0x2cf)]()[_0x3a94cb(0x795)]||'':'';if(_0x20efdd[_0x3a94cb(0xb9e)](/<POPUP OFFSET Y: ([\+\-]\d+)>/i))return Number(RegExp['$1']);return Game_BattlerBase[_0x3a94cb(0xaf6)][_0x3a94cb(0x4c3)][_0x3a94cb(0x390)](this);},Game_Unit['prototype'][_0x2dcaec(0xbd1)]=function(_0x19d612){const _0x328b49=_0x2dcaec;for(const _0x2df7ec of this[_0x328b49(0x963)]()){if(_0x2df7ec)_0x2df7ec[_0x328b49(0xbd1)](_0x19d612);}},Game_Unit[_0x2dcaec(0xaf6)]['trueRandomTarget']=function(){const _0x1a359e=_0x2dcaec,_0x5e2663=this[_0x1a359e(0x9ef)]();return _0x5e2663[Math[_0x1a359e(0xb44)](_0x5e2663[_0x1a359e(0x7ce)])];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x425)]=Game_Party[_0x2dcaec(0xaf6)][_0x2dcaec(0x93c)],Game_Party[_0x2dcaec(0xaf6)]['addActor']=function(_0x3a07eb){const _0x5b1f18=_0x2dcaec;VisuMZ[_0x5b1f18(0xae3)][_0x5b1f18(0x425)][_0x5b1f18(0x390)](this,_0x3a07eb),BattleManager[_0x5b1f18(0xc7b)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x45f)]=Game_Party[_0x2dcaec(0xaf6)][_0x2dcaec(0xc70)],Game_Party[_0x2dcaec(0xaf6)][_0x2dcaec(0xc70)]=function(_0x2ee4d6){const _0x5f5019=_0x2dcaec;VisuMZ[_0x5f5019(0xae3)][_0x5f5019(0x45f)]['call'](this,_0x2ee4d6),BattleManager[_0x5f5019(0xc7b)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x589)]=Game_Troop[_0x2dcaec(0xaf6)]['setup'],Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0xb15)]=function(_0xaeec6e){const _0x14cfaf=_0x2dcaec;$gameTemp[_0x14cfaf(0xc0a)](),$gameTemp['applyForcedGameTroopSettingsBattleCore'](_0xaeec6e),VisuMZ['BattleCore'][_0x14cfaf(0x589)][_0x14cfaf(0x390)](this,_0xaeec6e),this[_0x14cfaf(0xc38)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x270)]=Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0x409)],Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0x409)]=function(){const _0x408507=_0x2dcaec;let _0x540965=VisuMZ[_0x408507(0xae3)][_0x408507(0x270)][_0x408507(0x390)](this);return this[_0x408507(0xbe1)]&&(_0x540965*=this[_0x408507(0xbe1)]()),Math['ceil'](_0x540965);},Game_Troop['prototype']['expRate']=function(){return 0x1;},Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0xc38)]=function(){const _0x3e620a=_0x2dcaec,_0x2de7a5=DataManager[_0x3e620a(0x2f7)](this[_0x3e620a(0x6f3)]()['id']);if(_0x2de7a5[_0x3e620a(0xb9e)](/<(?:EXTEND|ADD):[ ](.*?)>/i)){const _0x364959=RegExp['$1'][_0x3e620a(0x13b)](',')['map'](_0x13f04d=>Number(_0x13f04d));this['checkExtendTroopCompatibility'](),this[_0x3e620a(0x732)](_0x364959);}},Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0xc1f)]=function(){const _0x29e87f=_0x2dcaec;let _0x583765=_0x29e87f(0x5cb)+'\x0a';_0x583765+=_0x29e87f(0x696),Imported[_0x29e87f(0x611)]&&(VisuMZ[_0x29e87f(0x9b2)][_0x29e87f(0x620)]<1.11&&(alert(_0x583765[_0x29e87f(0xb60)](_0x29e87f(0x470))),SceneManager[_0x29e87f(0x33f)]())),Imported[_0x29e87f(0xb0e)]&&(VisuMZ['BattleSystemCTB']['version']<1.19&&(alert(_0x583765[_0x29e87f(0xb60)](_0x29e87f(0x480))),SceneManager[_0x29e87f(0x33f)]())),Imported[_0x29e87f(0xb16)]&&(VisuMZ[_0x29e87f(0x86b)][_0x29e87f(0x620)]<1.15&&(alert(_0x583765['format'](_0x29e87f(0x644))),SceneManager['exit']()));},Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0x732)]=function(_0x5a00d0){const _0x13b7b2=_0x2dcaec;this[_0x13b7b2(0x1cf)]={};for(const _0x23df38 of this[_0x13b7b2(0x963)]()){if(!_0x23df38)continue;_0x23df38[_0x13b7b2(0xb21)]('');}for(const _0x311577 of _0x5a00d0){const _0x2f328c=$dataTroops[_0x311577];if(_0x2f328c)this['addExtendedTroopMembers'](_0x2f328c);}this[_0x13b7b2(0xb45)]();},Game_Troop[_0x2dcaec(0xaf6)]['addExtendedTroopMembers']=function(_0xc4bf26){const _0x49d21c=_0x2dcaec;for(const _0x109d5e of _0xc4bf26[_0x49d21c(0x963)]){if($dataEnemies[_0x109d5e['enemyId']]){const _0x5953fd=_0x109d5e[_0x49d21c(0xab2)],_0x377daa=_0x109d5e['x'],_0x258ffa=_0x109d5e['y'],_0x170bc8=new Game_Enemy(_0x5953fd,_0x377daa,_0x258ffa);_0x109d5e[_0x49d21c(0x693)]&&_0x170bc8[_0x49d21c(0x4df)](),this[_0x49d21c(0x250)][_0x49d21c(0x190)](_0x170bc8);}}},VisuMZ['BattleCore'][_0x2dcaec(0xbea)]=Game_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x8cc)],Game_Map['prototype'][_0x2dcaec(0x8cc)]=function(){const _0x1150d9=_0x2dcaec;VisuMZ[_0x1150d9(0xae3)]['Game_Map_setupBattleback']['call'](this),this[_0x1150d9(0x1bf)]();},Game_Map[_0x2dcaec(0xaf6)]['setupBattlebackBattleCore']=function(){const _0xdb3b36=_0x2dcaec;this[_0xdb3b36(0x66d)]={},this['_regionBattleback2']={};if(!$dataMap)return;const _0x1c98f1=$dataMap[_0xdb3b36(0x795)];if(!_0x1c98f1)return;const _0x3d1756=_0x1c98f1['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x3d1756)for(const _0x5ae0f5 of _0x3d1756){_0x5ae0f5['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x3a4a33=Number(RegExp['$1']),_0x4e2b62=Number(RegExp['$2']),_0xc49fbe=_0x4e2b62===0x1?this['_regionBattleback1']:this['_regionBattleback2'],_0x26fcb9=String(RegExp['$3']);_0xc49fbe[_0x3a4a33]=_0x26fcb9;}},VisuMZ['BattleCore'][_0x2dcaec(0x4ef)]=Game_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x806)],Game_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x806)]=function(){const _0x9632c2=_0x2dcaec;if(!BattleManager[_0x9632c2(0xb36)]()){const _0xe6134=$gamePlayer[_0x9632c2(0xb5b)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x9632c2(0x66d)][_0xe6134])return this[_0x9632c2(0x66d)][_0xe6134];}return VisuMZ[_0x9632c2(0xae3)][_0x9632c2(0x4ef)][_0x9632c2(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)]['Game_Map_battleback2Name']=Game_Map['prototype'][_0x2dcaec(0xa6a)],Game_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0xa6a)]=function(){const _0x154492=_0x2dcaec;if(!BattleManager[_0x154492(0xb36)]()){const _0x503776=$gamePlayer[_0x154492(0xb5b)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x154492(0x66d)]&&this[_0x154492(0x31c)][_0x503776])return this[_0x154492(0x31c)][_0x503776];}return VisuMZ[_0x154492(0xae3)][_0x154492(0x1ef)][_0x154492(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7ac)]=Game_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e9)],Game_Map[_0x2dcaec(0xaf6)]['encounterList']=function(){const _0x5d5b5a=_0x2dcaec;let _0x12ba0e=JsonEx[_0x5d5b5a(0xa12)](VisuMZ[_0x5d5b5a(0xae3)]['Game_Map_encounterList'][_0x5d5b5a(0x390)](this));return VisuMZ['BattleCore'][_0x5d5b5a(0xb92)](_0x12ba0e);},VisuMZ['BattleCore'][_0x2dcaec(0xb92)]=function(_0x53af2c){var _0x36babf,_0x31918e,_0x10baea;for(_0x10baea=_0x53af2c['length']-0x1;_0x10baea>0x0;_0x10baea--){_0x36babf=Math['floor'](Math['random']()*(_0x10baea+0x1)),_0x31918e=_0x53af2c[_0x10baea],_0x53af2c[_0x10baea]=_0x53af2c[_0x36babf],_0x53af2c[_0x36babf]=_0x31918e;}return _0x53af2c;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x40a)]=Game_Interpreter['prototype'][_0x2dcaec(0x7f5)],Game_Interpreter[_0x2dcaec(0xaf6)]['command357']=function(_0x4c3fe6){const _0x2813cc=_0x2dcaec;return $gameTemp['setLastPluginCommandInterpreter'](this),VisuMZ['BattleCore']['Game_Interpreter_PluginCommand'][_0x2813cc(0x390)](this,_0x4c3fe6);},VisuMZ[_0x2dcaec(0xae3)]['Game_Interpreter_updateWaitMode']=Game_Interpreter[_0x2dcaec(0xaf6)]['updateWaitMode'],Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x8ea)]=function(){const _0x5f43fd=_0x2dcaec;if(SceneManager['isSceneBattle']())switch(this[_0x5f43fd(0x1b9)]){case _0x5f43fd(0x3c4):if(Imported[_0x5f43fd(0x161)]){if($gameScreen[_0x5f43fd(0x41f)]()[_0x5f43fd(0xad8)]>0x0)return!![];this[_0x5f43fd(0x1b9)]='';}break;case _0x5f43fd(0x14f):if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0xa6f)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x998):if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x59a)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case'battleCamera':if(Imported[_0x5f43fd(0x161)]){if($gameScreen[_0x5f43fd(0x41f)]()[_0x5f43fd(0x298)]>0x0)return!![];if($gameScreen[_0x5f43fd(0x41f)]()[_0x5f43fd(0xbc6)]>0x0)return!![];this[_0x5f43fd(0x1b9)]='';}break;case'battleEffect':if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x384)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x6cb):if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x21f)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case'battleJump':if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x2a4)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0xbd0):if(BattleManager[_0x5f43fd(0x9a7)][_0x5f43fd(0x4c7)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x1ee):if(BattleManager[_0x5f43fd(0x2a3)]['isAnyoneMoving']())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x6e6):if(BattleManager['_spriteset'][_0x5f43fd(0x656)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x19f):if(BattleManager[_0x5f43fd(0x2a3)]['isAnyoneGrowing']())return!![];this[_0x5f43fd(0x1b9)]='';break;case'battleSpriteSkew':if(BattleManager[_0x5f43fd(0x2a3)]['isAnyoneSkewing']())return!![];this[_0x5f43fd(0x1b9)]='';break;case'battleProjectiles':if(Imported[_0x5f43fd(0x801)]){if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x15c)]())return!![];this['_waitMode']='';}break;case _0x5f43fd(0x839):if(Imported[_0x5f43fd(0x161)]){if($gameScreen['battleCameraData']()[_0x5f43fd(0x228)]>0x0)return!![];this['_waitMode']='';}break;case _0x5f43fd(0x8a8):if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x70b)]())return!![];this[_0x5f43fd(0x1b9)]='';break;case _0x5f43fd(0x6aa):if(Imported[_0x5f43fd(0x161)]){if($gameScreen['battleCameraData']()['zoomDuration']>0x0)return!![];this[_0x5f43fd(0x1b9)]='';}break;case _0x5f43fd(0x397):if(Imported['VisuMZ_3_ActSeqImpact']){if(BattleManager[_0x5f43fd(0x2a3)][_0x5f43fd(0x63a)]){if(BattleManager[_0x5f43fd(0x2a3)]['isAnyoneInjectAniPrepping']())return!![];this[_0x5f43fd(0x1b9)]=_0x5f43fd(0x922);}else this['_waitMode']='';break;}break;case _0x5f43fd(0x922):if(Imported[_0x5f43fd(0x277)]){if(BattleManager[_0x5f43fd(0x2a3)]['isAnyoneInjectAnimating']())return!![];this[_0x5f43fd(0x1b9)]='';}break;}return VisuMZ[_0x5f43fd(0xae3)]['Game_Interpreter_updateWaitMode']['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x48c)]=Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x6d7)],Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x6d7)]=function(_0x12fb1a){const _0x5be4e2=_0x2dcaec;return!$gameParty[_0x5be4e2(0x208)]()?this[_0x5be4e2(0x49f)](_0x12fb1a):VisuMZ['BattleCore'][_0x5be4e2(0x48c)][_0x5be4e2(0x390)](this,_0x12fb1a);},Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x828)]=function(_0x3b4708){const _0x479a4a=_0x2dcaec;return VisuMZ[_0x479a4a(0xae3)][_0x479a4a(0x48c)][_0x479a4a(0x390)](this,_0x3b4708),BattleManager[_0x479a4a(0x230)](_0x17c3bc=>{const _0x1c864e=_0x479a4a;this[_0x1c864e(0x78d)][this['_indent']]=_0x17c3bc;}),!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x53b)]=function(_0x1a07a0){const _0x3fe8bc=_0x2dcaec,_0x558444=$dataCommonEvents[_0x1a07a0];if(!_0x558444)return![];if(_0x558444[_0x3fe8bc(0x97c)][_0x3fe8bc(0x7ce)]<=0x1)return![];return!![];},Game_Interpreter['prototype']['command301_PreBattleEvent']=function(_0x2e2d72){const _0x5849ed=_0x2dcaec,_0x361c54=VisuMZ[_0x5849ed(0xae3)][_0x5849ed(0xbeb)]['Mechanics'],_0x5a65d6=_0x361c54[_0x5849ed(0x745)],_0x13f966=$dataCommonEvents[_0x5a65d6];if(_0x13f966&&VisuMZ[_0x5849ed(0xae3)]['CheckMapBattleEventValid'](_0x5a65d6)){const _0x523909=this[_0x5849ed(0xa0d)]()?this[_0x5849ed(0x43b)]:0x0,_0x40fedf=_0x13f966[_0x5849ed(0x97c)];this['setupChild'](_0x40fedf,_0x523909),this[_0x5849ed(0x144)]=JsonEx[_0x5849ed(0xa12)](this[_0x5849ed(0x144)]);const _0x45c71c={'code':0xbc3,'indent':this['_indent'],'parameters':JsonEx[_0x5849ed(0xa12)](_0x2e2d72)};return this['_list'][_0x5849ed(0x5c0)](this['_index']+0x1,0x0,_0x45c71c),!![];}else return VisuMZ['BattleCore'][_0x5849ed(0x48c)][_0x5849ed(0x390)](this,_0x2e2d72);},VisuMZ['BattleCore'][_0x2dcaec(0x2e4)]=BattleManager['onEncounter'],BattleManager['onEncounter']=function(){const _0x6d734=_0x2dcaec;VisuMZ['BattleCore'][_0x6d734(0x2e4)][_0x6d734(0x390)](this),this[_0x6d734(0x97a)]();},BattleManager['onEncounterBattleCore']=function(){const _0x5675c3=_0x2dcaec,_0x43c766=VisuMZ[_0x5675c3(0xae3)]['Settings'][_0x5675c3(0x41e)],_0x27fa36=_0x43c766[_0x5675c3(0x745)];_0x27fa36&&VisuMZ[_0x5675c3(0xae3)][_0x5675c3(0x53b)](_0x27fa36)&&(this[_0x5675c3(0x268)]=!![],$gameTemp[_0x5675c3(0x72f)](_0x43c766[_0x5675c3(0x745)]),$gameMap[_0x5675c3(0x8f6)](),$gameMap['_interpreter'][_0x5675c3(0x192)]=!![]),_0x43c766[_0x5675c3(0x826)]>0x0&&(this[_0x5675c3(0xb11)]=!![]);},VisuMZ['BattleCore'][_0x2dcaec(0x3f2)]=Scene_Map[_0x2dcaec(0xaf6)]['updateCallMenu'],Scene_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x3ce)]=function(){const _0x545dc6=_0x2dcaec;if(BattleManager[_0x545dc6(0x268)])return;VisuMZ['BattleCore'][_0x545dc6(0x3f2)][_0x545dc6(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)]['Scene_Map_launchBattle']=Scene_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x739)],Scene_Map['prototype']['launchBattle']=function(){const _0x378de9=_0x2dcaec;BattleManager[_0x378de9(0x268)]?this[_0x378de9(0x33a)]():VisuMZ[_0x378de9(0xae3)][_0x378de9(0x646)][_0x378de9(0x390)](this);},Scene_Map['prototype'][_0x2dcaec(0x33a)]=function(){const _0x200974=_0x2dcaec;this[_0x200974(0x96a)]=!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x26d)]=SceneManager[_0x2dcaec(0x3cb)],SceneManager[_0x2dcaec(0x3cb)]=function(){const _0x2ea96c=_0x2dcaec;if(BattleManager[_0x2ea96c(0x268)])return![];return VisuMZ['BattleCore']['SceneManager_isSceneChanging']['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6a0)]=Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x301)],Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x301)]=function(){const _0x4d9efe=_0x2dcaec;VisuMZ[_0x4d9efe(0xae3)]['Game_Interpreter_terminate']['call'](this),this[_0x4d9efe(0x192)]&&(this[_0x4d9efe(0x192)]=undefined,SceneManager[_0x4d9efe(0x496)]['battleCoreResumeLaunchBattle']());},Scene_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x772)]=function(){const _0x9da618=_0x2dcaec;BattleManager[_0x9da618(0x268)]=undefined,BattleManager[_0x9da618(0x9c4)]=!![],this['stop']();},VisuMZ['BattleCore'][_0x2dcaec(0x318)]=Scene_Map[_0x2dcaec(0xaf6)]['initialize'],Scene_Map[_0x2dcaec(0xaf6)]['initialize']=function(){const _0x2f804a=_0x2dcaec;VisuMZ[_0x2f804a(0xae3)]['Scene_Map_initializeAfter'][_0x2f804a(0x390)](this),BattleManager[_0x2f804a(0x9c4)]&&(this[_0x2f804a(0x96a)]=!![],BattleManager[_0x2f804a(0x9c4)]=undefined);},VisuMZ[_0x2dcaec(0xae3)]['Scene_Map_initialize']=Scene_Map[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Scene_Map['prototype'][_0x2dcaec(0x970)]=function(){const _0x2af323=_0x2dcaec;VisuMZ[_0x2af323(0xae3)][_0x2af323(0x252)][_0x2af323(0x390)](this),$gameTemp['clearForcedGameTroopSettingsBattleCore']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x284)]=Scene_ItemBase[_0x2dcaec(0xaf6)][_0x2dcaec(0xb23)],Scene_ItemBase[_0x2dcaec(0xaf6)]['applyItem']=function(){const _0x123bde=_0x2dcaec;VisuMZ[_0x123bde(0xae3)][_0x123bde(0x284)][_0x123bde(0x390)](this);if(this[_0x123bde(0x719)]()[_0x123bde(0x795)][_0x123bde(0xb9e)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x123bde(0x719)]()[_0x123bde(0x795)]['match'](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x123bde(0x155)]=[]),DataManager['checkAutoCustomActionSequenceNotetagEffect'](this[_0x123bde(0x719)]())&&($gameTemp[_0x123bde(0x155)]=[]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7c1)]=Scene_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0xab1)],Scene_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0xab1)]=function(){const _0x587a77=_0x2dcaec;let _0x7dc54f=VisuMZ['BattleCore'][_0x587a77(0x7c1)][_0x587a77(0x390)](this);const _0x4a83db=VisuMZ[_0x587a77(0xae3)][_0x587a77(0xbeb)];if(_0x4a83db['AutoBattle'][_0x587a77(0x91e)]&&_0x4a83db[_0x587a77(0xaec)][_0x587a77(0xc47)])_0x7dc54f+=0x2;if(_0x4a83db['HpGauge'][_0x587a77(0x91e)]&&_0x4a83db[_0x587a77(0x2bb)]['AdjustRect'])_0x7dc54f+=0x1;return _0x7dc54f;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa80)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(){const _0x27c92e=_0x2dcaec;VisuMZ[_0x27c92e(0xae3)][_0x27c92e(0xa80)][_0x27c92e(0x390)](this),this[_0x27c92e(0x3e7)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5ab)]=Scene_Battle['prototype'][_0x2dcaec(0x332)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x332)]=function(){const _0xd604c0=_0x2dcaec;SceneManager[_0xd604c0(0x8bc)]()?(Scene_Message['prototype'][_0xd604c0(0x332)][_0xd604c0(0x390)](this),this['_spriteset']&&this['_spriteset'][_0xd604c0(0x23a)](),BattleManager[_0xd604c0(0x8e2)]&&BattleManager[_0xd604c0(0xa54)]()):(VisuMZ['BattleCore'][_0xd604c0(0x5ab)][_0xd604c0(0x390)](this),$gameTroop[_0xd604c0(0xa2e)]());},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc5f)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb2e)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb2e)]=function(){const _0x75b39d=_0x2dcaec;SceneManager[_0x75b39d(0xbfe)]()?Scene_Message[_0x75b39d(0xaf6)][_0x75b39d(0xb2e)][_0x75b39d(0x390)](this):VisuMZ[_0x75b39d(0xae3)][_0x75b39d(0xc5f)]['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9e9)]=Scene_Battle['prototype'][_0x2dcaec(0x301)],Scene_Battle['prototype'][_0x2dcaec(0x301)]=function(){const _0x4fb101=_0x2dcaec;SceneManager[_0x4fb101(0xbfe)]()?Scene_Message[_0x4fb101(0xaf6)]['terminate'][_0x4fb101(0x390)](this):VisuMZ[_0x4fb101(0xae3)][_0x4fb101(0x9e9)][_0x4fb101(0x390)](this),$gameTemp['clearBattleBalloons'](),this[_0x4fb101(0x3e7)]();},Scene_Battle[_0x2dcaec(0xaf6)]['isRightInputMode']=function(){const _0x3f21ae=_0x2dcaec;if(ConfigManager[_0x3f21ae(0x7df)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x3f21ae(0x1e0)];else{if(this[_0x3f21ae(0x9c9)]()===_0x3f21ae(0x541))return![];else{return Scene_Message[_0x3f21ae(0xaf6)]['isRightInputMode']['call'](this);;}}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa76)]=Scene_Battle[_0x2dcaec(0xaf6)]['createCancelButton'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x640)]=function(){const _0x472597=_0x2dcaec;VisuMZ[_0x472597(0xae3)][_0x472597(0xa76)][_0x472597(0x390)](this),this[_0x472597(0x9c9)]()===_0x472597(0x541)&&this[_0x472597(0x23b)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x51e)]=function(_0x25c22e){const _0xee7b47=_0x2dcaec;_0x25c22e?(this[_0xee7b47(0x3c9)]['x']=(Graphics[_0xee7b47(0x64b)]-Graphics[_0xee7b47(0x555)])/0x2,this[_0xee7b47(0x3c9)]['y']=(Graphics[_0xee7b47(0x75c)]-Graphics['boxHeight'])/0x2):(this[_0xee7b47(0x3c9)]['x']=Graphics['width']*0xa,this[_0xee7b47(0x3c9)]['y']=Graphics[_0xee7b47(0x75c)]*0xa);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xac2)]=Scene_Battle['prototype']['selectNextCommand'],Scene_Battle[_0x2dcaec(0xaf6)]['selectNextCommand']=function(){const _0x2cd548=_0x2dcaec,_0x96f810=BattleManager[_0x2cd548(0x3fc)]();VisuMZ[_0x2cd548(0xae3)][_0x2cd548(0xac2)]['call'](this);if(_0x96f810){if(_0x96f810===BattleManager['actor']())return;if(_0x96f810===BattleManager['_subject'])return;if(_0x96f810[_0x2cd548(0xbc2)]())_0x96f810[_0x2cd548(0xbc2)]()['stepBack']();}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x3fa)]=Scene_Battle['prototype'][_0x2dcaec(0x975)],Scene_Battle['prototype'][_0x2dcaec(0x975)]=function(){const _0x180123=_0x2dcaec,_0x5b47c4=BattleManager[_0x180123(0x3fc)]();if(_0x5b47c4&&_0x5b47c4[_0x180123(0xbc2)])_0x5b47c4['battler']()[_0x180123(0x844)]();VisuMZ[_0x180123(0xae3)][_0x180123(0x3fa)][_0x180123(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5de)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb90)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb90)]=function(){const _0x43a3e1=_0x2dcaec;this['createEnemyNameContainer'](),VisuMZ['BattleCore']['Scene_Battle_createAllWindows'][_0x43a3e1(0x390)](this),this[_0x43a3e1(0x57b)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x876)]=Scene_Battle[_0x2dcaec(0xaf6)]['logWindowRect'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d4)]=function(){const _0x16e52f=_0x2dcaec;if(VisuMZ['BattleCore'][_0x16e52f(0xbeb)][_0x16e52f(0xa09)][_0x16e52f(0x810)])return VisuMZ['BattleCore']['Settings']['BattleLog']['BattleLogRectJS']['call'](this);return VisuMZ[_0x16e52f(0xae3)]['Scene_Battle_logWindowRect'][_0x16e52f(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)]['Scene_Battle_createPartyCommandWindow']=Scene_Battle[_0x2dcaec(0xaf6)]['createPartyCommandWindow'],Scene_Battle['prototype']['createPartyCommandWindow']=function(){const _0x235add=_0x2dcaec;VisuMZ['BattleCore'][_0x235add(0xb2f)][_0x235add(0x390)](this),this['createPartyCommandWindowBattleCore']();},Scene_Battle['prototype'][_0x2dcaec(0x354)]=function(){const _0x4c9b27=_0x2dcaec,_0x3b3696=this[_0x4c9b27(0xad9)];_0x3b3696['setHandler'](_0x4c9b27(0x837),this[_0x4c9b27(0x395)]['bind'](this)),_0x3b3696[_0x4c9b27(0x494)](_0x4c9b27(0x14d),this[_0x4c9b27(0x6f9)][_0x4c9b27(0x558)](this));const _0x35695d=this['battleLayoutStyle']();switch(_0x35695d){case'xp':case _0x4c9b27(0x3ec):return this[_0x4c9b27(0xad9)][_0x4c9b27(0x178)](0x1);break;}},Scene_Battle[_0x2dcaec(0xaf6)]['commandAutoBattle']=function(){const _0x5ec347=_0x2dcaec;BattleManager[_0x5ec347(0x91c)]=!![],$gameParty[_0x5ec347(0x23e)](),this['selectNextCommand'](),BattleManager[_0x5ec347(0x17f)]()&&(BattleManager[_0x5ec347(0x4b9)]=![]);},Scene_Battle['prototype']['commandOptions']=function(){const _0x3508ba=_0x2dcaec;this[_0x3508ba(0x9c6)]()?(this[_0x3508ba(0x734)]=!![],this[_0x3508ba(0x9a7)][_0x3508ba(0x190)]('addText',VisuMZ['BattleCore'][_0x3508ba(0xbeb)][_0x3508ba(0x586)]['ActiveTpbOptionsMessage'])):this[_0x3508ba(0x9fb)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c6)]=function(){return BattleManager['isActiveTpb']();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x9fb)]=function(){const _0x24e6b9=_0x2dcaec;this[_0x24e6b9(0x734)]=![],this[_0x24e6b9(0x2a3)][_0x24e6b9(0x23a)](),this[_0x24e6b9(0x3c9)]['visible']=![];if(BattleManager[_0x24e6b9(0xb36)]())($dataSystem[_0x24e6b9(0x806)]||$dataSystem[_0x24e6b9(0xa6a)])&&SceneManager['snapForBackground']();else($gameMap[_0x24e6b9(0x806)]()||$gameMap['battleback2Name']())&&SceneManager[_0x24e6b9(0x2c6)]();SceneManager[_0x24e6b9(0x190)](Scene_Options),BattleManager[_0x24e6b9(0x17f)]()&&(BattleManager[_0x24e6b9(0x8e2)]=BattleManager[_0x24e6b9(0x3fc)]());},VisuMZ['BattleCore'][_0x2dcaec(0x87c)]=Scene_Battle['prototype']['updateBattleProcess'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2a2)]=function(){const _0x469d9d=_0x2dcaec;VisuMZ['BattleCore']['Scene_Battle_updateBattleProcess']['call'](this);if(this[_0x469d9d(0x734)]&&!BattleManager[_0x469d9d(0x173)])this[_0x469d9d(0x9fb)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2ad)]=Scene_Battle[_0x2dcaec(0xaf6)]['update'],Scene_Battle['prototype'][_0x2dcaec(0x23a)]=function(){const _0x2edbb7=_0x2dcaec;VisuMZ[_0x2edbb7(0xae3)]['Scene_Battle_update'][_0x2edbb7(0x390)](this),this[_0x2edbb7(0x164)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x57b)]=function(){const _0x53b708=_0x2dcaec,_0x51ee92=this[_0x53b708(0x412)]();this['_autoBattleWindow']=new Window_AutoBattleCancel(_0x51ee92),this['_autoBattleWindow'][_0x53b708(0x4df)](),this[_0x53b708(0x83f)](this[_0x53b708(0x500)]);},Scene_Battle['prototype']['autoBattleWindowRect']=function(){const _0x41dc7e=_0x2dcaec;return VisuMZ[_0x41dc7e(0xae3)]['Settings'][_0x41dc7e(0xaec)]['AutoBattleRect']['call'](this);},Scene_Battle[_0x2dcaec(0xaf6)]['clearOnceParallelInterpreters']=function(){this['_onceParallelInterpreters']=[];},Scene_Battle['prototype'][_0x2dcaec(0x164)]=function(){const _0x3d6a54=_0x2dcaec;if(!this['_onceParallelInterpreters'])return;for(const _0x3ba8b8 of this['_onceParallelInterpreters']){_0x3ba8b8&&_0x3ba8b8[_0x3d6a54(0x23a)]();}},Scene_Battle[_0x2dcaec(0xaf6)]['playOnceParallelInterpreter']=function(_0x10e157){const _0x2e11f5=$dataCommonEvents[_0x10e157];if(!_0x2e11f5)return;const _0x209470=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x209470),_0x209470['setCommonEvent'](_0x10e157);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x932)]=function(_0x136b46){const _0x916d5f=_0x2dcaec;this[_0x916d5f(0x79d)]=this[_0x916d5f(0x79d)]||[],this['_onceParallelInterpreters'][_0x916d5f(0x190)](_0x136b46);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xc54)]=function(_0x1a83c5){const _0x5d6928=_0x2dcaec;this[_0x5d6928(0x79d)]=this['_onceParallelInterpreters']||[],this[_0x5d6928(0x79d)][_0x5d6928(0xb8d)](_0x1a83c5);},Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0xa2e)]=function(){const _0x52c343=_0x2dcaec;for(const _0x51395d of this['troop']()[_0x52c343(0x459)]){if(!this[_0x52c343(0x7fb)](_0x51395d))continue;SceneManager['_scene'][_0x52c343(0xaf3)](_0x51395d);}},Game_Troop[_0x2dcaec(0xaf6)][_0x2dcaec(0x7fb)]=function(_0x37ad7f){const _0x48f522=_0x2dcaec;if(!_0x37ad7f)return;for(const _0x16f32e of _0x37ad7f[_0x48f522(0x97c)]){if([0x6c,0x198][_0x48f522(0x7f2)](_0x16f32e['code'])){const _0x138c63=_0x16f32e[_0x48f522(0x718)][0x0];if(_0x138c63[_0x48f522(0xb9e)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];},Scene_Battle[_0x2dcaec(0xaf6)]['playOnceParallelTroopPage']=function(_0x1c963c){const _0x170e35=_0x2dcaec;if(!_0x1c963c)return;const _0x43ca03=new Game_BattleOnceParallelInterpreter();this[_0x170e35(0x932)](_0x43ca03),_0x43ca03['setTroopPage'](_0x1c963c);};function Game_BattleOnceParallelInterpreter(){const _0x3461c5=_0x2dcaec;this[_0x3461c5(0x970)](...arguments);}Game_BattleOnceParallelInterpreter[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Game_Interpreter[_0x2dcaec(0xaf6)]),Game_BattleOnceParallelInterpreter[_0x2dcaec(0xaf6)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x2db)]=function(_0x2d6e62){const _0x1461c5=_0x2dcaec,_0x555bf6=$dataCommonEvents[_0x2d6e62];_0x555bf6?this[_0x1461c5(0xb15)](_0x555bf6[_0x1461c5(0x97c)],0x0):this[_0x1461c5(0x301)]();},Game_BattleOnceParallelInterpreter['prototype'][_0x2dcaec(0x301)]=function(){const _0x536bda=_0x2dcaec;if(!SceneManager[_0x536bda(0xa2b)]())return;SceneManager[_0x536bda(0x496)][_0x536bda(0xc54)](this),Game_Interpreter['prototype'][_0x536bda(0x301)][_0x536bda(0x390)](this);},Game_BattleOnceParallelInterpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x70f)]=function(_0x2b7739){const _0x44dbdd=_0x2dcaec;_0x2b7739?this[_0x44dbdd(0xb15)](_0x2b7739[_0x44dbdd(0x97c)],0x0):this[_0x44dbdd(0x301)]();},Scene_Battle['prototype'][_0x2dcaec(0x436)]=function(){const _0x4f8dc1=_0x2dcaec;return VisuMZ['BattleCore']['Settings']['PartyCmd'][_0x4f8dc1(0x3a5)];},VisuMZ['BattleCore'][_0x2dcaec(0x33b)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xc1c)],Scene_Battle['prototype'][_0x2dcaec(0xc1c)]=function(){const _0x1a5a8e=_0x2dcaec;this[_0x1a5a8e(0x436)]()?this[_0x1a5a8e(0x523)]():VisuMZ[_0x1a5a8e(0xae3)]['Scene_Battle_startPartyCommandSelection'][_0x1a5a8e(0x390)](this);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x523)]=function(){const _0x43d5b7=_0x2dcaec;if(BattleManager['isDTB']())this['selectNextCommand']();else BattleManager[_0x43d5b7(0x17f)]()&&VisuMZ[_0x43d5b7(0xae3)]['Scene_Battle_startPartyCommandSelection'][_0x43d5b7(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0xc67)]=Scene_Battle['prototype'][_0x2dcaec(0xb82)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb82)]=function(){const _0x3a875e=_0x2dcaec;BattleManager[_0x3a875e(0x17f)]()?(this[_0x3a875e(0x738)](),this['startActorCommandSelection']()):VisuMZ[_0x3a875e(0xae3)][_0x3a875e(0xc67)][_0x3a875e(0x390)](this);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x738)]=function(){const _0x4219da=_0x2dcaec;if(!VisuMZ[_0x4219da(0xae3)][_0x4219da(0xb6f)])return;if(Imported[_0x4219da(0xb0e)]&&BattleManager[_0x4219da(0x6ec)]())return;const _0x477a71=$gameParty[_0x4219da(0x9ef)]()['filter'](_0x4e9832=>_0x4e9832[_0x4219da(0x815)]()&&_0x4e9832[_0x4219da(0xc01)]());BattleManager[_0x4219da(0xc49)]=_0x477a71[0x0]||null,BattleManager['_currentActor']&&BattleManager['_currentActor'][_0x4219da(0x4c0)]('inputting');},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xadc)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1b)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1b)]=function(){const _0x997ca=_0x2dcaec;VisuMZ[_0x997ca(0xae3)]['Scene_Battle_commandEscape'][_0x997ca(0x390)](this);if(!BattleManager['isTpb']())BattleManager[_0x997ca(0xc49)]=null;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x857)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x316)],Scene_Battle['prototype'][_0x2dcaec(0x316)]=function(){const _0x585f4d=_0x2dcaec;VisuMZ[_0x585f4d(0xae3)][_0x585f4d(0x857)][_0x585f4d(0x390)](this),this[_0x585f4d(0x32b)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x32b)]=function(){const _0x50a7c6=_0x2dcaec,_0x3b4ea3=this[_0x50a7c6(0x4a8)];_0x3b4ea3[_0x50a7c6(0x494)](_0x50a7c6(0x5b0),this[_0x50a7c6(0x845)]['bind'](this)),_0x3b4ea3[_0x50a7c6(0x494)](_0x50a7c6(0x837),this['actorCommandAutoBattle']['bind'](this)),_0x3b4ea3[_0x50a7c6(0x494)](_0x50a7c6(0xa02),this[_0x50a7c6(0xc06)][_0x50a7c6(0x558)](this)),BattleManager[_0x50a7c6(0x17f)]()&&(this[_0x50a7c6(0x436)]()?delete _0x3b4ea3[_0x50a7c6(0x912)]['cancel']:_0x3b4ea3[_0x50a7c6(0x494)](_0x50a7c6(0x473),this[_0x50a7c6(0xac0)][_0x50a7c6(0x558)](this)));},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x845)]=function(){this['commandEscape']();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x3c7)]=function(){const _0x42da9c=_0x2dcaec;BattleManager[_0x42da9c(0x3fc)]()[_0x42da9c(0x666)](),BattleManager[_0x42da9c(0xbf5)](),BattleManager[_0x42da9c(0x85e)](),this[_0x42da9c(0x880)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xc06)]=function(){const _0x2cf0c5=_0x2dcaec,_0x22124a=BattleManager[_0x2cf0c5(0x524)](),_0x2200f1=this[_0x2cf0c5(0x4a8)][_0x2cf0c5(0x34e)]();_0x22124a[_0x2cf0c5(0xa16)](_0x2200f1),BattleManager[_0x2cf0c5(0x3fc)]()[_0x2cf0c5(0x1ae)]($dataSkills[_0x2200f1]),this[_0x2cf0c5(0x6d4)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xac0)]=function(){const _0x462b18=_0x2dcaec;this[_0x462b18(0x3af)]()?this[_0x462b18(0xbd9)]():this[_0x462b18(0x90c)]();},VisuMZ['BattleCore'][_0x2dcaec(0xb6f)]=![],Scene_Battle[_0x2dcaec(0xaf6)]['tpbActorSwitchConditionsMet']=function(){const _0x312435=_0x2dcaec;if(Imported['VisuMZ_2_BattleSystemCTB']&&BattleManager[_0x312435(0x6ec)]())return![];else{if(!VisuMZ[_0x312435(0xae3)]['TpbActiveChangeEnabled'])return![];const _0x39a58c=$gameParty[_0x312435(0x9ef)]()[_0x312435(0x5ed)](_0xbbb233=>_0xbbb233[_0x312435(0x815)]()&&_0xbbb233['canInput']());return _0x39a58c[_0x312435(0x7ce)]>0x0&&BattleManager[_0x312435(0x3fc)]()!==_0x39a58c[_0x39a58c[_0x312435(0x7ce)]-0x1];}},Scene_Battle[_0x2dcaec(0xaf6)]['performTpbActiveCheckSwitch']=function(){const _0x1579fd=_0x2dcaec,_0x28eede=BattleManager['actor'](),_0x5a8ead=_0x28eede[_0x1579fd(0xbc2)]();if(_0x5a8ead)_0x5a8ead[_0x1579fd(0x844)]();const _0xeb0570=$gameParty[_0x1579fd(0x9ef)]()[_0x1579fd(0x5ed)](_0x2bd1b1=>_0x2bd1b1['isTpbCharged']()&&_0x2bd1b1[_0x1579fd(0xc01)]()),_0x5df180=_0xeb0570[_0x1579fd(0x7bc)](_0x28eede),_0x4555da=_0xeb0570[_0x5df180+0x1];BattleManager[_0x1579fd(0xc49)]=_0x4555da||null;if(_0x4555da)_0x4555da[_0x1579fd(0x4c0)]('inputting');_0x28eede[_0x1579fd(0x4c0)](_0x1579fd(0x914)),this[_0x1579fd(0x880)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x90c)]=function(){const _0x487d2d=_0x2dcaec;this[_0x487d2d(0xad9)]['setup'](),this['_actorCommandWindow'][_0x487d2d(0x4d1)]();if(!VisuMZ[_0x487d2d(0xae3)]['TpbActiveChangeEnabled'])return;if(Imported[_0x487d2d(0xb0e)]&&BattleManager[_0x487d2d(0x6ec)]())return;if(BattleManager['_currentActor']){BattleManager['_currentActor']['setActionState'](_0x487d2d(0x914));const _0x4bc6ba=BattleManager[_0x487d2d(0xc49)][_0x487d2d(0xbc2)]();if(_0x4bc6ba)_0x4bc6ba[_0x487d2d(0x844)]();}BattleManager[_0x487d2d(0xc49)]=null;},VisuMZ[_0x2dcaec(0xae3)]['Scene_Battle_createHelpWindow']=Scene_Battle['prototype'][_0x2dcaec(0x908)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x908)]=function(){const _0x1182b8=_0x2dcaec;VisuMZ[_0x1182b8(0xae3)][_0x1182b8(0xbec)]['call'](this),this[_0x1182b8(0x76f)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x76f)]=function(){const _0x4f1fff=_0x2dcaec;this[_0x4f1fff(0x4a8)]['setHelpWindow'](this['_helpWindow']),this[_0x4f1fff(0xad9)][_0x4f1fff(0x4bb)](this[_0x4f1fff(0x6ca)]);},Scene_Battle['prototype']['createEnemyNameContainer']=function(){const _0x43491c=_0x2dcaec;if(!VisuMZ[_0x43491c(0xae3)]['Settings']['Enemy'][_0x43491c(0x3d3)])return;this[_0x43491c(0x4e9)]=new Sprite(),this['_enemyNameContainer']['x']=this['_windowLayer']['x'],this[_0x43491c(0x4e9)]['y']=this[_0x43491c(0x3c9)]['y'];const _0x27e920=this[_0x43491c(0x18e)][_0x43491c(0x7bc)](this[_0x43491c(0x3c9)]);this['addChildAt'](this[_0x43491c(0x4e9)],_0x27e920);for(let _0x3ceae9=0x0;_0x3ceae9<0x8;_0x3ceae9++){const _0x235188=new Window_EnemyName(_0x3ceae9);this[_0x43491c(0x4e9)]['addChild'](_0x235188);}},VisuMZ['BattleCore']['Scene_Battle_createEnemyWindow']=Scene_Battle['prototype'][_0x2dcaec(0x452)],Scene_Battle[_0x2dcaec(0xaf6)]['createEnemyWindow']=function(){const _0x31f117=_0x2dcaec;VisuMZ[_0x31f117(0xae3)][_0x31f117(0x5ef)][_0x31f117(0x390)](this),this[_0x31f117(0x2d8)]();},Scene_Battle['prototype'][_0x2dcaec(0x2d8)]=function(){const _0x30e376=_0x2dcaec;this[_0x30e376(0x3f4)](!![]),this[_0x30e376(0x3f4)](![]);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x60c)]=function(_0x1b962c){const _0x2c0760=_0x2dcaec,_0x3fef6c=Window_BattleMultiTarget[_0x2c0760(0xbb9)],_0x5d92ff=this['calcWindowHeight'](0x1,!![]);let _0xd8b63b=_0x1b962c?Graphics[_0x2c0760(0x555)]-_0x3fef6c:0x0;_0xd8b63b+=_0x1b962c?Window_BattleMultiTarget[_0x2c0760(0x6c8)]:Window_BattleMultiTarget[_0x2c0760(0xb4f)];const _0x22115f=['frontview_ui'][_0x2c0760(0x7f2)](this[_0x2c0760(0x9c9)]())?0x0:this[_0x2c0760(0x300)][_0x2c0760(0x75c)];let _0x3c6c92=Graphics[_0x2c0760(0xab4)]-_0x22115f-_0x5d92ff;return _0x3c6c92+=_0x1b962c?Window_BattleMultiTarget[_0x2c0760(0x707)]:Window_BattleMultiTarget[_0x2c0760(0x8ac)],new Rectangle(_0xd8b63b,_0x3c6c92,_0x3fef6c,_0x5d92ff);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x3f4)]=function(_0x3be23e){const _0x104a00=_0x2dcaec,_0x2c5988=this[_0x104a00(0x60c)](_0x3be23e),_0x45b6dc=new Window_BattleMultiTarget(_0x2c5988,_0x3be23e);this['addWindow'](_0x45b6dc),_0x3be23e?this[_0x104a00(0xa86)]=_0x45b6dc:this['_enemyMultiTargetWindow']=_0x45b6dc;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x152)]=Scene_Battle['prototype'][_0x2dcaec(0xbe4)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xbe4)]=function(){const _0x450d7c=_0x2dcaec;if(this[_0x450d7c(0x22a)])return![];return VisuMZ['BattleCore'][_0x450d7c(0x152)][_0x450d7c(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0x73a)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa3b)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa3b)]=function(){const _0x310693=_0x2dcaec;if(this[_0x310693(0x6bf)]&&this[_0x310693(0x22a)]){this[_0x310693(0x6bf)][_0x310693(0xaba)]=!![];return;}VisuMZ['BattleCore'][_0x310693(0x73a)][_0x310693(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6f7)]=Scene_Battle['prototype']['isTimeActive'],Scene_Battle['prototype'][_0x2dcaec(0x915)]=function(){const _0x2cc80a=_0x2dcaec;if(this[_0x2cc80a(0x22a)])return![];return VisuMZ['BattleCore'][_0x2cc80a(0x6f7)]['call'](this);},VisuMZ[_0x2dcaec(0xae3)]['Scene_Battle_createAllWindowsIBS']=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb90)],Scene_Battle['prototype'][_0x2dcaec(0xb90)]=function(){const _0x4ee68b=_0x2dcaec;VisuMZ['BattleCore'][_0x4ee68b(0xad0)][_0x4ee68b(0x390)](this),this['createInBattleStatusWindow']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbd8)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x97e)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x97e)]=function(){const _0x640b8d=_0x2dcaec;VisuMZ['BattleCore']['Scene_Battle_createPartyCommandWindowIBS'][_0x640b8d(0x390)](this);const _0x4017de=this['_partyCommandWindow'];_0x4017de[_0x640b8d(0x494)](_0x640b8d(0x747),this['startInBattleStatus'][_0x640b8d(0x558)](this,_0x4017de));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x52d)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x316)],Scene_Battle[_0x2dcaec(0xaf6)]['createActorCommandWindow']=function(){const _0x546728=_0x2dcaec;VisuMZ[_0x546728(0xae3)][_0x546728(0x52d)][_0x546728(0x390)](this);const _0x1c9230=this[_0x546728(0x4a8)];_0x1c9230[_0x546728(0x494)]('status',this['startInBattleStatus'][_0x546728(0x558)](this,_0x1c9230));},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x3b1)]=function(){const _0x296e4d=_0x2dcaec,_0x46a63a=this[_0x296e4d(0x91b)](),_0x24afb1=new Window_InBattleStatus(_0x46a63a);this[_0x296e4d(0xaae)](_0x24afb1),_0x24afb1[_0x296e4d(0x4df)](),_0x24afb1[_0x296e4d(0x4d1)](),this[_0x296e4d(0x8be)]=_0x24afb1;},Scene_Battle['prototype'][_0x2dcaec(0x91b)]=function(){const _0x384d81=_0x2dcaec;if(VisuMZ[_0x384d81(0xae3)]['Settings'][_0x384d81(0x48b)][_0x384d81(0x940)])return VisuMZ[_0x384d81(0xae3)][_0x384d81(0xbeb)]['InBattleStatus'][_0x384d81(0x940)][_0x384d81(0x390)](this);const _0x1770bd=Graphics['boxWidth']>0x3e8?0x78:0x0,_0x39d53e=this['_helpWindow']['y']+this[_0x384d81(0x6ca)]['height'],_0x4ac9d6=Graphics['boxWidth']-_0x1770bd*0x2,_0x2b4385=Graphics[_0x384d81(0xab4)]-_0x39d53e-this[_0x384d81(0x1c9)]();return new Rectangle(_0x1770bd,_0x39d53e,_0x4ac9d6,_0x2b4385);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb28)]=function(_0x437a33){const _0x4fa62c=_0x2dcaec;this[_0x4fa62c(0xaae)](this[_0x4fa62c(0x8be)]),this['_inBattleStatusMode']=!![],this[_0x4fa62c(0x6ca)][_0x4fa62c(0xbc5)]();const _0x10d88d=['xp','portrait',_0x4fa62c(0x541),_0x4fa62c(0x226),_0x4fa62c(0x6af)];let _0x8917cd=_0x10d88d[_0x4fa62c(0x7f2)](this['battleLayoutStyle']());_0x8917cd&&(_0x437a33[_0x4fa62c(0x4df)](),_0x437a33[_0x4fa62c(0x4d1)]()),this[_0x4fa62c(0x8be)][_0x4fa62c(0x9a3)](BattleManager[_0x4fa62c(0x3fc)]()||$gameParty[_0x4fa62c(0x429)]()[0x0]),this[_0x4fa62c(0x8be)][_0x4fa62c(0xae2)](_0x437a33),this['_inBattleStatusWindow'][_0x4fa62c(0xbc5)](),this['_inBattleStatusWindow'][_0x4fa62c(0x8d4)]();},Scene_Battle['prototype'][_0x2dcaec(0xb54)]=function(){const _0x2c41db=_0x2dcaec;this[_0x2c41db(0x22a)]=![],this['_helpWindow'][_0x2c41db(0x4df)]();const _0x50d348=this['_inBattleStatusWindow'][_0x2c41db(0x2c4)]();_0x50d348[_0x2c41db(0xbc5)](),_0x50d348[_0x2c41db(0x8d4)](),_0x50d348[_0x2c41db(0x1f3)](),this['_inBattleStatusWindow'][_0x2c41db(0x4df)](),this[_0x2c41db(0x8be)][_0x2c41db(0x4d1)]();},Scene_Battle[_0x2dcaec(0xaf6)]['battleLayoutStyle']=function(){const _0x37dde3=_0x2dcaec;if($gameTemp[_0x37dde3(0x85d)]!==undefined)return $gameTemp['_forcedBattleLayout'];if(this[_0x37dde3(0xb73)])return this[_0x37dde3(0xb73)];return this[_0x37dde3(0xb73)]=VisuMZ[_0x37dde3(0xae3)]['Settings'][_0x37dde3(0x247)][_0x37dde3(0x939)][_0x37dde3(0x918)]()['trim'](),this[_0x37dde3(0xb73)]==='sideview_ui'&&!Imported[_0x37dde3(0x78f)]&&(this[_0x37dde3(0xb73)]=_0x37dde3(0x30e)),this['_battleLayoutStyle']===_0x37dde3(0x6af)&&!Imported[_0x37dde3(0x4d6)]&&(this['_battleLayoutStyle']=_0x37dde3(0x30e)),this[_0x37dde3(0xb73)];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbda)]=Scene_Battle['prototype'][_0x2dcaec(0x1c9)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x1c9)]=function(){const _0x2d14ac=_0x2dcaec,_0xb48c53=this[_0x2d14ac(0x9c9)]();switch(_0xb48c53){case _0x2d14ac(0x97c):return this['calcWindowHeight'](Math[_0x2d14ac(0x959)](0x1,$gameParty['maxBattleMembers']()),!![]);break;case'border':return this[_0x2d14ac(0x14b)](0x4,!![]);break;default:return VisuMZ[_0x2d14ac(0xae3)][_0x2d14ac(0xbda)]['call'](this);break;}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x836)]=Scene_Battle['prototype'][_0x2dcaec(0x657)],Scene_Battle[_0x2dcaec(0xaf6)]['helpWindowRect']=function(){const _0x5338dd=_0x2dcaec,_0x4a0bae=this['battleLayoutStyle']();switch(_0x4a0bae){case _0x5338dd(0x541):return this[_0x5338dd(0x2e6)]();break;case _0x5338dd(0x30e):case _0x5338dd(0x97c):case'xp':case _0x5338dd(0x3ec):default:return VisuMZ[_0x5338dd(0xae3)][_0x5338dd(0x836)][_0x5338dd(0x390)](this);break;}},Scene_Battle['prototype'][_0x2dcaec(0x910)]=function(){const _0x361d02=_0x2dcaec,_0x47c300=this[_0x361d02(0x9c9)]();switch(_0x47c300){case'xp':case _0x361d02(0x3ec):return this[_0x361d02(0x3dd)]();break;case _0x361d02(0x541):return this[_0x361d02(0x419)]();break;case _0x361d02(0x30e):case _0x361d02(0x97c):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5c4)]=Scene_Battle[_0x2dcaec(0xaf6)]['partyCommandWindowRect'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xc6b)]=function(){const _0x4086bb=_0x2dcaec,_0x452536=this['battleLayoutStyle']();switch(_0x452536){case'xp':case _0x4086bb(0x3ec):return this[_0x4086bb(0xa21)]();break;case'border':return this[_0x4086bb(0x340)]();case _0x4086bb(0x30e):case _0x4086bb(0x97c):default:return this[_0x4086bb(0x7c0)]();break;}},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x7c0)]=function(){const _0x33fefb=_0x2dcaec,_0x314c02=VisuMZ['BattleCore'][_0x33fefb(0xbeb)][_0x33fefb(0x247)],_0xcb49b4=_0x314c02[_0x33fefb(0x807)]||0xc0,_0x43519f=this[_0x33fefb(0x1c9)](),_0x4e6f4a=this['isRightInputMode']()?Graphics[_0x33fefb(0x555)]-_0xcb49b4:0x0,_0x53e7ea=Graphics['boxHeight']-_0x43519f;return new Rectangle(_0x4e6f4a,_0x53e7ea,_0xcb49b4,_0x43519f);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xc7a)]=function(){const _0x47827f=_0x2dcaec;return this[_0x47827f(0xc6b)]();},VisuMZ[_0x2dcaec(0xae3)]['Scene_Battle_updateStatusWindowPosition']=Scene_Battle[_0x2dcaec(0xaf6)]['updateStatusWindowPosition'],Scene_Battle['prototype'][_0x2dcaec(0x58d)]=function(){const _0x5f44e9=_0x2dcaec;if(this[_0x5f44e9(0x22a)])return;const _0x5cb10a=this[_0x5f44e9(0x9c9)]();switch(_0x5cb10a){case'xp':case _0x5f44e9(0x3ec):case'border':break;case _0x5f44e9(0x30e):case _0x5f44e9(0x97c):default:VisuMZ[_0x5f44e9(0xae3)][_0x5f44e9(0x7da)][_0x5f44e9(0x390)](this);break;}},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x36c)]=function(){const _0x4bbac8=_0x2dcaec,_0x32adc8=VisuMZ[_0x4bbac8(0xae3)][_0x4bbac8(0xbeb)][_0x4bbac8(0x247)],_0x2234d2=Window_BattleStatus[_0x4bbac8(0xaf6)][_0x4bbac8(0x92f)](),_0x573a68=Graphics[_0x4bbac8(0x555)]-(_0x32adc8[_0x4bbac8(0x807)]||0xc0),_0x479f95=this['windowAreaHeight']()+_0x2234d2,_0x281ff8=this[_0x4bbac8(0x3e3)]()?0x0:Graphics['boxWidth']-_0x573a68,_0x444317=Graphics[_0x4bbac8(0xab4)]-_0x479f95+_0x2234d2;return new Rectangle(_0x281ff8,_0x444317,_0x573a68,_0x479f95);},Scene_Battle['prototype'][_0x2dcaec(0x3dd)]=function(){const _0x324669=_0x2dcaec,_0x18f7c8=Window_BattleStatus[_0x324669(0xaf6)][_0x324669(0x92f)](),_0x5c148b=Graphics[_0x324669(0x555)],_0x58e895=this[_0x324669(0x1c9)]()+_0x18f7c8,_0x502bb7=0x0,_0x132137=Graphics[_0x324669(0xab4)]-_0x58e895+_0x18f7c8;return new Rectangle(_0x502bb7,_0x132137,_0x5c148b,_0x58e895);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa21)]=function(){const _0x1eb27c=_0x2dcaec,_0x514936=Graphics[_0x1eb27c(0x555)]/0x2,_0x313e12=this[_0x1eb27c(0x14b)](VisuMZ['BattleCore'][_0x1eb27c(0xbeb)][_0x1eb27c(0x247)]['XPActorCommandLines'],!![]),_0x357a64=Math[_0x1eb27c(0x976)]((Graphics[_0x1eb27c(0x555)]-_0x514936)/0x2),_0x59a051=Graphics['boxHeight']-_0x313e12-this[_0x1eb27c(0x3dd)]()[_0x1eb27c(0x75c)];return new Rectangle(_0x357a64,_0x59a051,_0x514936,_0x313e12);},Scene_Battle['prototype'][_0x2dcaec(0x2e6)]=function(){const _0x1188d3=_0x2dcaec,_0x4f1b11=Graphics[_0x1188d3(0x64b)],_0x22fadd=Math['round']((Graphics[_0x1188d3(0x555)]-_0x4f1b11)/0x2),_0x38c804=this[_0x1188d3(0x149)](),_0x1feb23=(Graphics['height']-Graphics['boxHeight'])/-0x2;return new Rectangle(_0x22fadd,_0x1feb23,_0x4f1b11,_0x38c804);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x419)]=function(){const _0x2e0e95=_0x2dcaec,_0x575048=Graphics['width'],_0x47fbc0=Math[_0x2e0e95(0x976)]((Graphics[_0x2e0e95(0x555)]-_0x575048)/0x2),_0x3c96c6=this['calcWindowHeight'](0x4,!![]),_0x157067=Graphics[_0x2e0e95(0xab4)]-_0x3c96c6+(Graphics[_0x2e0e95(0x75c)]-Graphics[_0x2e0e95(0xab4)])/0x2;return new Rectangle(_0x47fbc0,_0x157067,_0x575048,_0x3c96c6);},Scene_Battle[_0x2dcaec(0xaf6)]['partyCommandWindowRectBorderStyle']=function(){const _0x718644=_0x2dcaec,_0x253c4c=Math[_0x718644(0x6eb)](Graphics[_0x718644(0x64b)]/0x3),_0x3c9cf7=this['isRightInputMode']()?(Graphics['width']+Graphics['boxWidth'])/0x2-_0x253c4c:(Graphics[_0x718644(0x64b)]-Graphics[_0x718644(0x555)])/-0x2,_0x1ea53a=this[_0x718644(0x2e6)](),_0x39a37f=_0x1ea53a['y']+_0x1ea53a[_0x718644(0x75c)],_0x21f053=this[_0x718644(0x419)](),_0x1b0448=_0x21f053['y']-_0x39a37f;return new Rectangle(_0x3c9cf7,_0x39a37f,_0x253c4c,_0x1b0448);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x966)]=function(){const _0x5f4347=_0x2dcaec,_0x14e881=Math['ceil'](Graphics[_0x5f4347(0x64b)]/0x3),_0x45a179=Math['round']((Graphics[_0x5f4347(0x555)]-_0x14e881)/0x2),_0x41324b=this[_0x5f4347(0x340)](),_0x2ac0a1=_0x41324b['y'],_0x30e96d=_0x41324b[_0x5f4347(0x75c)];return new Rectangle(_0x45a179,_0x2ac0a1,_0x14e881,_0x30e96d);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x23b)]=function(){const _0x18dc7d=_0x2dcaec;this['_cancelButton']['y']=this[_0x18dc7d(0x6ca)]['y']+this[_0x18dc7d(0x6ca)][_0x18dc7d(0x75c)],this['isRightInputMode']()?this['battleLayoutStyle']()===_0x18dc7d(0x541)?this[_0x18dc7d(0x6bf)]['x']=0x8:this[_0x18dc7d(0x6bf)]['x']=-this[_0x18dc7d(0x6bf)][_0x18dc7d(0x64b)]-0x4:this[_0x18dc7d(0x6bf)]['x']=Graphics['width']-(Graphics[_0x18dc7d(0x64b)]-Graphics[_0x18dc7d(0x555)])/0x2-this[_0x18dc7d(0x6bf)][_0x18dc7d(0x64b)]-0x4;},VisuMZ['BattleCore']['Scene_Battle_skillWindowRect']=Scene_Battle['prototype'][_0x2dcaec(0x1b1)],Scene_Battle[_0x2dcaec(0xaf6)]['skillWindowRect']=function(){const _0x1b1e7a=_0x2dcaec;if(this[_0x1b1e7a(0x9c9)]()===_0x1b1e7a(0x541))return this[_0x1b1e7a(0x966)]();else return this[_0x1b1e7a(0x4d2)]()?this[_0x1b1e7a(0x635)]():VisuMZ[_0x1b1e7a(0xae3)][_0x1b1e7a(0x577)][_0x1b1e7a(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x18a)]=Scene_Battle[_0x2dcaec(0xaf6)]['itemWindowRect'],Scene_Battle['prototype']['itemWindowRect']=function(){const _0x1487ef=_0x2dcaec;if(this['battleLayoutStyle']()===_0x1487ef(0x541))return this[_0x1487ef(0x966)]();else return this[_0x1487ef(0x4d2)]()?this[_0x1487ef(0x635)]():VisuMZ[_0x1487ef(0xae3)][_0x1487ef(0x18a)][_0x1487ef(0x390)](this);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x4d2)]=function(){const _0x487686=_0x2dcaec;return VisuMZ[_0x487686(0xae3)][_0x487686(0xbeb)][_0x487686(0x247)][_0x487686(0x72e)];},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x635)]=function(){const _0x2e31d0=_0x2dcaec,_0x4be2e4=Sprite_Button[_0x2e31d0(0xaf6)][_0x2e31d0(0x16b)]()*0x2+0x4;let _0x12a9fc=Graphics[_0x2e31d0(0x555)]-_0x4be2e4;Imported[_0x2e31d0(0x6d3)]&&SceneManager[_0x2e31d0(0x6ee)]()&&(_0x12a9fc+=_0x4be2e4);const _0x187d08=this[_0x2e31d0(0x145)](),_0x1db6dc=Graphics[_0x2e31d0(0xab4)]-_0x187d08-this[_0x2e31d0(0x910)]()[_0x2e31d0(0x75c)]+Window_BattleStatus[_0x2e31d0(0xaf6)]['extraHeight'](),_0x2b9ef6=0x0;return new Rectangle(_0x2b9ef6,_0x187d08,_0x12a9fc,_0x1db6dc);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4f0)]=Scene_Battle['prototype'][_0x2dcaec(0x7b3)],Scene_Battle['prototype']['startActorSelection']=function(){const _0x2a3118=_0x2dcaec;VisuMZ[_0x2a3118(0xae3)][_0x2a3118(0x4f0)][_0x2a3118(0x390)](this),this['makeTargetSelectionMoreVisible']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x1e7)]=Scene_Battle[_0x2dcaec(0xaf6)]['startEnemySelection'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x1f4)]=function(){const _0x5332b9=_0x2dcaec;VisuMZ[_0x5332b9(0xae3)][_0x5332b9(0x1e7)][_0x5332b9(0x390)](this),this[_0x5332b9(0x6a2)][_0x5332b9(0xa94)](),this[_0x5332b9(0xadb)]();},Scene_Battle['prototype'][_0x2dcaec(0xadb)]=function(){const _0x473462=_0x2dcaec,_0x267b78=this[_0x473462(0x9c9)]();['xp',_0x473462(0x3ec),_0x473462(0x541)][_0x473462(0x7f2)](_0x267b78)&&this['_actorCommandWindow']['close'](),(_0x267b78===_0x473462(0x541)||this[_0x473462(0x4d2)]())&&(this[_0x473462(0x56e)][_0x473462(0x4d1)](),this['_itemWindow'][_0x473462(0x4d1)]());},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x37b)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xaa4)],Scene_Battle[_0x2dcaec(0xaf6)]['onActorOk']=function(){const _0x4ab53a=_0x2dcaec;VisuMZ['BattleCore'][_0x4ab53a(0x37b)]['call'](this),this[_0x4ab53a(0x716)]();},Scene_Battle[_0x2dcaec(0xaf6)]['isNonSubmenuCancel']=function(){const _0xaff9db=_0x2dcaec;return[_0xaff9db(0x75a),_0xaff9db(0x64c),_0xaff9db(0xa02)][_0xaff9db(0x7f2)](this[_0xaff9db(0x4a8)][_0xaff9db(0x3a9)]());},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7d2)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x81c)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x81c)]=function(){const _0x56f235=_0x2dcaec;this['isNonSubmenuCancel']()?(this[_0x56f235(0x300)][_0x56f235(0xbc5)](),this[_0x56f235(0x14a)][_0x56f235(0x4df)](),this[_0x56f235(0x4a8)]['activate']()):VisuMZ[_0x56f235(0xae3)][_0x56f235(0x7d2)][_0x56f235(0x390)](this),this[_0x56f235(0x31e)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x743)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2c0)],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2c0)]=function(){const _0x422d97=_0x2dcaec;if(!this[_0x422d97(0x6a2)]['enemy']()){this[_0x422d97(0x6a2)][_0x422d97(0x1f3)]();return;}const _0x4897cf=BattleManager[_0x422d97(0x524)]();_0x4897cf[_0x422d97(0x200)](this['_enemyWindow'][_0x422d97(0x2cf)]()),this[_0x422d97(0x6a2)][_0x422d97(0x28b)](),VisuMZ[_0x422d97(0xae3)]['Scene_Battle_onEnemyOk'][_0x422d97(0x390)](this),this[_0x422d97(0x716)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2a0)]=Scene_Battle[_0x2dcaec(0xaf6)]['onEnemyCancel'],Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x550)]=function(){const _0x474a95=_0x2dcaec;this[_0x474a95(0xa0c)]()?(this['_statusWindow']['show'](),this[_0x474a95(0x6a2)]['hide'](),this[_0x474a95(0x4a8)][_0x474a95(0x1f3)]()):VisuMZ[_0x474a95(0xae3)][_0x474a95(0x2a0)][_0x474a95(0x390)](this),this[_0x474a95(0x31e)](),this[_0x474a95(0x6a2)][_0x474a95(0x28b)]();},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x716)]=function(){const _0x21ec1d=_0x2dcaec,_0x2b7d23=this[_0x21ec1d(0x9c9)]();(_0x2b7d23===_0x21ec1d(0x541)||this[_0x21ec1d(0x4d2)]())&&(this['_skillWindow'][_0x21ec1d(0x8d4)](),this[_0x21ec1d(0x56e)][_0x21ec1d(0x1d7)]&&this[_0x21ec1d(0x56e)][_0x21ec1d(0xbc5)](),this[_0x21ec1d(0x7c4)][_0x21ec1d(0x8d4)](),this['_itemWindow'][_0x21ec1d(0x1d7)]&&this[_0x21ec1d(0x7c4)]['show']());},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x31e)]=function(){const _0x59e4e9=_0x2dcaec,_0x360cab=this['battleLayoutStyle']();['xp',_0x59e4e9(0x3ec),_0x59e4e9(0x541)][_0x59e4e9(0x7f2)](_0x360cab)&&this['_actorCommandWindow'][_0x59e4e9(0x8d4)](),this[_0x59e4e9(0x716)]();},Sprite_Battler['_motionSpeed']=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x46b)][_0x2dcaec(0x59b)],VisuMZ[_0x2dcaec(0xae3)]['Sprite_Battler_initMembers']=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xaab)],Sprite_Battler['prototype'][_0x2dcaec(0xaab)]=function(){const _0xdc2412=_0x2dcaec;VisuMZ['BattleCore'][_0xdc2412(0x800)]['call'](this),this[_0xdc2412(0x5a8)]();if(this['constructor']===Sprite_Enemy)this['createShadowSprite']();this[_0xdc2412(0xc23)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5a8)]=function(){const _0x425038=_0x2dcaec;this[_0x425038(0xae9)]=0x0,this[_0x425038(0xa19)]=0x0,this['_floatHeight']=0x0,this[_0x425038(0x3bc)]=0x0,this[_0x425038(0xbf2)]=0x0,this[_0x425038(0x4a1)]=0x0,this[_0x425038(0xac4)]=_0x425038(0x41d),this[_0x425038(0x9d0)]=0x0,this['_jumpMaxHeight']=0x0,this[_0x425038(0x187)]=0x0,this[_0x425038(0x444)]=0x0,this[_0x425038(0x1fb)]=0xff,this['_opacityDuration']=0x0,this['_opacityWholeDuration']=0x0,this[_0x425038(0xabc)]='Linear',this[_0x425038(0x153)]=0x0,this[_0x425038(0xba7)]=0x0,this['_angleDuration']=0x0,this['_angleWholeDuration']=0x0,this[_0x425038(0x591)]=_0x425038(0x41d),this[_0x425038(0xb35)]=!![],this[_0x425038(0x945)]=0x0,this['_skewY']=0x0,this[_0x425038(0x249)]=0x0,this[_0x425038(0x951)]=0x0,this[_0x425038(0x599)]=0x0,this['_skewWholeDuration']=0x0,this[_0x425038(0x176)]='Linear',this['_growX']=0x1,this[_0x425038(0xb0d)]=0x1,this[_0x425038(0x563)]=0x1,this[_0x425038(0x486)]=0x1,this['_growDuration']=0x0,this[_0x425038(0x9da)]=0x0,this['_growEasing']=_0x425038(0x41d),this['_flipScaleX']=0x1,this['_targetHomeX']=0x0,this[_0x425038(0x881)]=0x0,this[_0x425038(0x32c)]=0x0,this[_0x425038(0xa00)]=0x0,this[_0x425038(0x823)]=_0x425038(0x41d),this[_0x425038(0x62c)]=0x0,this[_0x425038(0xb1a)]=0x0;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x69c)]=function(){const _0x303c91=_0x2dcaec;this[_0x303c91(0x399)]=new Sprite(),this['_shadowSprite'][_0x303c91(0x4ca)]=ImageManager[_0x303c91(0xa82)](_0x303c91(0x702)),this[_0x303c91(0x399)][_0x303c91(0x4ca)][_0x303c91(0xb61)]=VisuMZ[_0x303c91(0xae3)][_0x303c91(0xbeb)][_0x303c91(0x46b)][_0x303c91(0xacf)],this[_0x303c91(0x399)][_0x303c91(0x156)]['x']=0.5,this[_0x303c91(0x399)][_0x303c91(0x156)]['y']=0.5,this[_0x303c91(0x399)]['y']=-0x2,this[_0x303c91(0x399)][_0x303c91(0xaba)]=![],this['addChild'](this[_0x303c91(0x399)]);},Sprite_Battler[_0x2dcaec(0xaf6)]['createDistortionSprite']=function(){const _0x549fae=_0x2dcaec;this[_0x549fae(0xa87)]=new Sprite(),this['_distortionSprite'][_0x549fae(0x156)]['x']=0.5,this['_distortionSprite'][_0x549fae(0x156)]['y']=0.5,this[_0x549fae(0x83f)](this[_0x549fae(0xa87)]);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x6b3)]=function(){const _0x163b73=_0x2dcaec;if(this[_0x163b73(0xbab)]&&this[_0x163b73(0xbab)]()){Sprite[_0x163b73(0xaf6)][_0x163b73(0x6b3)][_0x163b73(0x390)](this);return;}const _0xb10ed4=this[_0x163b73(0xa87)];if(!_0xb10ed4)return;!_0xb10ed4[_0x163b73(0x28d)]&&_0xb10ed4[_0x163b73(0xa99)](),_0xb10ed4[_0x163b73(0x28d)]['setHue'](this['_hue']),_0xb10ed4[_0x163b73(0x28d)]['setBlendColor'](this[_0x163b73(0x996)]),_0xb10ed4['_colorFilter'][_0x163b73(0x712)](this[_0x163b73(0x507)]);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xc0d)]=function(){const _0x3a5cdd=_0x2dcaec;if(!this[_0x3a5cdd(0xa87)])return;if(this['_shadowSprite']){const _0x160df0=this[_0x3a5cdd(0x67d)](this[_0x3a5cdd(0xa87)]);this[_0x3a5cdd(0x994)](this[_0x3a5cdd(0x399)],_0x160df0),this[_0x3a5cdd(0x6bd)]();}this[_0x3a5cdd(0x8b3)]&&this[_0x3a5cdd(0xa87)][_0x3a5cdd(0x83f)](this[_0x3a5cdd(0x8b3)]),this[_0x3a5cdd(0x23f)]&&this['_distortionSprite'][_0x3a5cdd(0x83f)](this[_0x3a5cdd(0x23f)]),this[_0x3a5cdd(0x4c4)]&&this[_0x3a5cdd(0xa87)][_0x3a5cdd(0x83f)](this[_0x3a5cdd(0x4c4)]),this['_injectAnimationSprite']&&this['_distortionSprite']['addChild'](this[_0x3a5cdd(0xc31)]),this[_0x3a5cdd(0x244)]&&this[_0x3a5cdd(0xa87)]['addChild'](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x6bd)]=function(){const _0x3bf0d7=_0x2dcaec;if(!this[_0x3bf0d7(0x399)])return;if(this[_0x3bf0d7(0x386)]&&this[_0x3bf0d7(0x386)]['svBattlerShadowVisible']()){const _0x240378=this[_0x3bf0d7(0x399)][_0x3bf0d7(0x4ca)];this[_0x3bf0d7(0x399)][_0x3bf0d7(0x474)](0x0,0x0,_0x240378['width'],_0x240378[_0x3bf0d7(0x75c)]);}else this['_shadowSprite'][_0x3bf0d7(0x474)](0x0,0x0,0x0,0x0);},Sprite_Battler['prototype'][_0x2dcaec(0xa13)]=function(){const _0x12beb1=_0x2dcaec;return SceneManager[_0x12beb1(0xa2b)]()?SceneManager[_0x12beb1(0x496)][_0x12beb1(0x2a3)]['_damageContainer']:this['parent'];},Sprite_Battler[_0x2dcaec(0xaf6)]['setupTextPopup']=function(_0x356832,_0x39855c){const _0x49ea7a=_0x2dcaec;if(!this[_0x49ea7a(0x386)]['isSpriteVisible']())return;if(BattleManager[_0x49ea7a(0x3d0)]())return;const _0x392e0a=VisuMZ[_0x49ea7a(0xae3)][_0x49ea7a(0xbeb)][_0x49ea7a(0x53c)],_0x1a52ab=new Sprite_Damage();_0x1a52ab[_0x49ea7a(0x7b7)]=_0x392e0a[_0x49ea7a(0xa37)],this[_0x49ea7a(0x1db)](_0x1a52ab),_0x1a52ab['setupTextPopup'](_0x356832,_0x39855c),this[_0x49ea7a(0x943)](_0x1a52ab);},Sprite_Battler['prototype']['setupIconTextPopup']=function(_0x443196,_0x2ae932,_0xdbf9c1){const _0x1cdb91=_0x2dcaec;if(!this[_0x1cdb91(0x386)][_0x1cdb91(0xbfb)]())return;if(BattleManager[_0x1cdb91(0x3d0)]())return;const _0x12b368=VisuMZ[_0x1cdb91(0xae3)][_0x1cdb91(0xbeb)][_0x1cdb91(0x53c)],_0x1308ca=new Sprite_Damage();_0x1308ca[_0x1cdb91(0x7b7)]=_0x12b368[_0x1cdb91(0xa37)],this[_0x1cdb91(0x1db)](_0x1308ca),_0x1308ca['setupIconTextPopup'](_0x443196,_0x2ae932,_0xdbf9c1),this[_0x1cdb91(0x943)](_0x1308ca);},Sprite_Battler[_0x2dcaec(0xaf6)]['setupDamagePopup']=function(){const _0x2f6f81=_0x2dcaec;if(!this['_battler']['isDamagePopupRequested']())return;while(this[_0x2f6f81(0x386)]['isDamagePopupRequested']()){this[_0x2f6f81(0x386)]['isSpriteVisible']()&&this[_0x2f6f81(0x94b)]();}this[_0x2f6f81(0x386)][_0x2f6f81(0x5d8)](),this[_0x2f6f81(0x386)][_0x2f6f81(0x85f)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['createDamageSprite']=function(){const _0x41f59e=_0x2dcaec;if(BattleManager[_0x41f59e(0x3d0)]())return;const _0x32af58=VisuMZ[_0x41f59e(0xae3)]['Settings'][_0x41f59e(0x53c)],_0x3cabba=new Sprite_Damage();_0x3cabba[_0x41f59e(0x7b7)]=_0x32af58[_0x41f59e(0xa37)],this[_0x41f59e(0x1db)](_0x3cabba),_0x3cabba[_0x41f59e(0xb15)](this[_0x41f59e(0x386)]),_0x3cabba[_0x41f59e(0xb05)](this[_0x41f59e(0x386)]),this[_0x41f59e(0x943)](_0x3cabba);},Sprite_Battler[_0x2dcaec(0xaf6)]['addDamageSprite']=function(_0x578024){const _0x4c5084=_0x2dcaec;this[_0x4c5084(0x430)][_0x4c5084(0x190)](_0x578024);if(this[_0x4c5084(0x5b2)]()){const _0x40967f=SceneManager[_0x4c5084(0x496)]['_statusWindow'];if(_0x40967f)_0x40967f[_0x4c5084(0x943)](_0x578024,this[_0x4c5084(0x386)]);}else{this[_0x4c5084(0xa13)]()[_0x4c5084(0x83f)](_0x578024);if(SceneManager[_0x4c5084(0x78b)]())_0x578024['scale']['x']=-0x1;}},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5b2)]=function(){const _0xced76f=_0x2dcaec;return!$gameSystem[_0xced76f(0x334)]()&&this[_0xced76f(0x386)]&&this[_0xced76f(0x386)][_0xced76f(0x8d6)]();return!$gameSystem['isSideView']()&&this[_0xced76f(0x386)]&&this[_0xced76f(0x386)]['isActor']()&&Window_BattleStatus[_0xced76f(0xaf6)]['battleLayoutStyle']()===_0xced76f(0x3ec);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x1db)]=function(_0xce396b){const _0x4667db=_0x2dcaec;this[_0x4667db(0x886)](_0xce396b,!![]);const _0x1f2099=VisuMZ['BattleCore']['Settings'][_0x4667db(0x53c)],_0x3a04c2=SceneManager[_0x4667db(0x78b)]()?-0x1:0x1;if(_0x1f2099[_0x4667db(0x16f)])for(const _0x70c634 of this['_damages']){_0x70c634['x']+=_0x1f2099[_0x4667db(0x71a)]*_0x3a04c2,_0x70c634['y']+=_0x1f2099['PopupShiftY'];}else{const _0x3652f5=this[_0x4667db(0x430)][this[_0x4667db(0x430)]['length']-0x1];_0x3652f5&&(_0xce396b['x']=_0x3652f5['x']+_0x1f2099[_0x4667db(0x71a)]*_0x3a04c2,_0xce396b['y']=_0x3652f5['y']+_0x1f2099[_0x4667db(0x314)]);}},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x886)]=function(_0x16606f,_0x84d29d){const _0x45ebfe=_0x2dcaec,_0x44579b=SceneManager[_0x45ebfe(0x78b)]()?-0x1:0x1;let _0x5a3506=this['_baseX'];_0x5a3506+=this[_0x45ebfe(0x8fd)]();let _0x3cc70c=this[_0x45ebfe(0xa19)];const _0x3a3e14=this[_0x45ebfe(0xa87)][_0x45ebfe(0x8a3)]['y'];_0x3cc70c+=this[_0x45ebfe(0x88c)]();const _0x5e61fb=SceneManager[_0x45ebfe(0x496)][_0x45ebfe(0x300)];if(_0x5e61fb&&this['parent']===_0x5e61fb){_0x5a3506+=_0x5e61fb['x']-this[_0x45ebfe(0x18c)]();const _0x2525a8=_0x5e61fb[_0x45ebfe(0x90d)]()*0x3/0x4;_0x3cc70c=_0x5e61fb['y']+_0x2525a8,_0x3cc70c=Math['min'](_0x3cc70c,_0x5e61fb['y']+this['y']-this['height']+_0x2525a8);}_0x16606f['x']=Math['round'](_0x5a3506+this[_0x45ebfe(0x18c)]()*_0x44579b),_0x16606f['y']=Math[_0x45ebfe(0x976)](_0x3cc70c+this[_0x45ebfe(0x877)]());},VisuMZ['BattleCore'][_0x2dcaec(0x8b9)]=Sprite_Battler['prototype']['damageOffsetX'],Sprite_Battler['prototype'][_0x2dcaec(0x18c)]=function(){const _0x1c6c98=_0x2dcaec;let _0x2bba9f=VisuMZ[_0x1c6c98(0xae3)][_0x1c6c98(0x8b9)][_0x1c6c98(0x390)](this),_0xdd9498=VisuMZ[_0x1c6c98(0xae3)][_0x1c6c98(0xbeb)][_0x1c6c98(0x53c)][_0x1c6c98(0x789)]||0x0;return _0xdd9498+=this['_battler'][_0x1c6c98(0x83e)](),Math['round'](_0x2bba9f+_0xdd9498);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xba6)]=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x877)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x877)]=function(){const _0x2ca223=_0x2dcaec;let _0x15ad00=VisuMZ[_0x2ca223(0xae3)][_0x2ca223(0xba6)][_0x2ca223(0x390)](this);switch(this[_0x2ca223(0x386)][_0x2ca223(0xbca)]()){case _0x2ca223(0x186):_0x15ad00-=this[_0x2ca223(0x75c)]*this[_0x2ca223(0x8a3)]['y'];break;case'center':_0x15ad00-=this['height']*this[_0x2ca223(0x8a3)]['y']*0.5;break;}let _0x565138=VisuMZ[_0x2ca223(0xae3)][_0x2ca223(0xbeb)][_0x2ca223(0x53c)][_0x2ca223(0x4e0)]||0x0;return _0x565138+=this['_battler'][_0x2ca223(0x4c3)](),Math[_0x2ca223(0x976)](_0x15ad00+_0x565138);},Sprite_Actor[_0x2dcaec(0xaf6)]['damageOffsetX']=function(){const _0x57340a=_0x2dcaec;return Sprite_Battler[_0x57340a(0xaf6)]['damageOffsetX']['call'](this);},Sprite_Actor['prototype'][_0x2dcaec(0x877)]=function(){const _0x373ee1=_0x2dcaec;return Sprite_Battler[_0x373ee1(0xaf6)][_0x373ee1(0x877)][_0x373ee1(0x390)](this);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xabe)]=function(_0x4ea04e){const _0xbe21b9=_0x2dcaec;this[_0xbe21b9(0x5b2)]()?SceneManager['_scene'][_0xbe21b9(0x300)][_0xbe21b9(0x8ee)](_0x4ea04e):(this[_0xbe21b9(0xa13)]()['removeChild'](_0x4ea04e),this[_0xbe21b9(0x430)]['remove'](_0x4ea04e),_0x4ea04e[_0xbe21b9(0x221)]());},VisuMZ['BattleCore'][_0x2dcaec(0x953)]=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x851)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x851)]=function(_0x16ef19,_0x5f5c61){const _0x455c52=_0x2dcaec,_0x2ba4ae=VisuMZ[_0x455c52(0xae3)]['Settings'];if(this[_0x455c52(0x61d)]===Sprite_Actor)_0x16ef19+=_0x2ba4ae[_0x455c52(0x46b)]['OffsetX']||0x0,_0x5f5c61+=_0x2ba4ae['Actor'][_0x455c52(0x53d)]||0x0;else this[_0x455c52(0x61d)]===Sprite_Enemy&&(_0x16ef19+=_0x2ba4ae[_0x455c52(0xc36)][_0x455c52(0x842)]||0x0,_0x5f5c61+=_0x2ba4ae['Enemy'][_0x455c52(0x53d)]||0x0);this[_0x455c52(0x386)]&&(_0x16ef19=this[_0x455c52(0x386)][_0x455c52(0xb1c)]??_0x16ef19,_0x5f5c61=this['_battler'][_0x455c52(0xb47)]??_0x5f5c61),VisuMZ[_0x455c52(0xae3)][_0x455c52(0x953)][_0x455c52(0x390)](this,_0x16ef19,_0x5f5c61),this[_0x455c52(0x7a7)]=this['_homeX'],this['_targetHomeY']=this[_0x455c52(0x94d)],this[_0x455c52(0x32c)]=0x0,this[_0x455c52(0xa00)]=0x0,this[_0x455c52(0x823)]=_0x455c52(0x41d);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x6b1)]=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x5937c0=_0x2dcaec;VisuMZ[_0x5937c0(0xae3)][_0x5937c0(0x6b1)][_0x5937c0(0x390)](this),!this['_battler']&&this[_0x5937c0(0x5fa)]&&(this['_hpGaugeSprite'][_0x5937c0(0xaba)]=![]);},VisuMZ[_0x2dcaec(0xae3)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x2dcaec(0xaf6)]['updateMain'],Sprite_Battler[_0x2dcaec(0xaf6)]['updateMain']=function(){const _0x541065=_0x2dcaec;this[_0x541065(0x5d5)](),this['updateSkew'](),this['updateSpin'](),this[_0x541065(0x9f3)](),VisuMZ[_0x541065(0xae3)]['Sprite_Battler_updateMain']['call'](this),this[_0x541065(0x733)](),this['updateShakeFlinch']();if(this[_0x541065(0x61d)]===Sprite_Enemy)this['updateShadow']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x188)]=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x906)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x906)]=function(){const _0x860bc4=_0x2dcaec;this[_0x860bc4(0x7c6)](),VisuMZ[_0x860bc4(0xae3)][_0x860bc4(0x188)][_0x860bc4(0x390)](this),this[_0x860bc4(0x4e2)](),this[_0x860bc4(0x5af)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['updateSelectionEffect']=function(){const _0x1eb8d0=_0x2dcaec,_0x2e339c=this[_0x1eb8d0(0x18b)]();if(this[_0x1eb8d0(0x386)][_0x1eb8d0(0x72c)]())this[_0x1eb8d0(0x60d)]++,Graphics[_0x1eb8d0(0x7e7)]%0x1e<0xf?_0x2e339c[_0x1eb8d0(0x49b)]([0xff,0xff,0xff,0x40]):_0x2e339c[_0x1eb8d0(0x49b)]([0x0,0x0,0x0,0x0]);else this[_0x1eb8d0(0x60d)]>0x0&&(this[_0x1eb8d0(0x60d)]=0x0,_0x2e339c[_0x1eb8d0(0x49b)]([0x0,0x0,0x0,0x0]));},Sprite_Battler[_0x2dcaec(0xaf6)]['silentHomeMove']=function(_0x4a12eb,_0x3e3d25){const _0x160050=_0x2dcaec,_0x164de8=VisuMZ[_0x160050(0xae3)][_0x160050(0xbeb)];if(this[_0x160050(0x61d)]===Sprite_Actor)_0x4a12eb+=_0x164de8[_0x160050(0x46b)][_0x160050(0x842)]||0x0,_0x3e3d25+=_0x164de8['Actor']['OffsetY']||0x0;else this[_0x160050(0x61d)]===Sprite_Enemy&&(_0x4a12eb+=_0x164de8[_0x160050(0xc36)][_0x160050(0x842)]||0x0,_0x3e3d25+=_0x164de8['Enemy'][_0x160050(0x53d)]||0x0);const _0x2fe9b8=_0x4a12eb-this[_0x160050(0x5a6)],_0x89dbe=_0x3e3d25-this[_0x160050(0x94d)];this['_homeX']=_0x4a12eb,this[_0x160050(0x94d)]=_0x3e3d25,this['_offsetX']-=_0x2fe9b8,this[_0x160050(0xc25)]-=_0x89dbe,this['_targetOffsetX']-=_0x2fe9b8,this[_0x160050(0x294)]-=_0x89dbe,this['updatePosition']();},Sprite_Battler[_0x2dcaec(0xaf6)]['startHomeMove']=function(_0x48f284,_0x21997d,_0x56d2f1,_0x3d4ca8){const _0xcf0871=_0x2dcaec,_0x480bf1=VisuMZ['BattleCore'][_0xcf0871(0xbeb)];if(this[_0xcf0871(0x61d)]===Sprite_Actor)_0x48f284+=_0x480bf1['Actor']['OffsetX']||0x0,_0x21997d+=_0x480bf1[_0xcf0871(0x46b)][_0xcf0871(0x53d)]||0x0;else this[_0xcf0871(0x61d)]===Sprite_Enemy&&(_0x48f284+=_0x480bf1['Enemy']['OffsetX']||0x0,_0x21997d+=_0x480bf1[_0xcf0871(0xc36)]['OffsetY']||0x0);(this[_0xcf0871(0x7a7)]!==_0x48f284||this[_0xcf0871(0x881)]!==_0x21997d)&&(this[_0xcf0871(0x7a7)]=_0x48f284,this[_0xcf0871(0x881)]=_0x21997d,this[_0xcf0871(0x32c)]=_0x56d2f1,this[_0xcf0871(0xa00)]=_0x56d2f1,this['_homeEasing']=_0x3d4ca8,_0x56d2f1<=0x0&&this[_0xcf0871(0x84b)]());},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x7c6)]=function(){const _0x5341a4=_0x2dcaec;if(this[_0x5341a4(0x32c)]<=0x0)return;const _0x557630=this[_0x5341a4(0x32c)],_0x4acd7a=this[_0x5341a4(0xa00)],_0x530d89=this['_homeEasing'];Imported[_0x5341a4(0x6d3)]?(this[_0x5341a4(0x5a6)]=this[_0x5341a4(0x319)](this[_0x5341a4(0x5a6)],this['_targetHomeX'],_0x557630,_0x4acd7a,_0x530d89),this[_0x5341a4(0x94d)]=this[_0x5341a4(0x319)](this[_0x5341a4(0x94d)],this[_0x5341a4(0x881)],_0x557630,_0x4acd7a,_0x530d89)):(this[_0x5341a4(0x5a6)]=(this[_0x5341a4(0x5a6)]*(_0x557630-0x1)+this[_0x5341a4(0x7a7)])/_0x557630,this[_0x5341a4(0x94d)]=(this[_0x5341a4(0x94d)]*(_0x557630-0x1)+this[_0x5341a4(0x881)])/_0x557630);this['_homeDuration']--;if(this[_0x5341a4(0x32c)]<=0x0)this[_0x5341a4(0x84b)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x84b)]=function(){const _0x17e31b=_0x2dcaec;this[_0x17e31b(0x5a6)]=this[_0x17e31b(0x7a7)],this[_0x17e31b(0x94d)]=this[_0x17e31b(0x881)];},Sprite_Battler['prototype'][_0x2dcaec(0x4e2)]=function(){const _0x33ba59=_0x2dcaec;this[_0x33ba59(0xae9)]=this['x'],this[_0x33ba59(0xa19)]=this['y'],this['updateFloat'](),this[_0x33ba59(0x272)](),this['x']+=this[_0x33ba59(0x8fd)](),this['y']+=this['extraPositionY'](),this['y']+=this[_0x33ba59(0xb1d)](),this['x']=Math[_0x33ba59(0x6eb)](this['x']),this['y']=Math[_0x33ba59(0x6eb)](this['y']);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8fd)]=function(){let _0x49af75=0x0;return _0x49af75;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x88c)]=function(){const _0x26b129=_0x2dcaec;let _0x1e0dd9=0x0;return this[_0x26b129(0x386)]&&!this[_0x26b129(0x386)][_0x26b129(0x510)]()&&(_0x1e0dd9-=this['_floatHeight'],_0x1e0dd9-=this[_0x26b129(0x9d0)]),_0x1e0dd9;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb1d)]=function(){const _0x3991de=_0x2dcaec;let _0x3f3fd8=0x0;if(this['_distortionSprite']&&this[_0x3991de(0x61d)]!==Sprite_SvEnemy){const _0x2b5a27=this[_0x3991de(0xa87)][_0x3991de(0x8a3)]['y'];_0x3f3fd8-=(_0x2b5a27-0x1)*this[_0x3991de(0x75c)];}return _0x3f3fd8;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x9f3)]=function(){const _0x266143=_0x2dcaec,_0x3ea53f=this['_battler']&&this[_0x266143(0x386)]['isBattlerFlipped']();this[_0x266143(0xc76)]=(_0x3ea53f?-0x1:0x1)*Math[_0x266143(0x2ac)](this[_0x266143(0x8a3)]['x']);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x98c)]=function(_0x59edf9,_0x3847c9,_0x5a6508){const _0x1d08b9=_0x2dcaec;if(!this['canMove']())return;if(this['_targetFloatHeight']===_0x59edf9)return;this[_0x1d08b9(0x3bc)]=_0x59edf9,this['_floatDuration']=_0x3847c9,this[_0x1d08b9(0x4a1)]=_0x3847c9,this[_0x1d08b9(0xac4)]=_0x5a6508||'Linear';if(_0x3847c9<=0x0)this[_0x1d08b9(0x4dd)]=_0x59edf9;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8b2)]=function(){const _0x504713=_0x2dcaec;if(this['_floatDuration']<=0x0)return;const _0x17c9c8=this[_0x504713(0xbf2)],_0x1fb0cf=this[_0x504713(0x4a1)],_0x20eadd=this[_0x504713(0xac4)];Imported['VisuMZ_0_CoreEngine']?this[_0x504713(0x4dd)]=this['applyEasing'](this[_0x504713(0x4dd)],this[_0x504713(0x3bc)],_0x17c9c8,_0x1fb0cf,_0x20eadd):this['_floatHeight']=(this[_0x504713(0x4dd)]*(_0x17c9c8-0x1)+this[_0x504713(0x3bc)])/_0x17c9c8;this[_0x504713(0xbf2)]--;if(this[_0x504713(0xbf2)]<=0x0)this[_0x504713(0x4c8)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x4c8)]=function(){const _0x4b7a04=_0x2dcaec;this[_0x4b7a04(0x4dd)]=this[_0x4b7a04(0x3bc)];},Sprite_Battler[_0x2dcaec(0xaf6)]['isFloating']=function(){return this['_floatDuration']>0x0;},Sprite_Battler[_0x2dcaec(0xaf6)]['startJump']=function(_0x4730f2,_0x354893){const _0x317256=_0x2dcaec;if(!this[_0x317256(0x88d)]())return;if(_0x354893<=0x0)return;this[_0x317256(0x511)]=_0x4730f2,this['_jumpDuration']=_0x354893,this[_0x317256(0x444)]=_0x354893;},Sprite_Battler[_0x2dcaec(0xaf6)]['updateJump']=function(){const _0x294546=_0x2dcaec;if(this['_jumpDuration']<=0x0)return;const _0x3d097f=this[_0x294546(0x444)]-this[_0x294546(0x187)],_0x19b646=this[_0x294546(0x444)]/0x2,_0x4cfad0=this['_jumpMaxHeight'],_0x1e0e52=-_0x4cfad0/Math['pow'](_0x19b646,0x2);this[_0x294546(0x9d0)]=_0x1e0e52*Math['pow'](_0x3d097f-_0x19b646,0x2)+_0x4cfad0,this['_jumpDuration']--;if(this[_0x294546(0x187)]<=0x0)return this[_0x294546(0xb56)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb56)]=function(){const _0x2e4da=_0x2dcaec;this[_0x2e4da(0x9d0)]=0x0;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x9f0)]=function(){const _0x28cd40=_0x2dcaec;return this[_0x28cd40(0x187)]>0x0;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xaa5)]=function(_0x39e114,_0x29f05d,_0x32b302){const _0x447b9e=_0x2dcaec;if(this[_0x447b9e(0x1fb)]===_0x39e114)return;this[_0x447b9e(0x1fb)]=_0x39e114,this['_opacityDuration']=_0x29f05d,this[_0x447b9e(0x349)]=_0x29f05d,this[_0x447b9e(0xabc)]=_0x32b302||'Linear';if(_0x29f05d<=0x0)this['opacity']=_0x39e114;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x5af)]=function(){const _0x35340d=_0x2dcaec;if(this[_0x35340d(0x61d)][_0x35340d(0x321)]===_0x35340d(0x2e3))return;if(this[_0x35340d(0xa08)]<=0x0)return;const _0x5b83a9=this['_opacityDuration'],_0xc16c49=this[_0x35340d(0x349)],_0x3bb147=this[_0x35340d(0xabc)];Imported[_0x35340d(0x6d3)]?this[_0x35340d(0x19d)]=this[_0x35340d(0x319)](this['opacity'],this[_0x35340d(0x1fb)],_0x5b83a9,_0xc16c49,_0x3bb147):this[_0x35340d(0x19d)]=(this['opacity']*(_0x5b83a9-0x1)+this[_0x35340d(0x1fb)])/_0x5b83a9;this[_0x35340d(0xa08)]--;if(this['_opacityDuration']<=0x0)this[_0x35340d(0x8e1)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x8e1)]=function(){const _0x4aa842=_0x2dcaec;this[_0x4aa842(0x19d)]=this[_0x4aa842(0x1fb)];},Sprite_Battler['prototype']['isChangingOpacity']=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x47d)]=function(){const _0x1136af=_0x2dcaec;this[_0x1136af(0x399)][_0x1136af(0xaba)]=this['_battler']['hasSvBattler'](),this[_0x1136af(0x382)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['updateShadowPosition']=function(){const _0x48368=_0x2dcaec;if(!this[_0x48368(0x399)])return;this[_0x48368(0x399)]['y']=this[_0x48368(0xa19)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x2dcaec(0xc04)]=function(){const _0x1514ee=_0x2dcaec;if(!this['_battler'])return;this[_0x1514ee(0x465)]=this[_0x1514ee(0x386)]['battlerShadowScaleX'](),this['_shadowScaleY']=this[_0x1514ee(0x386)][_0x1514ee(0x43c)]();},Game_BattlerBase['prototype'][_0x2dcaec(0x3d9)]=function(){const _0x164b03=_0x2dcaec,_0x31e602=this[_0x164b03(0x8d6)]()?this[_0x164b03(0x3fc)]():this[_0x164b03(0x2cf)]();if(_0x31e602){const _0x525006=_0x31e602[_0x164b03(0x795)];if(_0x525006[_0x164b03(0xb9e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x525006['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x43c)]=function(){const _0x5e1830=_0x2dcaec,_0x18233d=this[_0x5e1830(0x8d6)]()?this[_0x5e1830(0x3fc)]():this['enemy']();if(_0x18233d){const _0x2e9c91=_0x18233d[_0x5e1830(0x795)];if(_0x2e9c91[_0x5e1830(0xb9e)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x2e9c91['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler['prototype']['updateScale']=function(){const _0x84e26a=_0x2dcaec;if(this[_0x84e26a(0x61d)]===Sprite_SvEnemy)return;this[_0x84e26a(0x867)](),this[_0x84e26a(0xb83)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['finalizeScale']=function(){const _0x4a642e=_0x2dcaec,_0x6ebd11=this[_0x4a642e(0xa87)];_0x6ebd11&&(_0x6ebd11[_0x4a642e(0x8a3)]['x']=this[_0x4a642e(0x2e5)](),_0x6ebd11[_0x4a642e(0x8a3)]['y']=this[_0x4a642e(0x2d9)]());},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x2e5)]=function(){let _0x48e2eb=0x1;return _0x48e2eb*=this['_flipScaleX'],_0x48e2eb*=this['_growX'],_0x48e2eb;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x2d9)]=function(){const _0x547dc8=_0x2dcaec;return 0x1*this[_0x547dc8(0xb0d)];},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x74d)]=function(){const _0x5a8468=_0x2dcaec;return this[_0x5a8468(0x64b)]*this[_0x5a8468(0x2e5)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['mainSpriteHeight']=function(){const _0x1d9188=_0x2dcaec;return this[_0x1d9188(0x75c)]*this[_0x1d9188(0x2d9)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xbd3)]=function(_0x280628,_0x196dfe,_0x326b52,_0x556677){const _0x2b4510=_0x2dcaec;if(!this[_0x2b4510(0x88d)]())return;if(!this[_0x2b4510(0xa87)])return;if(this[_0x2b4510(0x563)]===_0x280628&&this[_0x2b4510(0x486)]===_0x196dfe)return;this[_0x2b4510(0x563)]=_0x280628,this['_targetGrowY']=_0x196dfe,this[_0x2b4510(0x9de)]=_0x326b52,this['_growWholeDuration']=_0x326b52,this[_0x2b4510(0x1bb)]=_0x556677||_0x2b4510(0x41d),_0x326b52<=0x0&&(this['_growX']=this[_0x2b4510(0x563)],this[_0x2b4510(0xb0d)]=this[_0x2b4510(0x486)]);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x867)]=function(){const _0x1eb808=_0x2dcaec;if(this[_0x1eb808(0x9de)]<=0x0)return;if(!this[_0x1eb808(0xa87)])return;const _0xa23ad4=this[_0x1eb808(0x9de)],_0x2f0c41=this[_0x1eb808(0x9da)],_0x57fdeb=this[_0x1eb808(0x1bb)];Imported[_0x1eb808(0x6d3)]?(this[_0x1eb808(0xb70)]=this[_0x1eb808(0x319)](this[_0x1eb808(0xb70)],this[_0x1eb808(0x563)],_0xa23ad4,_0x2f0c41,_0x57fdeb),this[_0x1eb808(0xb0d)]=this[_0x1eb808(0x319)](this[_0x1eb808(0xb0d)],this[_0x1eb808(0x486)],_0xa23ad4,_0x2f0c41,_0x57fdeb)):(this['_growX']=(this[_0x1eb808(0xb70)]*(_0xa23ad4-0x1)+this['_targetGrowX'])/_0xa23ad4,this[_0x1eb808(0xb0d)]=(this['_growY']*(_0xa23ad4-0x1)+this['_targetGrowY'])/_0xa23ad4);this[_0x1eb808(0x9de)]--;if(this[_0x1eb808(0x9de)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a1)]=function(){const _0x523628=_0x2dcaec;this[_0x523628(0xb70)]=this[_0x523628(0x563)],this[_0x523628(0xb0d)]=this[_0x523628(0x486)];},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xb53)]=function(){const _0x109ba4=_0x2dcaec;return this[_0x109ba4(0x9de)]>0x0;},Sprite_Battler[_0x2dcaec(0xaf6)]['startSkew']=function(_0x298abb,_0x5c58c3,_0x5049ac,_0x179461){const _0x47f761=_0x2dcaec;if(!this[_0x47f761(0x88d)]())return;if(!this[_0x47f761(0xa87)])return;if(this['_targetSkewX']===_0x298abb&&this[_0x47f761(0x951)]===_0x5c58c3)return;this[_0x47f761(0x249)]=_0x298abb,this[_0x47f761(0x951)]=_0x5c58c3,this[_0x47f761(0x599)]=_0x5049ac,this[_0x47f761(0x25d)]=_0x5049ac,this[_0x47f761(0x176)]=_0x179461||'Linear',_0x5049ac<=0x0&&(this[_0x47f761(0xa87)][_0x47f761(0x999)]['x']=this['_targetSkewX'],this[_0x47f761(0xa87)][_0x47f761(0x999)]['y']=this[_0x47f761(0x951)]);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x46d)]=function(){const _0x237153=_0x2dcaec;if(this['_skewDuration']<=0x0)return;if(!this[_0x237153(0xa87)])return;const _0x285b20=this['_skewDuration'],_0x5b2bee=this[_0x237153(0x25d)],_0x5271dd=this[_0x237153(0x176)],_0x14983d=this[_0x237153(0xa87)];Imported[_0x237153(0x6d3)]?(_0x14983d[_0x237153(0x999)]['x']=this[_0x237153(0x319)](_0x14983d[_0x237153(0x999)]['x'],this[_0x237153(0x249)],_0x285b20,_0x5b2bee,_0x5271dd),_0x14983d[_0x237153(0x999)]['y']=this[_0x237153(0x319)](_0x14983d[_0x237153(0x999)]['y'],this['_targetSkewY'],_0x285b20,_0x5b2bee,_0x5271dd)):(_0x14983d[_0x237153(0x999)]['x']=(_0x14983d['skew']['x']*(_0x285b20-0x1)+this['_targetSkewX'])/_0x285b20,_0x14983d[_0x237153(0x999)]['y']=(_0x14983d['skew']['y']*(_0x285b20-0x1)+this['_targetSkewY'])/_0x285b20);this['_skewDuration']--;if(this[_0x237153(0x599)]<=0x0)this[_0x237153(0xc79)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xc79)]=function(){const _0x469389=_0x2dcaec;this[_0x469389(0xa87)]['skew']['x']=this['_targetSkewX'],this[_0x469389(0xa87)]['skew']['y']=this['_targetSkewY'];},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x367)]=function(){const _0xd9087b=_0x2dcaec;return this[_0xd9087b(0x599)]>0x0;},Sprite_Battler['prototype'][_0x2dcaec(0x654)]=function(_0x3fee2b,_0xc5a529,_0x2b0399,_0x137b60){const _0x387cf8=_0x2dcaec;if(!this[_0x387cf8(0x88d)]())return;if(!this[_0x387cf8(0xa87)])return;if(this['_targetAngle']===_0x3fee2b)return;this['_targetAngle']=_0x3fee2b,this['_angleDuration']=_0xc5a529,this['_angleWholeDuration']=_0xc5a529,this['_angleEasing']=_0x2b0399||'Linear',this[_0x387cf8(0xb35)]=_0x137b60,this['_angleRevertOnFinish']===undefined&&(this[_0x387cf8(0xb35)]=!![]),_0xc5a529<=0x0&&(this[_0x387cf8(0x153)]=_0x3fee2b,this[_0x387cf8(0xb35)]&&(this[_0x387cf8(0xba7)]=0x0,this[_0x387cf8(0x153)]=0x0));},Sprite_Battler[_0x2dcaec(0xaf6)]['updateSpin']=function(){const _0x34fe31=_0x2dcaec;this[_0x34fe31(0x4e8)](),this['applyAngleChange']();},Sprite_Battler[_0x2dcaec(0xaf6)]['updateAngleCalculations']=function(){const _0x19b0a0=_0x2dcaec;if(this[_0x19b0a0(0xbe0)]<=0x0)return;const _0x433a62=this['_angleDuration'],_0x3df1c9=this[_0x19b0a0(0x984)],_0x17bcd2=this['_angleEasing'];Imported[_0x19b0a0(0x6d3)]?this[_0x19b0a0(0x153)]=this[_0x19b0a0(0x319)](this['_currentAngle'],this[_0x19b0a0(0xba7)],_0x433a62,_0x3df1c9,_0x17bcd2):this[_0x19b0a0(0x153)]=(this['_currentAngle']*(_0x433a62-0x1)+this[_0x19b0a0(0xba7)])/_0x433a62;this[_0x19b0a0(0xbe0)]--;if(this[_0x19b0a0(0xbe0)]<=0x0)this[_0x19b0a0(0xbb6)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['onAngleEnd']=function(){const _0x55c6eb=_0x2dcaec;this['_currentAngle']=this['_targetAngle'],this[_0x55c6eb(0xb35)]&&(this[_0x55c6eb(0xba7)]=0x0,this[_0x55c6eb(0x153)]=0x0);},Sprite_Battler[_0x2dcaec(0xaf6)]['isSpinning']=function(){const _0x2c87ec=_0x2dcaec;return this[_0x2c87ec(0xbe0)]>0x0;},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x934)]=function(){const _0x186673=_0x2dcaec;if(!this['_distortionSprite'])return;const _0x5d25ee=this[_0x186673(0x153)],_0x27d30c=this['scale']['x'],_0x114c27=this[_0x186673(0x386)][_0x186673(0x8d6)]()?-0x1:0x1;this[_0x186673(0xa87)][_0x186673(0x4e4)]=_0x5d25ee*_0x27d30c*_0x114c27;const _0x5a5a2b=this[_0x186673(0xa87)][_0x186673(0x8a3)]['y'];this[_0x186673(0xa87)]['y']=this[_0x186673(0x75c)]*-0.5*(0x2-_0x5a5a2b),this[_0x186673(0xa87)]['y']=Math[_0x186673(0xbd6)](this[_0x186673(0xa87)]['y']);const _0x1c0844=[this[_0x186673(0x4c4)],this['_svBattlerSprite'],this['_dragonbonesSpriteContainer']];for(const _0x265dec of _0x1c0844){if(!_0x265dec)continue;_0x265dec['y']=this[_0x186673(0x75c)]*0.5;}this[_0x186673(0x399)]&&(this[_0x186673(0x465)]=this['_shadowScaleX']??0x1,this[_0x186673(0x5cc)]=this[_0x186673(0x5cc)]??0x1,this['_shadowSprite']['scale']['x']=this[_0x186673(0xa87)][_0x186673(0x8a3)]['x']*this[_0x186673(0x465)],this[_0x186673(0x399)][_0x186673(0x8a3)]['y']=this[_0x186673(0xa87)][_0x186673(0x8a3)]['y']*this['_shadowScaleY']);},VisuMZ['BattleCore'][_0x2dcaec(0x972)]=Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x31b)],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x31b)]=function(){const _0x3a8ffa=_0x2dcaec;VisuMZ[_0x3a8ffa(0xae3)]['Sprite_Actor_createStateSprite'][_0x3a8ffa(0x390)](this),VisuMZ[_0x3a8ffa(0xae3)][_0x3a8ffa(0xbeb)][_0x3a8ffa(0x2bb)][_0x3a8ffa(0x3f5)]&&this[_0x3a8ffa(0x592)]();},VisuMZ['BattleCore'][_0x2dcaec(0x9d9)]=Sprite_Enemy['prototype'][_0x2dcaec(0x600)],Sprite_Enemy['prototype'][_0x2dcaec(0x600)]=function(){const _0x429ec5=_0x2dcaec;VisuMZ['BattleCore'][_0x429ec5(0xbeb)]['HpGauge'][_0x429ec5(0x8c0)]&&this[_0x429ec5(0x592)](),VisuMZ[_0x429ec5(0xae3)][_0x429ec5(0x9d9)][_0x429ec5(0x390)](this);},Sprite_Battler[_0x2dcaec(0xaf6)]['createHpGaugeSprite']=function(){const _0x502098=_0x2dcaec;if(!ConfigManager[_0x502098(0x4ce)])return;if(this[_0x502098(0x61d)]===Sprite_SvEnemy)return;const _0x47229f=VisuMZ[_0x502098(0xae3)]['Settings'][_0x502098(0x2bb)],_0x396db9=new Sprite_HpGauge();_0x396db9['anchor']['x']=_0x47229f['AnchorX'],_0x396db9[_0x502098(0x156)]['y']=_0x47229f[_0x502098(0x5e4)],_0x396db9[_0x502098(0x8a3)]['x']=_0x396db9[_0x502098(0x8a3)]['y']=_0x47229f[_0x502098(0x3f6)],this[_0x502098(0x5fa)]=_0x396db9,this[_0x502098(0x83f)](this['_hpGaugeSprite']),Spriteset_Battle[_0x502098(0x981)]&&BattleManager['addChildToUiContainer'](this['_hpGaugeSprite']);},VisuMZ[_0x2dcaec(0xae3)]['Sprite_Battler_setBattler']=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)]=function(_0x936f76){const _0x1d5041=_0x2dcaec,_0x14b9d7=this[_0x1d5041(0x386)];VisuMZ[_0x1d5041(0xae3)][_0x1d5041(0x24a)][_0x1d5041(0x390)](this,_0x936f76),this[_0x1d5041(0x682)](_0x936f76);if(_0x14b9d7!==_0x936f76)this[_0x1d5041(0xc04)]();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x682)]=function(_0x5e7884){const _0x3d8086=_0x2dcaec;if(!_0x5e7884)return;if(!this[_0x3d8086(0x5fa)])return;if(_0x5e7884[_0x3d8086(0x8d6)]()){}else{if(_0x5e7884[_0x3d8086(0x5d1)]()){if(this[_0x3d8086(0x61d)]===Sprite_SvEnemy&&!_0x5e7884[_0x3d8086(0x5c7)]())return;}}this[_0x3d8086(0x5fa)][_0x3d8086(0xb15)](_0x5e7884,'hp');},Sprite_Battler[_0x2dcaec(0xaf6)]['hasStaticSvBattler']=function(){const _0x40a899=_0x2dcaec;return this[_0x40a899(0x386)]&&this[_0x40a899(0x386)]['hasStaticSvBattler']();},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x4e5)]=function(){const _0x1513b6=_0x2dcaec,_0x1c98ef=this[_0x1513b6(0x4c4)][_0x1513b6(0x4ca)];if(!_0x1c98ef)return;const _0x25b319=_0x1c98ef['width'];let _0x22bed4=_0x1c98ef[_0x1513b6(0x75c)];if(this['_battler']['isDead']()){if(this[_0x1513b6(0xaef)])_0x22bed4=Math[_0x1513b6(0x959)](0x0,this[_0x1513b6(0xaef)][_0x1513b6(0x75c)]-0x4);}this[_0x1513b6(0x4c4)]['setFrame'](0x0,0x0,_0x25b319,_0x22bed4),this[_0x1513b6(0x474)](0x0,0x0,_0x25b319,_0x22bed4);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x733)]=function(){const _0x159b7=_0x2dcaec;if(!this[_0x159b7(0x386)])return;if(!this['_hpGaugeSprite'])return;const _0x4d2175=VisuMZ[_0x159b7(0xae3)][_0x159b7(0xbeb)][_0x159b7(0x2bb)],_0x2899f2=this[_0x159b7(0x5fa)];_0x2899f2[_0x159b7(0xaba)]=this[_0x159b7(0x242)]();const _0x457385=_0x4d2175['OffsetX'],_0x5f421d=_0x4d2175[_0x159b7(0x53d)];_0x2899f2['x']=_0x457385,_0x2899f2['x']+=this[_0x159b7(0x386)][_0x159b7(0x8c1)](),_0x2899f2['y']=-this[_0x159b7(0x75c)]+_0x5f421d,_0x2899f2['y']+=this[_0x159b7(0x386)][_0x159b7(0x7a9)](),Spriteset_Battle[_0x159b7(0x981)]&&SceneManager['_scene'][_0x159b7(0x2a3)]&&(_0x2899f2['x']+=this['x'],_0x2899f2['y']+=this['y']);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x242)]=function(){const _0x1981a3=_0x2dcaec;if(!this[_0x1981a3(0x386)])return![];if(this[_0x1981a3(0x386)][_0x1981a3(0x8d6)]())return!![];if(this[_0x1981a3(0x386)][_0x1981a3(0x478)]())return![];if(this[_0x1981a3(0x19d)]<=0x0)return![];const _0x3bb155=this[_0x1981a3(0x386)][_0x1981a3(0x2cf)]()['note'];if(_0x3bb155[_0x1981a3(0xb9e)](/<SHOW HP GAUGE>/i))return!![];if(_0x3bb155[_0x1981a3(0xb9e)](/<HIDE HP GAUGE>/i))return![];const _0x3e3dbb=VisuMZ['BattleCore']['Settings'][_0x1981a3(0x2bb)];if(_0x3e3dbb[_0x1981a3(0x9f9)]){if(_0x3e3dbb['BTestBypass']&&BattleManager[_0x1981a3(0xb36)]())return!![];if(this[_0x1981a3(0x386)][_0x1981a3(0x257)])return![];return this[_0x1981a3(0x386)][_0x1981a3(0x5fc)]();}return!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5d6)]=Sprite_Battler['prototype'][_0x2dcaec(0xaaa)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0xaaa)]=function(){const _0x5bd994=_0x2dcaec;if(!this[_0x5bd994(0x386)])return![];if(this[_0x5bd994(0x32c)]>0x0)return!![];return VisuMZ['BattleCore'][_0x5bd994(0x5d6)]['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4b0)]=Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x84f)],Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x84f)]=function(_0x231452,_0x39a10a,_0x516e00){const _0x53878d=_0x2dcaec;this[_0x53878d(0x88d)]()&&VisuMZ[_0x53878d(0xae3)][_0x53878d(0x4b0)][_0x53878d(0x390)](this,_0x231452,_0x39a10a,_0x516e00);},Sprite_Battler[_0x2dcaec(0xaf6)]['canMove']=function(){const _0x43a5ff=_0x2dcaec;if(this[_0x43a5ff(0x386)]&&this[_0x43a5ff(0x386)]['isDead']())return![];if(this[_0x43a5ff(0x386)]&&!this[_0x43a5ff(0x386)][_0x43a5ff(0x8e6)]())return![];return $gameSystem[_0x43a5ff(0x334)]();},Sprite_Battler[_0x2dcaec(0xaf6)]['stepForward']=function(){},Sprite_Battler[_0x2dcaec(0xaf6)]['stepBack']=function(){const _0x28cc8b=_0x2dcaec;this[_0x28cc8b(0x84f)](0x0,0x0,0xc);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x67f)]=function(){},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x13a)]=function(){const _0x3c2129=_0x2dcaec,_0x5a4c39=VisuMZ[_0x3c2129(0xae3)][_0x3c2129(0xbeb)][_0x3c2129(0x46b)],_0x55996d=this[_0x3c2129(0x386)]&&this[_0x3c2129(0x386)][_0x3c2129(0x8d6)]()?0x1:-0x1,_0x57f204=this[_0x3c2129(0xae9)]-this[_0x3c2129(0x5a6)]+_0x55996d*_0x5a4c39['FlinchDistanceX'],_0x2f338d=this[_0x3c2129(0xa19)]-this[_0x3c2129(0x94d)]+_0x55996d*_0x5a4c39[_0x3c2129(0x625)],_0x50b687=_0x5a4c39[_0x3c2129(0xb19)];this[_0x3c2129(0x84f)](_0x57f204,_0x2f338d,_0x50b687);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x2f9)]=function(_0x309073,_0xf08b97){const _0x274ba7=_0x2dcaec,_0x10fee5=VisuMZ['BattleCore'][_0x274ba7(0xbeb)][_0x274ba7(0x46b)];this['_shakeFlinchDuration']=Math[_0x274ba7(0xbd6)]((_0x10fee5[_0x274ba7(0x929)]??0x18)*_0xf08b97),this[_0x274ba7(0xb1a)]=Math[_0x274ba7(0x959)](this[_0x274ba7(0xb1a)],_0x309073);},Sprite_Battler[_0x2dcaec(0xaf6)][_0x2dcaec(0x38e)]=function(){const _0x5300f6=_0x2dcaec,_0x36e3d9=VisuMZ['BattleCore'][_0x5300f6(0xbeb)][_0x5300f6(0x46b)];if(!(_0x36e3d9[_0x5300f6(0x278)]??![]))return;if(this[_0x5300f6(0x62c)]>0x0){const _0x38e7b4=this['_shakeFlinchDuration'];this['_shakeFlinchPower']=this[_0x5300f6(0xb1a)]*(_0x38e7b4-0x1)/_0x38e7b4,this[_0x5300f6(0x62c)]--,this[_0x5300f6(0x62c)]<=0x0&&(this[_0x5300f6(0xb1a)]=0x0);}this[_0x5300f6(0xb1a)]>0x0?(this[_0x5300f6(0x4c4)]['x']=Math['randomInt'](this['_shakeFlinchPower'])*(Math[_0x5300f6(0x7af)]()<0.5?-0x1:0x1),this[_0x5300f6(0xa19)]!==this['y']&&(this[_0x5300f6(0x4c4)]['y']=this['height']*0.5,this[_0x5300f6(0x4c4)]['y']+=Math[_0x5300f6(0xb44)](this[_0x5300f6(0xb1a)])*(Math[_0x5300f6(0x7af)]()<0.5?-0x1:0x1))):(this[_0x5300f6(0x4c4)]['x']=0x0,this['_mainSprite']['y']=this[_0x5300f6(0x75c)]*0.5);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x31f)]=Sprite_Actor[_0x2dcaec(0xaf6)]['initMembers'],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0xaab)]=function(){const _0x561648=_0x2dcaec;VisuMZ[_0x561648(0xae3)]['Sprite_Actor_initMembers'][_0x561648(0x390)](this),this[_0x561648(0xc0d)]();},Sprite_Actor['prototype']['mainSprite']=function(){const _0x4af7c6=_0x2dcaec;return this['_distortionSprite']||this[_0x4af7c6(0x4c4)]||this;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x291)]=Sprite_Actor['prototype'][_0x2dcaec(0x623)],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x623)]=function(){},Sprite_Actor['prototype'][_0x2dcaec(0x3ed)]=function(_0xcebb12){const _0xc9626d=_0x2dcaec;if(SceneManager[_0xc9626d(0x8bc)]())return;if(!_0xcebb12)return;if(!_0xcebb12['canMove']())return;VisuMZ[_0xc9626d(0xae3)][_0xc9626d(0x291)]['call'](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5dd)]=Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x6cc)],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x6cc)]=function(_0x364e3f){const _0x910bed=_0x2dcaec;VisuMZ[_0x910bed(0xae3)]['Settings'][_0x910bed(0x46b)][_0x910bed(0x4cb)]?VisuMZ[_0x910bed(0xae3)][_0x910bed(0xbeb)]['Actor'][_0x910bed(0x4cb)]['call'](this,_0x364e3f):VisuMZ[_0x910bed(0xae3)][_0x910bed(0x5dd)][_0x910bed(0x390)](this,_0x364e3f);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x13e)]=Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)]=function(_0x16801a){const _0xcc8e7c=_0x2dcaec;VisuMZ[_0xcc8e7c(0xae3)][_0xcc8e7c(0x13e)]['call'](this,_0x16801a),this[_0xcc8e7c(0x21b)](_0x16801a);},Sprite_Actor[_0x2dcaec(0xaf6)]['setBattlerBattleCore']=function(_0xe8f25b){const _0x51bcf4=_0x2dcaec;if(!_0xe8f25b)return;if(!this[_0x51bcf4(0x4c4)])return;this[_0x51bcf4(0x4c4)][_0x51bcf4(0x156)]['x']=this[_0x51bcf4(0xaf8)]['svBattlerAnchorX'](),this[_0x51bcf4(0x4c4)][_0x51bcf4(0x156)]['y']=this[_0x51bcf4(0xaf8)]['svBattlerAnchorY'](),this['updateShadowVisibility']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc74)]=Sprite_Actor['prototype']['update'],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x3108c3=_0x2dcaec;VisuMZ['BattleCore']['Sprite_Actor_update'][_0x3108c3(0x390)](this),this[_0x3108c3(0xaf8)]&&(this[_0x3108c3(0x7a2)](),this[_0x3108c3(0xa40)]());},VisuMZ[_0x2dcaec(0xae3)]['Sprite_Actor_updateBitmap']=Sprite_Actor['prototype']['updateBitmap'],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x99b)]=function(){const _0x269bc6=_0x2dcaec;VisuMZ[_0x269bc6(0xae3)]['Sprite_Actor_updateBitmap']['call'](this),this[_0x269bc6(0x4c4)]&&this[_0x269bc6(0x4c4)][_0x269bc6(0x4ca)]&&this[_0x269bc6(0x386)]&&(this[_0x269bc6(0x4c4)][_0x269bc6(0x4ca)]['smooth']!==this[_0x269bc6(0x386)][_0x269bc6(0x1b0)]()&&(this['_mainSprite'][_0x269bc6(0x4ca)]['smooth']=this[_0x269bc6(0x386)][_0x269bc6(0x1b0)]()));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xa56)]=Sprite_Actor['prototype']['updateShadow'],Sprite_Actor[_0x2dcaec(0xaf6)]['updateShadow']=function(){const _0x1ec8ba=_0x2dcaec;VisuMZ[_0x1ec8ba(0xae3)][_0x1ec8ba(0xa56)][_0x1ec8ba(0x390)](this),this[_0x1ec8ba(0x2a8)]();},Sprite_Actor['prototype'][_0x2dcaec(0x2a8)]=function(){const _0x592743=_0x2dcaec;if(!this[_0x592743(0x4c4)])return;if(!this['_shadowSprite'])return;this['updateShadowVisibility'](),this[_0x592743(0x382)]();},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a2)]=function(){const _0x11c1d5=_0x2dcaec;{this[_0x11c1d5(0xa2f)][_0x11c1d5(0x8a3)]['x']=0x1/(this[_0x11c1d5(0x8a3)]['x']||0.001),this[_0x11c1d5(0xa2f)][_0x11c1d5(0x8a3)]['y']=0x1/(this[_0x11c1d5(0x8a3)]['y']||0.001);}{this[_0x11c1d5(0xa2f)]['x']=0x0,this[_0x11c1d5(0xa2f)]['y']=-this[_0x11c1d5(0x75c)]-0x20+0x60;const _0x5ce1b9=VisuMZ['BattleCore']['Settings'][_0x11c1d5(0x46b)];this[_0x11c1d5(0xa2f)]['x']+=_0x5ce1b9[_0x11c1d5(0xbff)]??0x0,this[_0x11c1d5(0xa2f)]['y']+=_0x5ce1b9[_0x11c1d5(0x937)]??0x0;}},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0xa40)]=function(){const _0x106d4d=_0x2dcaec;if(!$gameSystem[_0x106d4d(0x334)]()&&this[_0x106d4d(0x61d)]===Sprite_Actor){const _0x31bc76=Scene_Battle[_0x106d4d(0xaf6)][_0x106d4d(0x9c9)]();[_0x106d4d(0x30e),_0x106d4d(0x97c),_0x106d4d(0x3ec),_0x106d4d(0x541)][_0x106d4d(0x7f2)](_0x31bc76)&&(this[_0x106d4d(0x19d)]=0x0);}},Sprite_Actor['prototype'][_0x2dcaec(0x5a4)]=function(){const _0x4b3763=_0x2dcaec,_0x1559d3=this[_0x4b3763(0xaf8)];if(_0x1559d3){if(_0x1559d3[_0x4b3763(0xc3b)])return;const _0x489bdf=_0x1559d3[_0x4b3763(0x79f)]();if(_0x1559d3[_0x4b3763(0x5f5)]()||_0x1559d3['isActing']())this['startMotion'](_0x4b3763(0x4eb));else{if(_0x489bdf===0x3)this['startMotion'](_0x4b3763(0xbe7));else{if(_0x489bdf===0x2)this['startMotion'](_0x4b3763(0x9b3));else{if(this['forceEscapeSprite'])this['startMotion'](_0x4b3763(0x5b0));else{if(_0x1559d3['isCharging']())this['startMotion'](_0x4b3763(0x275));else{if(_0x1559d3['isChanting']())this['startMotion'](_0x4b3763(0x944));else{if(_0x1559d3['isGuard']()||_0x1559d3[_0x4b3763(0x701)]())this['startMotion'](_0x4b3763(0x64c));else{if(_0x489bdf===0x1)this[_0x4b3763(0x310)](_0x4b3763(0x4bf));else{if(_0x1559d3[_0x4b3763(0x588)]())this[_0x4b3763(0x310)](_0x4b3763(0x868));else{if(_0x1559d3[_0x4b3763(0x568)]())this['startMotion'](_0x4b3763(0x4eb));else _0x1559d3[_0x4b3763(0x3ab)]()?this[_0x4b3763(0x310)]('wait'):this[_0x4b3763(0x310)](_0x4b3763(0x4eb));}}}}}}}}}}},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x67f)]=function(){const _0xd44b4a=_0x2dcaec,_0xd481e3=0xa,_0x112098=0x12c*_0xd481e3,_0x1087b4=0x1e*_0xd481e3;this[_0xd44b4a(0x84f)](_0x112098,0x0,_0x1087b4);},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x359)]=function(){const _0x55cc1b=_0x2dcaec;Sprite_Battler['prototype'][_0x55cc1b(0x359)][_0x55cc1b(0x390)](this);},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x82e)]=function(){const _0x167cad=_0x2dcaec;return Sprite_Battler[_0x167cad(0x526)];},Sprite_Weapon[_0x2dcaec(0xaf6)][_0x2dcaec(0x388)]=function(){const _0x352083=_0x2dcaec;return Sprite_Battler[_0x352083(0x526)];},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x2eb)]=function(){},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0xc00)]=function(){},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x973)]=function(){const _0xa7072a=_0x2dcaec;if(this['_motion']&&++this[_0xa7072a(0x596)]>=this[_0xa7072a(0x82e)]()){if(this['_motion']['loop'])this[_0xa7072a(0xa72)]=(this[_0xa7072a(0xa72)]+0x1)%0x4;else{if(this[_0xa7072a(0xa72)]<0x2)this[_0xa7072a(0xa72)]++;else{const _0x93e2aa=this['_actor'];if(_0x93e2aa)_0x93e2aa[_0xa7072a(0xc3b)]=undefined;this[_0xa7072a(0x5a4)]();}}this[_0xa7072a(0x596)]=0x0;}},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x3c5)]=function(_0x30a302){const _0x37df68=_0x2dcaec;if(this[_0x37df68(0x386)]&&this[_0x37df68(0x386)]['isDead']()){this[_0x37df68(0x20a)]=Sprite_Actor[_0x37df68(0x51a)][_0x37df68(0xbe7)];return;}const _0x5e25d2=Sprite_Actor[_0x37df68(0x51a)][_0x30a302];this['_motion']=_0x5e25d2,this['_motionCount']=0x0,this['_pattern']=0x0;},Sprite_Actor[_0x2dcaec(0xaf6)]['forceWeaponAnimation']=function(_0x5aca61){const _0x75fa8d=_0x2dcaec;if(this[_0x75fa8d(0x42f)]())return;this[_0x75fa8d(0x681)](),this[_0x75fa8d(0x23f)]['setup'](_0x5aca61),this['_actor'][_0x75fa8d(0x8b8)]();},Sprite_Actor['prototype'][_0x2dcaec(0x681)]=function(){const _0x415ebd=_0x2dcaec;let _0x36968f=-0x10,_0x4e87e9=this[_0x415ebd(0x75c)]*0.5;const _0xbf9491=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x348d10=this[_0x415ebd(0x386)][_0x415ebd(0x517)]()[_0x415ebd(0xc20)](_0x174c80=>_0x174c80&&_0x174c80[_0x415ebd(0x795)][_0x415ebd(0xb9e)](_0xbf9491)?Number(RegExp['$1']):0x0),_0x55fb82=this['_battler']['traitObjects']()[_0x415ebd(0xc20)](_0x3e4248=>_0x3e4248&&_0x3e4248[_0x415ebd(0x795)]['match'](_0xbf9491)?Number(RegExp['$2']):0x0);_0x36968f=_0x348d10['reduce']((_0x1e026c,_0x1f6d39)=>_0x1e026c+_0x1f6d39,_0x36968f),_0x4e87e9=_0x55fb82[_0x415ebd(0xbc0)]((_0xa65191,_0xb81f8f)=>_0xa65191+_0xb81f8f,_0x4e87e9),this['_weaponSprite']['x']=_0x36968f,this['_weaponSprite']['y']=_0x4e87e9,this[_0x415ebd(0x23f)]['update']();},Sprite_Weapon[_0x2dcaec(0xaf6)][_0x2dcaec(0xb15)]=function(_0x4a9609){const _0x3efbd2=_0x2dcaec;this[_0x3efbd2(0x829)]=_0x4a9609,this[_0x3efbd2(0xb88)]=-0x1,this[_0x3efbd2(0xa72)]=0x0,this['loadBitmap'](),this[_0x3efbd2(0x80b)]();},Sprite_Actor['prototype']['updateTargetPosition']=function(){},Sprite_Actor[_0x2dcaec(0xaf6)]['stepForward']=function(){const _0x2244ff=_0x2dcaec,_0x11847d=VisuMZ[_0x2244ff(0xae3)][_0x2244ff(0xbeb)][_0x2244ff(0x709)],_0x3c09f8=_0x11847d[_0x2244ff(0xc3d)],_0x425076=_0x11847d['StepDistanceY'],_0x3bdf11=_0x11847d[_0x2244ff(0x1c4)];this['startMove'](-_0x3c09f8,-_0x425076,_0x3bdf11);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x5d2)]=Sprite_Actor[_0x2dcaec(0xaf6)]['updateFrame'],Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x80b)]=function(){const _0x5144a5=_0x2dcaec;this['hasStaticSvBattler']()?this[_0x5144a5(0x4e5)]():(this['applyFreezeMotionFrames'](),VisuMZ[_0x5144a5(0xae3)][_0x5144a5(0x5d2)][_0x5144a5(0x390)](this));},Sprite_Actor[_0x2dcaec(0xaf6)][_0x2dcaec(0x251)]=function(){const _0x5ece04=_0x2dcaec;if(this['_battler']&&this[_0x5ece04(0x386)][_0x5ece04(0x39d)]){const _0x28bef6=this['_battler'][_0x5ece04(0x39d)];this[_0x5ece04(0x20a)]=Sprite_Actor[_0x5ece04(0x51a)][_0x28bef6[_0x5ece04(0x5e0)]],this[_0x5ece04(0xa72)]=_0x28bef6['pattern'];const _0x46dd82=this['_weaponSprite'];_0x46dd82[_0x5ece04(0x88a)](_0x28bef6[_0x5ece04(0xaf7)],_0x28bef6[_0x5ece04(0x85c)]),this[_0x5ece04(0x681)]();}},Sprite_Weapon[_0x2dcaec(0xaf6)][_0x2dcaec(0x88a)]=function(_0x144895,_0x4e838e){const _0xed2aee=_0x2dcaec;this[_0xed2aee(0x829)]=_0x144895,this[_0xed2aee(0xb88)]=-Infinity,this[_0xed2aee(0xa72)]=_0x4e838e,this[_0xed2aee(0x9b5)](),this[_0xed2aee(0x80b)]();},Sprite_Enemy['prototype'][_0x2dcaec(0xaab)]=function(){const _0x4a4b6c=_0x2dcaec;Sprite_Battler[_0x4a4b6c(0xaf6)][_0x4a4b6c(0xaab)][_0x4a4b6c(0x390)](this),this[_0x4a4b6c(0x23d)]=null,this[_0x4a4b6c(0x464)]=![],this[_0x4a4b6c(0xa2a)]='',this[_0x4a4b6c(0x21e)]=0x0,this[_0x4a4b6c(0x6b7)]=null,this[_0x4a4b6c(0x264)]=0x0,this[_0x4a4b6c(0xbae)]=0x0,this[_0x4a4b6c(0x28e)](),this['createStateIconSprite']();},VisuMZ[_0x2dcaec(0xae3)]['Sprite_Enemy_update']=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x4d7136=_0x2dcaec;VisuMZ[_0x4d7136(0xae3)][_0x4d7136(0x2cd)][_0x4d7136(0x390)](this),this['updateShadowVisibility'](),this[_0x4d7136(0x645)]();},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x28e)]=function(){const _0x5e6f08=_0x2dcaec;this['_mainSprite']=new Sprite(),this['_mainSprite'][_0x5e6f08(0x156)]['x']=0.5,this[_0x5e6f08(0x4c4)][_0x5e6f08(0x156)]['y']=0x1,this[_0x5e6f08(0x83f)](this[_0x5e6f08(0x4c4)]),this[_0x5e6f08(0xc0d)]();},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x18b)]=function(){const _0x39ed58=_0x2dcaec;return this[_0x39ed58(0xa87)]||this['_mainSprite']||this;},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9b5)]=function(_0x1f9c94){const _0x2449aa=_0x2dcaec;this[_0x2449aa(0x4ca)]=new Bitmap(0x1,0x1);if(this['hasSvBattler']()){const _0xd837f=this['_enemy'][_0x2449aa(0x4b2)]();this[_0x2449aa(0x4ca)]=new Bitmap(_0xd837f[_0x2449aa(0x64b)],_0xd837f[_0x2449aa(0x75c)]),this[_0x2449aa(0x4c4)][_0x2449aa(0x4ca)]=new Bitmap(0x1,0x1);}else{if($gameSystem[_0x2449aa(0x334)]()){const _0x103eb5=ImageManager['loadSvEnemy'](_0x1f9c94);_0x103eb5[_0x2449aa(0x612)](this[_0x2449aa(0x909)][_0x2449aa(0x558)](this,_0x103eb5));}else{const _0x3b7ea3=ImageManager[_0x2449aa(0x9d4)](_0x1f9c94);_0x3b7ea3[_0x2449aa(0x612)](this[_0x2449aa(0x909)][_0x2449aa(0x558)](this,_0x3b7ea3));}}},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x909)]=function(_0x4abc46){const _0x52fa89=_0x2dcaec;this[_0x52fa89(0x4c4)]['bitmap']=_0x4abc46,this[_0x52fa89(0x4ca)]=new Bitmap(_0x4abc46[_0x52fa89(0x64b)],_0x4abc46[_0x52fa89(0x75c)]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc4c)]=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x888)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x888)]=function(_0x4b3754){const _0x2981c5=_0x2dcaec;this[_0x2981c5(0x4c4)]&&this[_0x2981c5(0x4c4)][_0x2981c5(0x888)](_0x4b3754);},VisuMZ[_0x2dcaec(0xae3)]['Sprite_Enemy_initVisibility']=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xc30)],Sprite_Enemy['prototype'][_0x2dcaec(0xc30)]=function(){const _0x550be0=_0x2dcaec;this[_0x550be0(0xbb4)]()?VisuMZ[_0x550be0(0xae3)]['Sprite_Enemy_initVisibility'][_0x550be0(0x390)](this):(this[_0x550be0(0x464)]=!this[_0x550be0(0x23d)]['isHidden'](),!this['_appeared']&&(this[_0x550be0(0x19d)]=0x0));},VisuMZ['BattleCore']['Sprite_Enemy_updateCollapse']=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c8)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c8)]=function(){const _0x223b18=_0x2dcaec;if(this[_0x223b18(0xbb4)]())VisuMZ[_0x223b18(0xae3)][_0x223b18(0x566)][_0x223b18(0x390)](this);},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x80b)]=function(){const _0x239ea0=_0x2dcaec;Sprite_Battler[_0x239ea0(0xaf6)]['updateFrame']['call'](this);const _0x103914=this[_0x239ea0(0x18b)]()||this;if(!_0x103914)return;!_0x103914[_0x239ea0(0x4ca)]&&(_0x103914[_0x239ea0(0x4ca)]=new Bitmap(this[_0x239ea0(0x64b)]||0x1,this[_0x239ea0(0x75c)]||0x1));if(this[_0x239ea0(0x6b7)]==='bossCollapse')this[_0x239ea0(0x4c4)][_0x239ea0(0x474)](0x0,0x0,this[_0x239ea0(0x4c4)]['width']||0x1,this[_0x239ea0(0x264)]);else{let _0x1b6281=0x1;if(_0x103914&&_0x103914[_0x239ea0(0x4ca)])_0x1b6281=_0x103914['bitmap'][_0x239ea0(0x64b)];let _0x1dafa3=0x1;if(this[_0x239ea0(0x4ca)])_0x1dafa3=this[_0x239ea0(0x4ca)]['height'];_0x103914[_0x239ea0(0x474)](0x0,0x0,_0x1b6281,_0x1dafa3);}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x62d)]=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x761)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x761)]=function(){const _0x48d119=_0x2dcaec;if(this[_0x48d119(0xbb4)]())VisuMZ[_0x48d119(0xae3)][_0x48d119(0x62d)][_0x48d119(0x390)](this);},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xaaa)]=function(){const _0x2d039a=_0x2dcaec;return Sprite_Battler['prototype'][_0x2d039a(0xaaa)][_0x2d039a(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0x440)]=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a2)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x7a2)]=function(){const _0x3befc2=_0x2dcaec;VisuMZ[_0x3befc2(0xae3)][_0x3befc2(0x440)][_0x3befc2(0x390)](this),this[_0x3befc2(0x3d6)]();},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x3d6)]=function(){const _0x1e19db=_0x2dcaec,_0x4c3b33=VisuMZ['BattleCore'][_0x1e19db(0xbeb)][_0x1e19db(0xc36)];if(_0x4c3b33['NameAttachStateIcon']&&!_0x4c3b33[_0x1e19db(0x3d3)]){this['_stateIconSprite']['opacity']=0x0;return;}this[_0x1e19db(0x2ee)]['x']=0x0,this['_stateIconSprite']['x']+=this[_0x1e19db(0x386)][_0x1e19db(0x8c1)]();let _0x1973f7=0x1;if(this[_0x1e19db(0x4ca)])_0x1973f7=this['bitmap'][_0x1e19db(0x75c)];this['_stateIconSprite']['y']=-_0x1973f7-this[_0x1e19db(0x2ee)][_0x1e19db(0x75c)]-0x4,this[_0x1e19db(0x2ee)]['y']+=this[_0x1e19db(0x386)][_0x1e19db(0x7a9)](),this[_0x1e19db(0x2ee)][_0x1e19db(0x8a3)]['x']=0x1/(this[_0x1e19db(0x8a3)]['x']||0.001),this[_0x1e19db(0x2ee)][_0x1e19db(0x8a3)]['y']=0x1/(this[_0x1e19db(0x8a3)]['y']||0.001),this['hasSvBattler']()&&(this[_0x1e19db(0x8b3)][_0x1e19db(0xa2f)][_0x1e19db(0x8a3)]['x']=-0x1/(this[_0x1e19db(0x8a3)]['x']||0.001),this[_0x1e19db(0x8b3)][_0x1e19db(0xa2f)][_0x1e19db(0x8a3)]['y']=0x1/(this['scale']['y']||0.001));},Sprite_Enemy['prototype']['updateNameTempVisibility']=function(){const _0x3d9df1=_0x2dcaec;this[_0x3d9df1(0x386)]&&this[_0x3d9df1(0x386)][_0x3d9df1(0x645)]();},VisuMZ['BattleCore']['Sprite_Enemy_setBattler']=Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)],Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)]=function(_0x15ac11){const _0xdf26b2=_0x2dcaec;VisuMZ[_0xdf26b2(0xae3)]['Sprite_Enemy_setBattler'][_0xdf26b2(0x390)](this,_0x15ac11),this[_0xdf26b2(0xb2c)](_0x15ac11);},Sprite_Enemy[_0x2dcaec(0xaf6)]['setSvBattlerSprite']=function(_0x26f4ff){const _0xcd0db3=_0x2dcaec;!this['_svBattlerSprite']&&(this[_0xcd0db3(0x8b3)]=new Sprite_SvEnemy(_0x26f4ff),this[_0xcd0db3(0xc0d)]()),this['_svBattlerSprite'][_0xcd0db3(0x9a3)](_0x26f4ff);},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x5c7)]=function(){const _0x3f0946=_0x2dcaec;return this[_0x3f0946(0x23d)]&&this[_0x3f0946(0x23d)][_0x3f0946(0x5c7)]();},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xbb4)]=function(){const _0x316092=_0x2dcaec;return this['hasSvBattler']()?this[_0x316092(0x23d)][_0x316092(0xbb4)]():!![];},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x5a4)]=function(){const _0x2e3f1f=_0x2dcaec;this['hasSvBattler']()&&this[_0x2e3f1f(0x8b3)][_0x2e3f1f(0x5a4)]();},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x3c5)]=function(_0x2ce4ff){const _0x8b9d33=_0x2dcaec;if(this[_0x8b9d33(0x5c7)]())this[_0x8b9d33(0x8b3)]['forceMotion'](_0x2ce4ff);},Sprite_Enemy[_0x2dcaec(0xaf6)]['forceWeaponAnimation']=function(_0x4fa806){const _0x74af9c=_0x2dcaec;if(this[_0x74af9c(0x5c7)]())this[_0x74af9c(0x8b3)][_0x74af9c(0x926)](_0x4fa806);},Sprite_Enemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xb06)]=function(){const _0x4317e1=_0x2dcaec,_0x498a8c=VisuMZ[_0x4317e1(0xae3)][_0x4317e1(0xbeb)][_0x4317e1(0x709)],_0x3ca790=_0x498a8c[_0x4317e1(0xc3d)],_0x88b729=_0x498a8c[_0x4317e1(0x756)],_0x5a2c1f=_0x498a8c[_0x4317e1(0x1c4)];this[_0x4317e1(0x84f)](_0x3ca790,_0x88b729,_0x5a2c1f);};function Sprite_SvEnemy(){const _0x148671=_0x2dcaec;this[_0x148671(0x970)](...arguments);}Sprite_SvEnemy[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Sprite_Actor[_0x2dcaec(0xaf6)]),Sprite_SvEnemy['prototype'][_0x2dcaec(0x61d)]=Sprite_SvEnemy,Sprite_SvEnemy[_0x2dcaec(0xaf6)]['initialize']=function(_0x39f0c5){const _0x55717b=_0x2dcaec;Sprite_Actor[_0x55717b(0xaf6)][_0x55717b(0x970)][_0x55717b(0x390)](this,_0x39f0c5),this['scale']['x']=-0x1,this[_0x55717b(0xa2f)][_0x55717b(0x8a3)]['x']=-0x1;},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x69c)]=function(){},Sprite_SvEnemy[_0x2dcaec(0xaf6)]['moveToStartPosition']=function(){},Sprite_SvEnemy['prototype'][_0x2dcaec(0x6cc)]=function(_0x424e34){},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x47d)]=function(){},Sprite_SvEnemy['prototype'][_0x2dcaec(0x382)]=function(){},Sprite_SvEnemy['prototype'][_0x2dcaec(0x7a2)]=function(){const _0x5d3946=_0x2dcaec;this[_0x5d3946(0xa2f)][_0x5d3946(0xaba)]=![];},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x99b)]=function(){const _0x4a59e7=_0x2dcaec;Sprite_Battler['prototype'][_0x4a59e7(0x99b)][_0x4a59e7(0x390)](this);const _0x5d1c51=this[_0x4a59e7(0xaf8)]['svBattlerName']();this[_0x4a59e7(0xa2a)]!==_0x5d1c51&&(this['_battlerName']=_0x5d1c51,this[_0x4a59e7(0x4c4)][_0x4a59e7(0x4ca)]=ImageManager[_0x4a59e7(0x4dc)](_0x5d1c51)),this['_mainSprite']&&this[_0x4a59e7(0x4c4)]['bitmap']&&this[_0x4a59e7(0x386)]&&(this[_0x4a59e7(0x4c4)]['bitmap'][_0x4a59e7(0xb61)]!==this[_0x4a59e7(0x386)]['battlerSmoothImage']()&&(this['_mainSprite'][_0x4a59e7(0x4ca)][_0x4a59e7(0xb61)]=this['_battler'][_0x4a59e7(0x1b0)]()));},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x67f)]=function(){},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x84f)]=function(_0x7f13bc,_0x3e5e4c,_0x579ad1){const _0x1e691a=_0x2dcaec;if(this[_0x1e691a(0x610)])this[_0x1e691a(0x610)][_0x1e691a(0x84f)](_0x7f13bc,_0x3e5e4c,_0x579ad1);},Sprite_SvEnemy[_0x2dcaec(0xaf6)]['refreshMotion']=function(){const _0x9a7193=_0x2dcaec,_0x317c57=this[_0x9a7193(0xaf8)];if(_0x317c57){const _0x563b6b=_0x317c57['stateMotionIndex']();if(_0x317c57[_0x9a7193(0x5f5)]()||_0x317c57[_0x9a7193(0x9bb)]())this[_0x9a7193(0x310)](_0x9a7193(0x4eb));else{if(_0x563b6b===0x3)this['startMotion']('dead');else{if(_0x563b6b===0x2)this[_0x9a7193(0x310)](_0x9a7193(0x9b3));else{if(_0x317c57[_0x9a7193(0x136)]())this[_0x9a7193(0x310)](_0x9a7193(0x944));else{if(_0x317c57['isGuard']()||_0x317c57[_0x9a7193(0x701)]())this[_0x9a7193(0x310)](_0x9a7193(0x64c));else{if(_0x563b6b===0x1)this[_0x9a7193(0x310)](_0x9a7193(0x4bf));else{if(_0x317c57[_0x9a7193(0x588)]())this[_0x9a7193(0x310)](_0x9a7193(0x868));else _0x317c57[_0x9a7193(0x568)]()?this['startMotion'](_0x317c57['svBattlerData']()[_0x9a7193(0xb41)]||_0x9a7193(0x4eb)):this[_0x9a7193(0x310)](_0x317c57[_0x9a7193(0x4b2)]()['motionIdle']||_0x9a7193(0x4eb));}}}}}}}},Sprite_SvEnemy['prototype'][_0x2dcaec(0x7c2)]=function(){const _0x28e2ab=_0x2dcaec;return this[_0x28e2ab(0x610)]?this[_0x28e2ab(0x610)][_0x28e2ab(0xb42)]===0x0&&this['parent'][_0x28e2ab(0xc25)]===0x0:!![];},Sprite_SvEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9f3)]=function(){},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x87e)]=Sprite_Animation[_0x2dcaec(0xaf6)][_0x2dcaec(0x3da)],Sprite_Animation[_0x2dcaec(0xaf6)][_0x2dcaec(0x3da)]=function(_0x1efde7){const _0xf1fdf7=_0x2dcaec;return _0x1efde7['_distortionSprite']?this[_0xf1fdf7(0xa1e)](_0x1efde7):VisuMZ[_0xf1fdf7(0xae3)]['Sprite_Animation_targetSpritePosition'][_0xf1fdf7(0x390)](this,_0x1efde7);},Sprite_Animation[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1e)]=function(_0x1ab0ac){const _0x5d7d87=_0x2dcaec;let _0x2163ba=_0x1ab0ac['x'],_0x2e4459=_0x1ab0ac['y'],_0x332f9c=_0x1ab0ac[_0x5d7d87(0x75c)],_0x59f043=_0x1ab0ac[_0x5d7d87(0xa87)][_0x5d7d87(0x8a3)]['y'];_0x1ab0ac['x']=_0x1ab0ac['_baseX']+_0x1ab0ac['extraPositionX'](),_0x1ab0ac['y']=_0x1ab0ac[_0x5d7d87(0xa19)]+_0x1ab0ac[_0x5d7d87(0x88c)](),_0x1ab0ac[_0x5d7d87(0x75c)]*=_0x59f043;let _0x2fe5f8=VisuMZ[_0x5d7d87(0xae3)][_0x5d7d87(0x87e)][_0x5d7d87(0x390)](this,_0x1ab0ac);return _0x1ab0ac['x']=_0x2163ba,_0x1ab0ac['y']=_0x2e4459,_0x1ab0ac[_0x5d7d87(0x75c)]=_0x332f9c,_0x2fe5f8;},Sprite_Animation[_0x2dcaec(0xaf6)][_0x2dcaec(0x1d1)]=function(){const _0x15c6a6=_0x2dcaec;if(this['_isProjectile'])return![];return this[_0x15c6a6(0x784)]&&this[_0x15c6a6(0x784)]['name']&&this[_0x15c6a6(0x784)][_0x15c6a6(0x321)]['match'](/<UNDER>/gi);},VisuMZ[_0x2dcaec(0xae3)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV['prototype'][_0x2dcaec(0x906)],Sprite_AnimationMV['prototype']['updatePosition']=function(){const _0x32f0ce=_0x2dcaec;VisuMZ[_0x32f0ce(0xae3)]['Sprite_AnimationMV_updatePosition'][_0x32f0ce(0x390)](this);if(!SceneManager[_0x32f0ce(0xa2b)]())return;if(this[_0x32f0ce(0x784)][_0x32f0ce(0x34f)]===0x3)this['x']=Math['round'](Graphics['boxWidth']/0x2),this['y']=Math[_0x32f0ce(0x976)](Graphics[_0x32f0ce(0xab4)]/0x2);else{if(this['battleStatusSprite'])return;}},Sprite_AnimationMV[_0x2dcaec(0xaf6)][_0x2dcaec(0x1d1)]=function(){const _0x50a7c4=_0x2dcaec;if(this[_0x50a7c4(0x20b)])return![];return this[_0x50a7c4(0x784)]&&this[_0x50a7c4(0x784)][_0x50a7c4(0x321)]&&this[_0x50a7c4(0x784)][_0x50a7c4(0x321)][_0x50a7c4(0xb9e)](/<UNDER>/gi);},Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0xb05)]=function(_0x1f3299){const _0x65ce5a=_0x2dcaec,_0x2510ef=_0x1f3299['getNextDamagePopup']()||_0x1f3299[_0x65ce5a(0x1b5)]();if(_0x2510ef[_0x65ce5a(0x2ef)]||_0x2510ef['evaded'])this[_0x65ce5a(0x88b)]=0x0,this[_0x65ce5a(0x87f)]();else{if(_0x2510ef['hpAffected'])this[_0x65ce5a(0x88b)]=_0x2510ef['hpDamage']>=0x0?0x0:0x1,this[_0x65ce5a(0x33e)](_0x2510ef[_0x65ce5a(0x414)]);else _0x1f3299[_0x65ce5a(0x2b5)]()&&_0x2510ef[_0x65ce5a(0x790)]!==0x0&&(this[_0x65ce5a(0x88b)]=_0x2510ef[_0x65ce5a(0x790)]>=0x0?0x2:0x3,this['createDigits'](_0x2510ef[_0x65ce5a(0x790)]));}_0x2510ef[_0x65ce5a(0x73b)]&&this[_0x65ce5a(0xc6f)]();},Sprite_Damage[_0x2dcaec(0xaf6)]['setup']=function(_0x42fd23){},Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0x33e)]=function(_0x34770e){const _0x148bd3=_0x2dcaec;let _0x4d3c94=this[_0x148bd3(0xa31)](_0x34770e);const _0x51c329=this['fontSize'](),_0x2bc1cf=Math['floor'](_0x51c329*0.75);for(let _0x47212f=0x0;_0x47212f<_0x4d3c94[_0x148bd3(0x7ce)];_0x47212f++){const _0x26f657=this[_0x148bd3(0x6f4)](_0x2bc1cf,_0x51c329);_0x26f657[_0x148bd3(0x4ca)][_0x148bd3(0x225)](_0x4d3c94[_0x47212f],0x0,0x0,_0x2bc1cf,_0x51c329,'center'),_0x26f657['x']=(_0x47212f-(_0x4d3c94['length']-0x1)/0x2)*_0x2bc1cf,_0x26f657['dy']=-_0x47212f;}},Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0xa31)]=function(_0x262037){const _0x48e545=_0x2dcaec;let _0x1933e9=Math[_0x48e545(0x2ac)](_0x262037)[_0x48e545(0xba2)]();this[_0x48e545(0x50b)]()&&(_0x1933e9=VisuMZ[_0x48e545(0x86f)](_0x1933e9));const _0x29fe07=VisuMZ[_0x48e545(0xae3)]['Settings'][_0x48e545(0x53c)];let _0x1dee75='',_0x31b01c='';switch(this[_0x48e545(0x88b)]){case 0x0:_0x1dee75=_0x29fe07['hpDamageFmt']||_0x48e545(0x7e3),_0x31b01c=TextManager['hp'];if(_0x262037===0x0)_0x1dee75='%1';break;case 0x1:_0x1dee75=_0x29fe07['hpHealingFmt']||'+%1',_0x31b01c=TextManager['hp'];break;case 0x2:_0x1dee75=_0x29fe07[_0x48e545(0xc78)]||_0x48e545(0x351),_0x31b01c=TextManager['mp'];break;case 0x3:_0x1dee75=_0x29fe07['mpHealingFmt']||_0x48e545(0x202),_0x31b01c=TextManager['mp'];break;}return _0x1dee75[_0x48e545(0xb60)](_0x1933e9,_0x31b01c)[_0x48e545(0x651)]();},Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0x50b)]=function(){const _0x44eecd=_0x2dcaec;return Imported[_0x44eecd(0x6d3)]?VisuMZ[_0x44eecd(0x785)][_0x44eecd(0xbeb)][_0x44eecd(0xb12)][_0x44eecd(0x69f)]:![];},Sprite_Damage['prototype'][_0x2dcaec(0xc6f)]=function(){const _0x2edbc4=_0x2dcaec,_0x1be08f=VisuMZ[_0x2edbc4(0xae3)]['Settings'][_0x2edbc4(0x53c)];_0x1be08f[_0x2edbc4(0x21a)]=_0x1be08f['CriticalColor']||[0x0,0x0,0x0,0x0],this['_flashColor']=_0x1be08f[_0x2edbc4(0x21a)][_0x2edbc4(0xa5e)](0x0),this[_0x2edbc4(0x674)]=_0x1be08f['CriticalDuration']||0x1;},Sprite_Damage['prototype'][_0x2dcaec(0x495)]=function(_0x13a22b,_0x59a5df){const _0x2688c1=_0x2dcaec;this[_0x2688c1(0x875)]=_0x59a5df[_0x2688c1(0x4fa)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx[_0x2688c1(0xa12)](this[_0x2688c1(0x875)]),this[_0x2688c1(0x674)]=_0x59a5df[_0x2688c1(0x7aa)]||0x0;const _0x214c27=this[_0x2688c1(0x950)](),_0x547cbf=Math[_0x2688c1(0x6eb)](_0x214c27*0x1e),_0x4073ef=this[_0x2688c1(0x6f4)](_0x547cbf,_0x214c27);_0x4073ef[_0x2688c1(0x4ca)][_0x2688c1(0x33d)]=ColorManager[_0x2688c1(0x49e)](_0x59a5df[_0x2688c1(0x33d)]),_0x4073ef[_0x2688c1(0x4ca)]['drawText'](_0x13a22b,0x0,0x0,_0x547cbf,_0x214c27,_0x2688c1(0xc43)),_0x4073ef['dy']=0x0;},Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0x411)]=function(_0x175119,_0x25c42d,_0x2d322a){const _0x2cead5=_0x2dcaec,_0x3d70bb=Math['max'](this['fontSize'](),ImageManager[_0x2cead5(0x167)]),_0xfad75e=Math['floor'](_0x3d70bb*0x1e),_0x37da40=this[_0x2cead5(0x6f4)](_0xfad75e,_0x3d70bb),_0x53f884=ImageManager[_0x2cead5(0x65c)]/0x2,_0x46455c=_0x37da40[_0x2cead5(0x4ca)][_0x2cead5(0x655)](_0x25c42d+'\x20');_0x37da40[_0x2cead5(0x4ca)][_0x2cead5(0x33d)]=ColorManager[_0x2cead5(0x49e)](_0x2d322a[_0x2cead5(0x33d)]),_0x37da40[_0x2cead5(0x4ca)]['drawText'](_0x25c42d,_0x53f884,0x0,_0xfad75e-_0x53f884,_0x3d70bb,_0x2cead5(0xc43));const _0x5e2c2a=Math['round']((_0x3d70bb-ImageManager[_0x2cead5(0x167)])/0x2),_0x37d7a6=_0xfad75e/0x2-ImageManager[_0x2cead5(0x65c)]-_0x46455c/0x2+_0x53f884/0x2,_0x1bde1a=ImageManager[_0x2cead5(0xa82)]('IconSet'),_0x300389=ImageManager[_0x2cead5(0x65c)],_0x2c0ea5=ImageManager[_0x2cead5(0x167)],_0x5750b2=_0x175119%0x10*_0x300389,_0x2f842b=Math[_0x2cead5(0x6eb)](_0x175119/0x10)*_0x2c0ea5;_0x37da40[_0x2cead5(0x4ca)][_0x2cead5(0x66f)](_0x1bde1a,_0x5750b2,_0x2f842b,_0x300389,_0x2c0ea5,_0x37d7a6,_0x5e2c2a),this['_flashColor']=_0x2d322a[_0x2cead5(0x4fa)]||[0x0,0x0,0x0,0x0],this[_0x2cead5(0x875)]=JsonEx[_0x2cead5(0xa12)](this['_flashColor']),this[_0x2cead5(0x674)]=_0x2d322a[_0x2cead5(0x7aa)]||0x0,_0x37da40['dy']=0x0,_0x2d322a[_0x2cead5(0xab5)]&&(_0x37da40['x']+=_0x2d322a[_0x2cead5(0xab5)]),_0x2d322a[_0x2cead5(0xb7b)]&&(_0x37da40['dy']+=_0x2d322a[_0x2cead5(0xb7b)]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbe3)]=Sprite_Damage['prototype'][_0x2dcaec(0x6f4)],Sprite_Damage[_0x2dcaec(0xaf6)][_0x2dcaec(0x6f4)]=function(_0x96fd6f,_0x469a6f){const _0x409f0f=_0x2dcaec;return _0x469a6f=Math[_0x409f0f(0x976)](_0x469a6f*1.2),VisuMZ[_0x409f0f(0xae3)][_0x409f0f(0xbe3)][_0x409f0f(0x390)](this,_0x96fd6f,_0x469a6f);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2b4)]=Sprite_StateIcon[_0x2dcaec(0xaf6)][_0x2dcaec(0x80b)],Sprite_StateIcon['prototype'][_0x2dcaec(0x80b)]=function(){const _0x334746=_0x2dcaec;VisuMZ['BattleCore']['Sprite_StateIcon_updateFrame']['call'](this),this[_0x334746(0x19d)]=this[_0x334746(0x1ff)]>0x0?0xff:0x0;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9a2)]=Sprite_Weapon[_0x2dcaec(0xaf6)][_0x2dcaec(0x9b5)],Sprite_Weapon['prototype'][_0x2dcaec(0x9b5)]=function(){const _0x57fa16=_0x2dcaec;VisuMZ[_0x57fa16(0xae3)][_0x57fa16(0x9a2)][_0x57fa16(0x390)](this),this[_0x57fa16(0x4ca)]&&(this[_0x57fa16(0x4ca)]['smooth']=VisuMZ[_0x57fa16(0xae3)]['Settings'][_0x57fa16(0x46b)][_0x57fa16(0xacf)]);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc41)]=Sprite_Gauge[_0x2dcaec(0xaf6)][_0x2dcaec(0x685)],Sprite_Gauge[_0x2dcaec(0xaf6)]['smoothness']=function(){const _0x44848f=_0x2dcaec;return this['_statusType']!=='time'?VisuMZ[_0x44848f(0xae3)][_0x44848f(0xbeb)][_0x44848f(0x2bb)][_0x44848f(0x6e7)]??0x14:VisuMZ[_0x44848f(0xae3)][_0x44848f(0xc41)][_0x44848f(0x390)](this);};function Sprite_GaugeRate(){this['initialize'](...arguments);}Sprite_GaugeRate['prototype']=Object[_0x2dcaec(0x2f5)](Sprite_Gauge['prototype']),Sprite_GaugeRate['prototype'][_0x2dcaec(0x61d)]=Sprite_GaugeRate,Sprite_GaugeRate[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(){const _0x10793b=_0x2dcaec;Sprite_Gauge[_0x10793b(0xaf6)][_0x10793b(0x970)][_0x10793b(0x390)](this),this['_updateTargetValue']=![];},Sprite_GaugeRate['prototype']['updateTargetValue']=function(_0x4f882d,_0x524c6d){const _0x3820c0=_0x2dcaec;this[_0x3820c0(0x58e)]=!![],Sprite_Gauge[_0x3820c0(0xaf6)][_0x3820c0(0x8f8)]['call'](this,_0x4f882d,_0x524c6d),this['_updateTargetValue']=![];},Sprite_GaugeRate[_0x2dcaec(0xaf6)]['currentValue']=function(){const _0x383b58=_0x2dcaec;if(this[_0x383b58(0x58e)]){const _0x17ea9b=Sprite_Gauge['prototype']['currentValue'][_0x383b58(0x390)](this),_0x3c39b9=this[_0x383b58(0x4ff)]();if(_0x3c39b9<=0x0)return _0x383b58(0x7c9);return Math[_0x383b58(0x6eb)](_0x17ea9b/_0x3c39b9*0x64)+'%';}else return Sprite_Gauge['prototype'][_0x383b58(0x503)][_0x383b58(0x390)](this);},Sprite_GaugeRate[_0x2dcaec(0xaf6)][_0x2dcaec(0x15a)]=function(){const _0x258138=_0x2dcaec,_0x45087b=Sprite_Gauge[_0x258138(0xaf6)][_0x258138(0x503)][_0x258138(0x390)](this),_0xd3e68c=this[_0x258138(0x4ff)]();if(_0xd3e68c<=0x0)return _0x258138(0x7c9);return Math[_0x258138(0x6eb)](_0x45087b/_0xd3e68c*0x64)+'%';},Sprite_GaugeRate[_0x2dcaec(0xaf6)][_0x2dcaec(0x60e)]=function(){const _0x43986f=_0x2dcaec;if(this[_0x43986f(0x4ff)]()<=0x0)return 0x1;return Sprite_Gauge[_0x43986f(0xaf6)][_0x43986f(0x60e)]['call'](this);},Sprite_GaugeRate[_0x2dcaec(0xaf6)][_0x2dcaec(0x3f8)]=function(){const _0x2a481a=_0x2dcaec;if(this[_0x2a481a(0x4ff)]()<=0x0)return ColorManager[_0x2a481a(0x831)]();return Sprite_Gauge['prototype'][_0x2a481a(0x3f8)][_0x2a481a(0x390)](this);},Sprite_GaugeRate['prototype'][_0x2dcaec(0x4b1)]=function(){const _0x564ed7=_0x2dcaec;this['_statusType']==='mp'&&this[_0x564ed7(0x4ff)]()<=0x0&&($gameTemp[_0x564ed7(0x4cd)]=!![]),Sprite_Gauge['prototype'][_0x564ed7(0x4b1)][_0x564ed7(0x390)](this),$gameTemp['redrawForGaugeRate']=undefined;},VisuMZ[_0x2dcaec(0xae3)]['ColorManager_mpColor']=ColorManager[_0x2dcaec(0xaa0)],ColorManager['mpColor']=function(_0x1eaa49){const _0x5d4f02=_0x2dcaec;if($gameTemp[_0x5d4f02(0x4cd)])return ColorManager['normalColor']();return VisuMZ[_0x5d4f02(0xae3)][_0x5d4f02(0x82d)][_0x5d4f02(0x390)](this,_0x1eaa49);};function Sprite_HpGauge(){const _0x4aa3e3=_0x2dcaec;this[_0x4aa3e3(0x970)](...arguments);}Sprite_HpGauge[_0x2dcaec(0xaf6)]=Object['create'](Sprite_Gauge['prototype']),Sprite_HpGauge[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Sprite_HpGauge,Sprite_HpGauge[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(){const _0x4b2e6c=_0x2dcaec;Sprite_Gauge[_0x4b2e6c(0xaf6)]['initialize'][_0x4b2e6c(0x390)](this);},Sprite_HpGauge[_0x2dcaec(0xaf6)][_0x2dcaec(0x9be)]=function(){return 0x0;},Sprite_HpGauge[_0x2dcaec(0xaf6)]['redraw']=function(){const _0x1e585c=_0x2dcaec;this[_0x1e585c(0x4ca)][_0x1e585c(0xb7e)]();const _0x24c3a2=this[_0x1e585c(0x503)]();!isNaN(_0x24c3a2)&&this[_0x1e585c(0x605)]();};function Sprite_EnemyName(){const _0x5fa8c5=_0x2dcaec;this[_0x5fa8c5(0x970)](...arguments);}Sprite_EnemyName[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Sprite_Name['prototype']),Sprite_EnemyName[_0x2dcaec(0xaf6)]['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x2dcaec(0xaf6)]['initialize']=function(){const _0x3b734e=_0x2dcaec;Sprite_Name[_0x3b734e(0xaf6)][_0x3b734e(0x970)]['call'](this),this[_0x3b734e(0x70c)]();},Sprite_EnemyName[_0x2dcaec(0xaf6)]['initMembers']=function(){const _0x53ee5f=_0x2dcaec;Sprite_Name['prototype'][_0x53ee5f(0xaab)][_0x53ee5f(0x390)](this),this[_0x53ee5f(0x19d)]=0x0,this[_0x53ee5f(0x2d7)]=null,this[_0x53ee5f(0x156)]['x']=0.5,this[_0x53ee5f(0x156)]['y']=0x0;},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x70c)]=function(){const _0x5c8e61=_0x2dcaec;VisuMZ[_0x5c8e61(0xae3)][_0x5c8e61(0xbeb)]['Enemy'][_0x5c8e61(0x642)]&&(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x5c8e61(0x83f)](this[_0x5c8e61(0x2ee)]));},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x207)]=function(){const _0x5d226e=_0x2dcaec;return Graphics[_0x5d226e(0x555)];},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x901)]=function(){const _0x19c0d8=_0x2dcaec;return this[_0x19c0d8(0x273)]=this[_0x19c0d8(0x273)]||Window_Base['prototype'][_0x19c0d8(0x90d)]()||0x24,this[_0x19c0d8(0x273)]*0x4;},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x950)]=function(){const _0x59c678=_0x2dcaec;return VisuMZ[_0x59c678(0xae3)][_0x59c678(0xbeb)][_0x59c678(0xc36)][_0x59c678(0x352)]||$gameSystem[_0x59c678(0x814)]();},Sprite_EnemyName['prototype']['linkSprite']=function(_0x4bad36){const _0x3d8a53=_0x2dcaec;this[_0x3d8a53(0x2d7)]=_0x4bad36;},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x2cc66f=_0x2dcaec;Sprite_Name[_0x2cc66f(0xaf6)][_0x2cc66f(0x23a)]['call'](this),this[_0x2cc66f(0xbc1)](),this[_0x2cc66f(0x906)](),this[_0x2cc66f(0x52a)](),this['updateOpacity']();},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x4b1)]=function(){const _0x4d7396=_0x2dcaec;this[_0x4d7396(0x4bc)]=undefined;const _0x357910=this[_0x4d7396(0x321)](),_0x558738=this['bitmapWidth'](),_0x2fefa0=Window_Base['prototype'][_0x4d7396(0x90d)]();this[_0x4d7396(0x711)](),this[_0x4d7396(0x4ca)][_0x4d7396(0xb7e)](),this[_0x4d7396(0x4ca)][_0x4d7396(0x225)](_0x357910,0x0,0x0,_0x558738,_0x2fefa0,_0x4d7396(0xc43));},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc1)]=function(){const _0x3fe949=_0x2dcaec;if(!this[_0x3fe949(0x2d7)])return;this[_0x3fe949(0x386)]!==this[_0x3fe949(0x2d7)][_0x3fe949(0x386)]&&this['setup'](this[_0x3fe949(0x2d7)][_0x3fe949(0x386)]);},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x906)]=function(){const _0x187a8f=_0x2dcaec;if(!this['_linkedSprite'])return;this[_0x187a8f(0x273)]=this[_0x187a8f(0x273)]||Window_Base[_0x187a8f(0xaf6)][_0x187a8f(0x90d)](),this['x']=Math['round'](this[_0x187a8f(0x2d7)][_0x187a8f(0xae9)]),this['y']=Math[_0x187a8f(0x976)](this[_0x187a8f(0x2d7)][_0x187a8f(0xa19)]-this[_0x187a8f(0x273)]*0.5);const _0x3ff90e=VisuMZ[_0x187a8f(0xae3)][_0x187a8f(0xbeb)][_0x187a8f(0xc36)];this['x']+=Math['round'](_0x3ff90e['NameOffsetX']||0x0),this['y']+=Math[_0x187a8f(0x976)](_0x3ff90e[_0x187a8f(0xa07)]||0x0);},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x52a)]=function(){this['updateStateIconSprite']();},Sprite_EnemyName['prototype'][_0x2dcaec(0x73d)]=function(){const _0x2689be=_0x2dcaec;if(!this['_stateIconSprite'])return;this[_0x2689be(0x386)]!==this[_0x2689be(0x2ee)][_0x2689be(0x386)]&&this[_0x2689be(0x2ee)][_0x2689be(0xb15)](this['_battler']);const _0x343e4f=this[_0x2689be(0x5f2)]();this[_0x2689be(0x273)]=this[_0x2689be(0x273)]||Window_Base[_0x2689be(0xaf6)][_0x2689be(0x90d)](),this['_stateIconSprite']['x']=Math[_0x2689be(0x976)]((_0x343e4f+ImageManager[_0x2689be(0x65c)])/0x2)+0x8,this[_0x2689be(0x2ee)]['y']=this['_lineHeight']/0x2;const _0x4d7895=VisuMZ['BattleCore'][_0x2689be(0xbeb)][_0x2689be(0xc36)];this[_0x2689be(0x2ee)]['x']+=_0x4d7895[_0x2689be(0x5fb)]||0x0,this['_stateIconSprite']['y']+=_0x4d7895[_0x2689be(0x16a)]||0x0;},Sprite_EnemyName['prototype'][_0x2dcaec(0x5af)]=function(){const _0x1033c0=_0x2dcaec,_0x33481f=this[_0x1033c0(0x3a3)]();if(_0x33481f&&this[_0x1033c0(0x19d)]<0xff)this[_0x1033c0(0x19d)]+=0x10;else!_0x33481f&&this['opacity']>0x0&&(this['opacity']-=0x10);},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x3a3)]=function(){const _0x11b8da=_0x2dcaec;if(this[_0x11b8da(0x467)]())return![];else{if(!this[_0x11b8da(0x386)])return![];else{if(!this[_0x11b8da(0x386)]['isAppeared']())return![];else{if(this[_0x11b8da(0x77b)]())return!![];else{if(this[_0x11b8da(0x386)][_0x11b8da(0x1f5)]())return![];else{if(this[_0x11b8da(0x305)]())return!![];else{if(this[_0x11b8da(0x967)]())return!![];else{if(this[_0x11b8da(0xbfc)]())return!![];else{if(this['isIncludedInEnemyWindow']())return!![];else{if(this[_0x11b8da(0x19d)]>0x0)return![];}}}}}}}}}},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x77b)]=function(){const _0x3e24c0=_0x2dcaec;return this['_battler']&&this['_battler'][_0x3e24c0(0x678)]();},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x467)]=function(){const _0xdf0a23=_0x2dcaec;return VisuMZ[_0xdf0a23(0xae3)][_0xdf0a23(0xbeb)][_0xdf0a23(0xc36)][_0xdf0a23(0x7b2)];},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x305)]=function(){const _0x1db699=_0x2dcaec;if(!VisuMZ[_0x1db699(0xae3)][_0x1db699(0xbeb)][_0x1db699(0xc36)][_0x1db699(0x38a)])return![];if(BattleManager[_0x1db699(0x5f5)]()&&!BattleManager[_0x1db699(0x9b0)]())return![];return this[_0x1db699(0x386)]&&BattleManager[_0x1db699(0x173)]&&BattleManager[_0x1db699(0xa28)][_0x1db699(0x7f2)](this[_0x1db699(0x386)]);},Sprite_EnemyName['prototype'][_0x2dcaec(0x967)]=function(){return![];},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0xbfc)]=function(){const _0x59a410=_0x2dcaec;return VisuMZ[_0x59a410(0xae3)]['Settings']['Enemy']['NameAlwaysVisible'];},Sprite_EnemyName['prototype'][_0x2dcaec(0xbb1)]=function(){const _0x148f54=_0x2dcaec;return VisuMZ[_0x148f54(0xae3)][_0x148f54(0xbeb)][_0x148f54(0xc36)][_0x148f54(0x608)]?this['_battler'][_0x148f54(0x72c)]():SceneManager[_0x148f54(0x496)][_0x148f54(0x6a2)]&&SceneManager[_0x148f54(0x496)][_0x148f54(0x6a2)]['active']&&SceneManager[_0x148f54(0x496)]['_enemyWindow'][_0x148f54(0x250)][_0x148f54(0x7f2)](this[_0x148f54(0x386)]);},Sprite_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x5f2)]=function(){const _0x403235=_0x2dcaec;if(!this[_0x403235(0x386)])return 0x0;if(this['_cacheTextWidth'])return this[_0x403235(0x4bc)];const _0x1aabab=this[_0x403235(0x321)]();return this[_0x403235(0x711)](),this[_0x403235(0x4bc)]=this[_0x403235(0x4ca)]['measureTextWidth'](_0x1aabab)||0x1,this[_0x403235(0x4bc)];},VisuMZ['BattleCore']['Sprite_Battleback_adjustPosition']=Sprite_Battleback[_0x2dcaec(0xaf6)][_0x2dcaec(0x683)],Sprite_Battleback[_0x2dcaec(0xaf6)]['adjustPosition']=function(){const _0x2ad96f=_0x2dcaec,_0x3942fc=VisuMZ[_0x2ad96f(0xae3)][_0x2ad96f(0xbeb)]['BattlebackScale'];if(!_0x3942fc)return VisuMZ[_0x2ad96f(0xae3)]['Sprite_Battleback_adjustPosition'][_0x2ad96f(0x390)](this);const _0x28c473=String(_0x3942fc['DefaultStyle'])||'MZ';switch(_0x28c473){case'MZ':VisuMZ[_0x2ad96f(0xae3)]['Sprite_Battleback_adjustPosition'][_0x2ad96f(0x390)](this);break;case _0x2ad96f(0x8ec):this['adjustPosition_1for1']();break;case _0x2ad96f(0x387):this[_0x2ad96f(0x9d6)]();break;case'ScaleDown':this['adjustPosition_ScaleDown']();break;case _0x2ad96f(0x394):this[_0x2ad96f(0x64f)]();break;}},Sprite_Battleback[_0x2dcaec(0xaf6)][_0x2dcaec(0x631)]=function(){const _0x49d11d=_0x2dcaec,_0x5907be=VisuMZ[_0x49d11d(0xae3)][_0x49d11d(0xbeb)][_0x49d11d(0x4af)];if(_0x5907be&&_0x5907be[_0x49d11d(0x894)])return _0x5907be[_0x49d11d(0x894)]['call'](this);this[_0x49d11d(0x64b)]=Graphics[_0x49d11d(0x64b)],this['height']=Graphics[_0x49d11d(0x75c)];const _0x5bba62=0x1;this[_0x49d11d(0x8a3)]['x']=_0x5bba62,this[_0x49d11d(0x8a3)]['y']=_0x5bba62,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d6)]=function(){const _0x526a7c=_0x2dcaec,_0x30fd5d=VisuMZ[_0x526a7c(0xae3)][_0x526a7c(0xbeb)][_0x526a7c(0x4af)];if(_0x30fd5d&&_0x30fd5d[_0x526a7c(0x7b8)])return _0x30fd5d[_0x526a7c(0x7b8)][_0x526a7c(0x390)](this);this['width']=Graphics[_0x526a7c(0x64b)],this[_0x526a7c(0x75c)]=Graphics[_0x526a7c(0x75c)];const _0x5eef8c=this[_0x526a7c(0x64b)]/this[_0x526a7c(0x4ca)][_0x526a7c(0x64b)],_0x49a92c=this[_0x526a7c(0x75c)]/this['bitmap']['height'],_0x133fb9=Math[_0x526a7c(0x959)](_0x5eef8c,_0x49a92c);this['scale']['x']=_0x133fb9,this[_0x526a7c(0x8a3)]['y']=_0x133fb9,this['x']=(Graphics[_0x526a7c(0x64b)]-this['width'])/0x2,this['y']=Graphics[_0x526a7c(0x75c)]-this[_0x526a7c(0x75c)];},Sprite_Battleback['prototype'][_0x2dcaec(0xa51)]=function(){const _0x3c5a2e=_0x2dcaec,_0x3eae82=VisuMZ[_0x3c5a2e(0xae3)][_0x3c5a2e(0xbeb)][_0x3c5a2e(0x4af)];if(_0x3eae82&&_0x3eae82['jsScaleDown'])return _0x3eae82[_0x3c5a2e(0xb2b)][_0x3c5a2e(0x390)](this);this[_0x3c5a2e(0x64b)]=Graphics[_0x3c5a2e(0x64b)],this[_0x3c5a2e(0x75c)]=Graphics[_0x3c5a2e(0x75c)];const _0x1b6424=Math[_0x3c5a2e(0xaf1)](0x1,this['width']/this[_0x3c5a2e(0x4ca)][_0x3c5a2e(0x64b)]),_0x274e2b=Math[_0x3c5a2e(0xaf1)](0x1,this[_0x3c5a2e(0x75c)]/this[_0x3c5a2e(0x4ca)][_0x3c5a2e(0x75c)]),_0x52c2fc=Math[_0x3c5a2e(0x959)](_0x1b6424,_0x274e2b);this[_0x3c5a2e(0x8a3)]['x']=_0x52c2fc,this[_0x3c5a2e(0x8a3)]['y']=_0x52c2fc,this['x']=(Graphics[_0x3c5a2e(0x64b)]-this[_0x3c5a2e(0x64b)])/0x2,this['y']=Graphics[_0x3c5a2e(0x75c)]-this[_0x3c5a2e(0x75c)];},Sprite_Battleback[_0x2dcaec(0xaf6)][_0x2dcaec(0x64f)]=function(){const _0x23c0af=_0x2dcaec,_0x11da74=VisuMZ['BattleCore'][_0x23c0af(0xbeb)][_0x23c0af(0x4af)];if(_0x11da74&&_0x11da74['jsScaleUp'])return _0x11da74[_0x23c0af(0x93a)][_0x23c0af(0x390)](this);this[_0x23c0af(0x64b)]=Graphics[_0x23c0af(0x64b)],this[_0x23c0af(0x75c)]=Graphics['height'];const _0x54de83=Math[_0x23c0af(0x959)](0x1,this[_0x23c0af(0x64b)]/this[_0x23c0af(0x4ca)][_0x23c0af(0x64b)]),_0x39c6a1=Math[_0x23c0af(0x959)](0x1,this['height']/this[_0x23c0af(0x4ca)][_0x23c0af(0x75c)]),_0x2318f7=Math[_0x23c0af(0x959)](_0x54de83,_0x39c6a1);this[_0x23c0af(0x8a3)]['x']=_0x2318f7,this[_0x23c0af(0x8a3)]['y']=_0x2318f7,this['x']=(Graphics[_0x23c0af(0x64b)]-this[_0x23c0af(0x64b)])/0x2,this['y']=Graphics[_0x23c0af(0x75c)]-this[_0x23c0af(0x75c)];},Spriteset_Battle['ANTI_TINT_UI']=VisuMZ[_0x2dcaec(0xae3)]['Settings']['BattleLayout']['AntiTintUiElements']??!![],Spriteset_Battle['prototype']['isFlipped']=function(){const _0x1c7cce=_0x2dcaec;if(!$gameSystem[_0x1c7cce(0x334)]())return![];return![];},Spriteset_Battle['prototype'][_0x2dcaec(0x17d)]=function(){return 0x0;},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa1d)]=function(){return 0x0;},VisuMZ[_0x2dcaec(0xae3)]['Spriteset_Battle_createLowerLayer']=Spriteset_Battle['prototype'][_0x2dcaec(0xa9a)],Spriteset_Battle['prototype'][_0x2dcaec(0xa9a)]=function(){const _0x5cf172=_0x2dcaec;VisuMZ[_0x5cf172(0xae3)][_0x5cf172(0x7c8)][_0x5cf172(0x390)](this),this[_0x5cf172(0x5d9)](),this[_0x5cf172(0x5ce)]();},VisuMZ[_0x2dcaec(0xae3)]['Spriteset_Battle_update']=Spriteset_Battle['prototype']['update'],Spriteset_Battle[_0x2dcaec(0xaf6)]['update']=function(){const _0x1ab4fe=_0x2dcaec;VisuMZ['BattleCore']['Spriteset_Battle_update']['call'](this),this[_0x1ab4fe(0x92e)](),this[_0x1ab4fe(0x32e)](),this[_0x1ab4fe(0x42d)](),this[_0x1ab4fe(0x5f8)]();},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d9)]=function(){const _0x57321f=_0x2dcaec;this['_weather']=new Weather(),this[_0x57321f(0x313)][_0x57321f(0x83f)](this[_0x57321f(0x6e5)]);},Spriteset_Battle[_0x2dcaec(0xaf6)]['updateWeather']=function(){const _0x557c2d=_0x2dcaec;this[_0x557c2d(0x6e5)][_0x557c2d(0x134)]=$gameScreen[_0x557c2d(0x89a)](),this[_0x557c2d(0x6e5)]['power']=$gameScreen[_0x557c2d(0x8f9)]();},Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x8aa)]=function(_0x2e77f5){const _0x55ffe5=_0x2dcaec;$gameScreen[_0x55ffe5(0xa97)](_0x2e77f5[0x0],_0x2e77f5[0x1],_0x2e77f5[0x2]);if(_0x2e77f5[0x3])this[_0x55ffe5(0x275)](_0x2e77f5[0x2]);return!![];},VisuMZ['BattleCore'][_0x2dcaec(0x907)]=Game_Interpreter[_0x2dcaec(0xaf6)]['command283'],Game_Interpreter[_0x2dcaec(0xaf6)][_0x2dcaec(0x19a)]=function(_0x13531d){const _0x75844f=_0x2dcaec;return VisuMZ[_0x75844f(0xae3)][_0x75844f(0x907)]['call'](this,_0x13531d),SceneManager[_0x75844f(0xa2b)]()&&SceneManager[_0x75844f(0x496)]['_spriteset'][_0x75844f(0x971)](_0x13531d[0x0],_0x13531d[0x1]),!![];},Sprite_Battleback['prototype'][_0x2dcaec(0x806)]=function(){const _0x58fb51=_0x2dcaec;if($gameMap[_0x58fb51(0x806)]()!==null)return $gameMap['battleback1Name']();else{if(BattleManager[_0x58fb51(0xb36)]())return $dataSystem[_0x58fb51(0x806)];else return $gameMap[_0x58fb51(0xaac)]()?this[_0x58fb51(0x3a8)]():'';}},Sprite_Battleback[_0x2dcaec(0xaf6)][_0x2dcaec(0xa6a)]=function(){const _0x1c2c34=_0x2dcaec;if($gameMap[_0x1c2c34(0xa6a)]()!==null)return $gameMap[_0x1c2c34(0xa6a)]();else{if(BattleManager[_0x1c2c34(0xb36)]())return $dataSystem[_0x1c2c34(0xa6a)];else return $gameMap[_0x1c2c34(0xaac)]()?this[_0x1c2c34(0x7a0)]():'';}},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2af)]=function(_0x5be856,_0x36c6d4){const _0x43a805=_0x2dcaec;_0x5be856[_0x43a805(0x4ca)]=_0x36c6d4;},Spriteset_Battle['prototype']['changeBattlebacks']=function(_0x5a0180,_0x13dedf){const _0x5611aa=_0x2dcaec;_0x5a0180=_0x5a0180||'',_0x13dedf=_0x13dedf||'';_0x5a0180===''&&_0x13dedf===''&&(_0x5a0180=this[_0x5611aa(0x389)][_0x5611aa(0x806)](),_0x13dedf=this['_back2Sprite'][_0x5611aa(0xa6a)]());const _0x481efe=ImageManager[_0x5611aa(0x873)](_0x5a0180),_0xab4a82=ImageManager[_0x5611aa(0x8e5)](_0x13dedf);_0x481efe[_0x5611aa(0x612)](this[_0x5611aa(0x35b)][_0x5611aa(0x558)](this,this[_0x5611aa(0x389)],this[_0x5611aa(0x309)],_0x481efe,_0xab4a82));},Spriteset_Battle[_0x2dcaec(0xaf6)]['updateBattlebackBitmap1']=function(_0xe4fc10,_0x670109,_0x2f89ee,_0x1f5b0e){const _0xa91668=_0x2dcaec;_0x1f5b0e[_0xa91668(0x612)](this[_0xa91668(0x330)][_0xa91668(0x558)](this,_0xe4fc10,_0x670109,_0x2f89ee,_0x1f5b0e));},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x330)]=function(_0x21c7d9,_0x245f2f,_0x2820ca,_0x56a4d2){const _0x2de00f=_0x2dcaec;_0x21c7d9[_0x2de00f(0x4ca)]=_0x2820ca,_0x245f2f[_0x2de00f(0x4ca)]=_0x56a4d2,_0x21c7d9[_0x2de00f(0x683)](),_0x245f2f[_0x2de00f(0x683)]();},VisuMZ[_0x2dcaec(0xae3)]['Spriteset_Battle_createBattleField']=Spriteset_Battle['prototype']['createBattleField'],Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x816)]=function(){const _0x282ea8=_0x2dcaec;VisuMZ[_0x282ea8(0xae3)]['Spriteset_Battle_createBattleField']['call'](this),this[_0x282ea8(0x14c)]();},Spriteset_Battle['prototype'][_0x2dcaec(0x14c)]=function(){const _0xddbce5=_0x2dcaec;this[_0xddbce5(0xa17)](),this[_0xddbce5(0x86e)](),this[_0xddbce5(0x94e)](),this[_0xddbce5(0x5dc)](),this[_0xddbce5(0x553)]();},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xa17)]=function(){const _0x3c6090=_0x2dcaec;this['_underAnimationContainer']=new Sprite(),this[_0x3c6090(0x313)][_0x3c6090(0x83f)](this[_0x3c6090(0xaa3)]),this[_0x3c6090(0xc10)]=new Sprite(),this[_0x3c6090(0x313)]['addChild'](this[_0x3c6090(0xc10)]);},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x94e)]=function(){const _0x4da7ff=_0x2dcaec;this[_0x4da7ff(0x361)]=new Sprite(),Spriteset_Battle[_0x4da7ff(0x981)]?this[_0x4da7ff(0x83f)](this[_0x4da7ff(0x361)]):this[_0x4da7ff(0x313)][_0x4da7ff(0x83f)](this[_0x4da7ff(0x361)]);},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x5dc)]=function(){const _0x191122=_0x2dcaec;this[_0x191122(0x8c9)]=new Sprite(),this[_0x191122(0x8c9)]['x']=this['_battleField']['x'],this[_0x191122(0x8c9)]['y']=this['_battleField']['y'],this[_0x191122(0x83f)](this[_0x191122(0x8c9)]);},Spriteset_Battle[_0x2dcaec(0xaf6)]['adjustFlippedBattlefield']=function(){const _0x2151ba=_0x2dcaec;if(!this['isFlipped']())return;this[_0x2151ba(0xc10)]['scale']['x']=-0x1,this['_battlerContainer']['x']=this[_0x2151ba(0x313)][_0x2151ba(0x64b)],this['_uiContainer'][_0x2151ba(0x8a3)]['x']=-0x1,this[_0x2151ba(0x35d)]['x']=this[_0x2151ba(0x313)]['width'],this['_animationContainer'][_0x2151ba(0x8a3)]['x']=-0x1,this[_0x2151ba(0x361)]['x']=this[_0x2151ba(0x313)][_0x2151ba(0x64b)],this[_0x2151ba(0x8c9)]['scale']['x']=-0x1,this[_0x2151ba(0x8c9)]['x']=this[_0x2151ba(0x313)]['x']+this[_0x2151ba(0x313)][_0x2151ba(0x64b)];},Spriteset_Battle['prototype'][_0x2dcaec(0x4f4)]=function(){const _0xd902b1=_0x2dcaec;Imported['VisuMZ_0_CoreEngine']&&this[_0xd902b1(0x6d8)]()&&this[_0xd902b1(0x24b)]();const _0x8e202c=$gameTroop['members'](),_0x1a84a6=[];for(const _0x44f2a8 of _0x8e202c){_0x1a84a6[_0xd902b1(0x190)](new Sprite_Enemy(_0x44f2a8));}_0x1a84a6[_0xd902b1(0x6bb)](this['compareEnemySprite'][_0xd902b1(0x558)](this));for(const _0x3f7e05 of _0x1a84a6){this[_0xd902b1(0xc10)][_0xd902b1(0x83f)](_0x3f7e05);}this[_0xd902b1(0x5a2)]=_0x1a84a6;},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x450)]=function(){const _0xd35a1f=_0x2dcaec;this[_0xd35a1f(0x8a0)]=[];for(let _0x342894=0x0;_0x342894<$gameParty[_0xd35a1f(0x724)]();_0x342894++){const _0x462964=$gameParty[_0xd35a1f(0x429)]()[_0x342894],_0x6aa33=new Sprite_Actor();_0x6aa33['moveToStartPositionBattleCore'](_0x462964),_0x6aa33['setBattler'](_0x462964),_0x6aa33[_0xd35a1f(0x23a)](),this[_0xd35a1f(0x8a0)]['push'](_0x6aa33),this[_0xd35a1f(0xc10)][_0xd35a1f(0x83f)](_0x6aa33);}},Spriteset_Battle['prototype']['createAnimationSprite']=function(_0x161404,_0x47c1f7,_0x1c0a85,_0x264976){const _0x15585d=_0x2dcaec,_0x5f17b5=this[_0x15585d(0x19c)](_0x47c1f7),_0x3f4a0e=new(_0x5f17b5?Sprite_AnimationMV:Sprite_Animation)(),_0x514653=this[_0x15585d(0x783)](_0x161404);this[_0x15585d(0x27c)](_0x161404[0x0])&&(_0x1c0a85=!_0x1c0a85),_0x3f4a0e[_0x15585d(0xac9)]=_0x161404,_0x3f4a0e['setup'](_0x514653,_0x47c1f7,_0x1c0a85,_0x264976),this[_0x15585d(0xb00)](_0x3f4a0e);},Spriteset_Battle['prototype']['addAnimationSpriteToContainer']=function(_0x4de880){const _0x56484e=_0x2dcaec;this[_0x56484e(0x90b)](_0x4de880)?(this['battleStatusWindowAnimationContainer']()[_0x56484e(0x83f)](_0x4de880),_0x4de880['battleStatusSprite']=!![]):(Spriteset_Battle[_0x56484e(0x981)]&&(this['_animationContainer']['x']=this[_0x56484e(0x422)]['x'],this[_0x56484e(0x361)]['y']=this[_0x56484e(0x422)]['y']),this[_0x56484e(0xaa3)]&&_0x4de880[_0x56484e(0x1d1)]&&_0x4de880[_0x56484e(0x1d1)]()?(this[_0x56484e(0xaa3)][_0x56484e(0x83f)](_0x4de880),this[_0x56484e(0xaa3)]['x']=this[_0x56484e(0x361)]['x'],this['_underAnimationContainer']['y']=this[_0x56484e(0x361)]['y']):this['_animationContainer'][_0x56484e(0x83f)](_0x4de880)),this[_0x56484e(0xb7a)]['push'](_0x4de880);},Spriteset_Battle[_0x2dcaec(0xaf6)]['isAnimationShownOnBattlePortrait']=function(_0x195d1e){const _0x295f20=_0x2dcaec;if(!_0x195d1e)return![];if(!_0x195d1e[_0x295f20(0x784)])return![];if(!_0x195d1e['targetObjects'][0x0])return![];if(_0x195d1e[_0x295f20(0xac9)][0x0]['isActor']&&!_0x195d1e[_0x295f20(0xac9)][0x0][_0x295f20(0x8d6)]())return![];if($gameSystem['isSideView']())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x195d1e[_0x295f20(0x61d)]===Sprite_Animation){const _0x442f3b=VisuMZ['BattleCore'][_0x295f20(0xbeb)][_0x295f20(0x46b)];_0x442f3b['FvAniEachTarget']=_0x442f3b[_0x295f20(0x1ed)]??!![];if(_0x195d1e[_0x295f20(0x784)][_0x295f20(0xb46)]===0x0&&!_0x442f3b[_0x295f20(0x1ed)])return![];_0x442f3b[_0x295f20(0x460)]=_0x442f3b['FvAniCenterAll']??!![];if(_0x195d1e[_0x295f20(0x784)][_0x295f20(0xb46)]===0x1&&!_0x442f3b['FvAniCenterAll'])return![];_0x442f3b[_0x295f20(0xc05)]=_0x442f3b[_0x295f20(0xc05)]??![];if(_0x195d1e[_0x295f20(0x784)][_0x295f20(0xb46)]===0x2&&!_0x442f3b[_0x295f20(0xc05)])return![];}else{if(_0x195d1e[_0x295f20(0x61d)]===Sprite_AnimationMV){if(_0x195d1e[_0x295f20(0x784)][_0x295f20(0x34f)]===0x3)return![];}}return!![];const _0x220dff=Window_BattleStatus[_0x295f20(0xaf6)][_0x295f20(0x9c9)]();return['xp',_0x295f20(0x3ec)][_0x295f20(0x889)](_0x220dff);},Spriteset_Battle['prototype'][_0x2dcaec(0x6d5)]=function(){const _0x336d4f=_0x2dcaec;if(!SceneManager[_0x336d4f(0x496)])return null;if(!SceneManager[_0x336d4f(0x496)][_0x336d4f(0x300)])return null;if(!SceneManager['_scene'][_0x336d4f(0x300)][_0x336d4f(0x422)])return null;return SceneManager[_0x336d4f(0x496)]['_statusWindow'][_0x336d4f(0x422)];},Spriteset_Battle['prototype'][_0x2dcaec(0x25e)]=function(_0x7d3bb2){const _0x44d90a=_0x2dcaec;this[_0x44d90a(0x68c)](_0x7d3bb2);for(const _0x315596 of _0x7d3bb2['targetObjects']){_0x315596[_0x44d90a(0x36d)]&&_0x315596[_0x44d90a(0x36d)]();}_0x7d3bb2['destroy']();},Spriteset_Battle[_0x2dcaec(0xaf6)]['removeAnimationFromContainer']=function(_0x36f60b){const _0x2e3859=_0x2dcaec;this[_0x2e3859(0x90b)](_0x36f60b)?this[_0x2e3859(0x6d5)]()[_0x2e3859(0xa03)](_0x36f60b):this[_0x2e3859(0x361)][_0x2e3859(0xa03)](_0x36f60b);this[_0x2e3859(0xaa3)]&&this[_0x2e3859(0xaa3)]['removeChild'](_0x36f60b);this[_0x2e3859(0x422)]['removeChild'](_0x36f60b),this[_0x2e3859(0x361)][_0x2e3859(0xa03)](_0x36f60b),this[_0x2e3859(0xb7a)]['remove'](_0x36f60b);if(this[_0x2e3859(0xc33)])this[_0x2e3859(0xc33)][_0x2e3859(0xb8d)](_0x36f60b);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x24f)]=Spriteset_Battle['prototype'][_0x2dcaec(0x887)],Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x887)]=function(){const _0x5f0d53=_0x2dcaec;VisuMZ[_0x5f0d53(0xae3)]['Spriteset_Battle_updateActors'][_0x5f0d53(0x390)](this),this[_0x5f0d53(0x92e)]();},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x92e)]=function(){const _0xfec75=_0x2dcaec;this[_0xfec75(0xc10)]['children']['sort'](this['compareBattlerSprites']['bind'](this)),this[_0xfec75(0x6e2)]();if(!this[_0xfec75(0xc10)])return;this[_0xfec75(0xc10)][_0xfec75(0x19d)]=this[_0xfec75(0x2ed)]();},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x884)]=function(_0x39170f,_0x5c5492){const _0x5ace34=_0x2dcaec;if(VisuMZ[_0x5ace34(0xae3)][_0x5ace34(0xbeb)][_0x5ace34(0x46b)][_0x5ace34(0x76e)]){if(_0x39170f['_battler']&&_0x5c5492[_0x5ace34(0x386)]){if(_0x39170f[_0x5ace34(0x386)][_0x5ace34(0x8d6)]()&&_0x5c5492[_0x5ace34(0x386)]['isEnemy']())return 0x1;else{if(_0x5c5492[_0x5ace34(0x386)][_0x5ace34(0x8d6)]()&&_0x39170f[_0x5ace34(0x386)][_0x5ace34(0x5d1)]())return-0x1;}}}return _0x39170f['_baseY']!==_0x5c5492[_0x5ace34(0xa19)]?_0x39170f[_0x5ace34(0xa19)]-_0x5c5492['_baseY']:_0x5c5492[_0x5ace34(0x6dc)]-_0x39170f[_0x5ace34(0x6dc)];},Spriteset_Battle[_0x2dcaec(0xaf6)]['putActiveBattlerOnTop']=function(){const _0x185d28=_0x2dcaec;if(!VisuMZ[_0x185d28(0xae3)][_0x185d28(0xbeb)][_0x185d28(0x46b)]['PrioritySortActive'])return;const _0x36cad6=BattleManager['_subject'];if(_0x36cad6){if(_0x36cad6[_0x185d28(0x8d6)]()&&!$gameSystem[_0x185d28(0x334)]())return;if(_0x36cad6===BattleManager[_0x185d28(0x3fc)]())return;const _0xac5fc6=_0x36cad6[_0x185d28(0xbc2)]();if(_0xac5fc6&&_0x36cad6[_0x185d28(0x8d6)]())this[_0x185d28(0xc10)][_0x185d28(0x83f)](_0xac5fc6);}},Spriteset_Battle[_0x2dcaec(0xaf6)]['processEscape']=function(){const _0x1558c4=_0x2dcaec;for(const _0xbf538f of $gameParty[_0x1558c4(0x9ef)]()){if(!_0xbf538f)continue;if(!_0xbf538f[_0x1558c4(0xbc2)]())continue;_0xbf538f['battler']()['forceEscapeSprite']=!![],_0xbf538f[_0x1558c4(0xbc2)]()['retreat']();}},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x86e)]=function(){const _0x5c4510=_0x2dcaec;this[_0x5c4510(0x35d)]=new Sprite(),Spriteset_Battle['ANTI_TINT_UI']?this[_0x5c4510(0x83f)](this['_uiContainer']):this[_0x5c4510(0x313)][_0x5c4510(0x83f)](this[_0x5c4510(0x35d)]),SceneManager[_0x5c4510(0x496)][_0x5c4510(0x35d)]=this[_0x5c4510(0x35d)];},Spriteset_Battle['prototype']['createEnemyNames']=function(){const _0xdf61c4=_0x2dcaec;if(VisuMZ[_0xdf61c4(0xae3)]['Settings'][_0xdf61c4(0xc36)][_0xdf61c4(0x3d3)])return;this[_0xdf61c4(0x4e9)]=new Sprite(),BattleManager[_0xdf61c4(0x1d4)](this['_enemyNameContainer']);for(const _0x407a97 of this[_0xdf61c4(0x5a2)]){const _0x17c18e=new Sprite_EnemyName();this[_0xdf61c4(0x4e9)][_0xdf61c4(0x83f)](_0x17c18e),_0x17c18e[_0xdf61c4(0x92d)](_0x407a97);}},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x32e)]=function(){const _0x285ed2=_0x2dcaec;if(!this[_0x285ed2(0x8c9)])return;if(!this['_uiContainer'])return;const _0x23847a=Spriteset_Battle[_0x285ed2(0x981)]?this[_0x285ed2(0x8c9)]['x']:0x0,_0x541157=Spriteset_Battle['ANTI_TINT_UI']?this[_0x285ed2(0x8c9)]['y']:0x0,_0x4da921=Imported[_0x285ed2(0x161)]?this[_0x285ed2(0x313)]['x']:0x0,_0x560a84=Imported['VisuMZ_3_ActSeqCamera']?this[_0x285ed2(0x313)]['y']:0x0;this[_0x285ed2(0x35d)]['x']=_0x23847a+_0x4da921,this['_uiContainer']['y']=_0x541157+_0x560a84;},BattleManager[_0x2dcaec(0x1d4)]=function(_0x36155f){const _0x85e091=_0x2dcaec;if(!SceneManager[_0x85e091(0x496)][_0x85e091(0x35d)])return;SceneManager[_0x85e091(0x496)][_0x85e091(0x35d)]['addChild'](_0x36155f);},BattleManager[_0x2dcaec(0x641)]=function(_0x2beab3){const _0x21be2b=_0x2dcaec;if(!SceneManager[_0x21be2b(0x496)]['_uiContainer'])return;SceneManager[_0x21be2b(0x496)][_0x21be2b(0x35d)][_0x21be2b(0xa03)](_0x2beab3);},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x2ed)]=function(){return 0xff;},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x4c7)]=function(){return![];},Spriteset_Battle[_0x2dcaec(0xaf6)]['isAnyoneFloating']=function(){const _0x417ad7=_0x2dcaec;return this[_0x417ad7(0x90f)]()[_0x417ad7(0x624)](_0x31dfcd=>_0x31dfcd['isFloating']());},Spriteset_Battle['prototype']['isAnyoneJumping']=function(){const _0x3d9bd4=_0x2dcaec;return this['battlerSprites']()[_0x3d9bd4(0x624)](_0x1dee50=>_0x1dee50[_0x3d9bd4(0x9f0)]());},Spriteset_Battle['prototype'][_0x2dcaec(0x41b)]=function(){const _0x3c6e8b=_0x2dcaec;return this[_0x3c6e8b(0x90f)]()[_0x3c6e8b(0x624)](_0x5cbdf0=>_0x5cbdf0[_0x3c6e8b(0xb53)]());},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x824)]=function(){const _0x9c43e5=_0x2dcaec;return this[_0x9c43e5(0x90f)]()['some'](_0x233a86=>_0x233a86[_0x9c43e5(0x367)]());},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x70b)]=function(){const _0x194f09=_0x2dcaec;return this[_0x194f09(0x90f)]()['some'](_0x3cfc8c=>_0x3cfc8c['isSpinning']());},Spriteset_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x656)]=function(){const _0x58ff92=_0x2dcaec;return this[_0x58ff92(0x90f)]()[_0x58ff92(0x624)](_0xe56efa=>_0xe56efa[_0x58ff92(0x52f)]());},VisuMZ['BattleCore'][_0x2dcaec(0x9e2)]=Window_ItemList[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d8)],Window_ItemList[_0x2dcaec(0xaf6)]['maxCols']=function(){const _0x369f12=_0x2dcaec;return SceneManager[_0x369f12(0xa2b)]()?SceneManager[_0x369f12(0x496)][_0x369f12(0x9c9)]()===_0x369f12(0x541)?VisuMZ[_0x369f12(0xae3)][_0x369f12(0xbeb)][_0x369f12(0x247)]['SkillItemBorderCols']:VisuMZ[_0x369f12(0xae3)][_0x369f12(0xbeb)][_0x369f12(0x247)][_0x369f12(0x218)]:VisuMZ['BattleCore'][_0x369f12(0x9e2)][_0x369f12(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0x4ed)]=Window_SkillList[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d8)],Window_SkillList[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d8)]=function(){const _0xb30ae5=_0x2dcaec;return SceneManager['isSceneBattle']()?SceneManager[_0xb30ae5(0x496)][_0xb30ae5(0x9c9)]()===_0xb30ae5(0x541)?VisuMZ[_0xb30ae5(0xae3)][_0xb30ae5(0xbeb)][_0xb30ae5(0x247)][_0xb30ae5(0x7d8)]:VisuMZ[_0xb30ae5(0xae3)][_0xb30ae5(0xbeb)]['BattleLayout']['SkillItemStandardCols']:VisuMZ['BattleCore'][_0xb30ae5(0x4ed)][_0xb30ae5(0x390)](this);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x941)]=Window_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0x508)],Window_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0x508)]=function(){const _0x1a0203=_0x2dcaec;VisuMZ['BattleCore'][_0x1a0203(0x941)][_0x1a0203(0x390)](this),this[_0x1a0203(0x9d1)](),this[_0x1a0203(0x686)]();},Window_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d1)]=function(){const _0x526d04=_0x2dcaec;VisuMZ['BattleCore'][_0x526d04(0xbeb)]['AutoBattle'][_0x526d04(0x91e)]&&(this['addBattleCoreAutoBattleStartupCommand'](),this[_0x526d04(0xc5e)]());},Window_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0x686)]=function(){const _0x16074e=_0x2dcaec;if(!VisuMZ[_0x16074e(0xae3)][_0x16074e(0xbeb)][_0x16074e(0x2bb)][_0x16074e(0xa43)])return;const _0x3e10c9=TextManager[_0x16074e(0x4ce)],_0x270ea3=_0x16074e(0x4ce);this[_0x16074e(0x529)](_0x3e10c9,_0x270ea3);},Window_Options[_0x2dcaec(0xaf6)][_0x2dcaec(0x924)]=function(){const _0x200809=_0x2dcaec,_0x1babe4=TextManager[_0x200809(0x516)],_0x385452=_0x200809(0x7ff);this['addCommand'](_0x1babe4,_0x385452);},Window_Options['prototype'][_0x2dcaec(0xc5e)]=function(){const _0x5ffa8e=_0x2dcaec,_0x2b53b6=TextManager[_0x5ffa8e(0x40c)],_0x42c4c7='autoBattleUseSkills';this['addCommand'](_0x2b53b6,_0x42c4c7);},VisuMZ['BattleCore'][_0x2dcaec(0xc21)]=Window_Options[_0x2dcaec(0xaf6)]['statusText'],Window_Options['prototype'][_0x2dcaec(0x9b7)]=function(_0x230a14){const _0xe2c909=_0x2dcaec,_0x14c903=this['commandSymbol'](_0x230a14);return _0x14c903===_0xe2c909(0xbe9)?this[_0xe2c909(0x16d)]():VisuMZ[_0xe2c909(0xae3)]['Window_Options_statusText']['call'](this,_0x230a14);},Window_Options['prototype']['statusTextAutoBattleStyle']=function(){const _0x10951b=_0x2dcaec,_0x45bd4a=VisuMZ[_0x10951b(0xae3)][_0x10951b(0xbeb)][_0x10951b(0xaec)],_0x20d68a=this[_0x10951b(0x5ac)](_0x10951b(0xbe9));return _0x20d68a?_0x45bd4a[_0x10951b(0x1f8)]:_0x45bd4a['StyleOFF'];},Window_ShopStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x3bb)]=function(){const _0x1bb10b=_0x2dcaec,_0x1989a0=DataManager['getDamageStyle'](this['_item']),_0x49108a=VisuMZ['DamageStyles'][_0x1989a0];if(!_0x49108a)return this[_0x1bb10b(0x489)]();const _0x5d07e5='DamageType%1'[_0x1bb10b(0xb60)](this[_0x1bb10b(0x652)][_0x1bb10b(0x63e)][_0x1bb10b(0x134)]),_0x3ecf8f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this[_0x1bb10b(0x652)]['damage'][_0x1bb10b(0x134)]];return _0x49108a[_0x5d07e5][_0x1bb10b(0xb60)](_0x3ecf8f);},Window_ShopStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x401)]=function(){const _0x22614b=_0x2dcaec,_0x29527a=DataManager['getDamageStyle'](this['_item']),_0x4e2ece=VisuMZ[_0x22614b(0x4c1)][_0x29527a];if(!_0x4e2ece)return this[_0x22614b(0x9a1)]();return _0x4e2ece[_0x22614b(0x53f)][_0x22614b(0x390)](this);},VisuMZ['BattleCore'][_0x2dcaec(0x21c)]=Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Window_PartyCommand['prototype'][_0x2dcaec(0x970)]=function(_0x43d900){const _0x1ad509=_0x2dcaec;VisuMZ[_0x1ad509(0xae3)][_0x1ad509(0x21c)]['call'](this,_0x43d900),this[_0x1ad509(0x21d)](_0x43d900);},Window_PartyCommand['prototype'][_0x2dcaec(0x21d)]=function(_0x253933){const _0x3226d8=_0x2dcaec,_0x367fb4=new Rectangle(0x0,0x0,_0x253933[_0x3226d8(0x64b)],_0x253933['height']);this[_0x3226d8(0x283)]=new Window_Base(_0x367fb4),this[_0x3226d8(0x283)][_0x3226d8(0x19d)]=0x0,this['addChild'](this[_0x3226d8(0x283)]),this['updateCommandNameWindow']();},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xbba)]=function(){const _0x2367cd=_0x2dcaec;Window_Command['prototype']['callUpdateHelp'][_0x2367cd(0x390)](this);if(this[_0x2367cd(0x283)])this[_0x2367cd(0x639)]();},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x639)]=function(){const _0x28c308=_0x2dcaec,_0x48fe26=this['_commandNameWindow'];_0x48fe26[_0x28c308(0x2e1)]['clear']();const _0x1fab92=this[_0x28c308(0x7be)](this[_0x28c308(0x6fc)]());if(_0x1fab92===_0x28c308(0x55c)&&this[_0x28c308(0x466)]()>0x0){const _0xaf00f7=this[_0x28c308(0xb4c)](this[_0x28c308(0x6fc)]());let _0x529876=this[_0x28c308(0x246)](this[_0x28c308(0x6fc)]());_0x529876=_0x529876[_0x28c308(0x1d3)](/\\I\[(\d+)\]/gi,''),_0x48fe26[_0x28c308(0x2be)](),this['commandNameWindowDrawBackground'](_0x529876,_0xaf00f7),this[_0x28c308(0xa3c)](_0x529876,_0xaf00f7),this[_0x28c308(0x347)](_0x529876,_0xaf00f7);}},Window_PartyCommand['prototype']['commandNameWindowDrawBackground']=function(_0x2ad7d6,_0x1142ba){},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xa3c)]=function(_0x122bcb,_0x5b65a1){const _0x1b5ef3=_0x2dcaec,_0x2ebc00=this['_commandNameWindow'];_0x2ebc00[_0x1b5ef3(0x225)](_0x122bcb,0x0,_0x5b65a1['y'],_0x2ebc00['innerWidth'],_0x1b5ef3(0xc43));},Window_PartyCommand['prototype'][_0x2dcaec(0x347)]=function(_0x1388f5,_0xe59777){const _0x1f51df=_0x2dcaec,_0x40c38a=this[_0x1f51df(0x283)],_0x2ecad4=$gameSystem['windowPadding'](),_0x4a8161=_0xe59777['x']+Math[_0x1f51df(0x6eb)](_0xe59777[_0x1f51df(0x64b)]/0x2)+_0x2ecad4;_0x40c38a['x']=_0x40c38a[_0x1f51df(0x64b)]/-0x2+_0x4a8161,_0x40c38a['y']=Math[_0x1f51df(0x6eb)](_0xe59777[_0x1f51df(0x75c)]/0x2);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x4f1)]=function(){const _0x10accb=_0x2dcaec;this[_0x10accb(0xc45)](),this[_0x10accb(0x3fb)](),this[_0x10accb(0x5f6)](),this[_0x10accb(0x47e)](),this[_0x10accb(0x51d)](),this[_0x10accb(0x7b1)]();},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xc45)]=function(){const _0x2a99db=_0x2dcaec,_0x41711e=this[_0x2a99db(0x5a3)](),_0xb6e796=VisuMZ[_0x2a99db(0xae3)][_0x2a99db(0xbeb)][_0x2a99db(0x586)][_0x2a99db(0x56d)],_0x1c74cb=_0x41711e==='text'?TextManager['fight']:_0x2a99db(0xa8b)['format'](_0xb6e796,TextManager[_0x2a99db(0x4a6)]),_0x62f5c9=this['isFightCommandEnabled']();this[_0x2a99db(0x529)](_0x1c74cb,_0x2a99db(0x4a6),_0x62f5c9);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x581)]=function(){return!![];},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x3fb)]=function(){const _0x355dfa=_0x2dcaec;if(!this[_0x355dfa(0xa61)]())return;const _0x2c594d=this[_0x355dfa(0x5a3)](),_0x11cb85=VisuMZ[_0x355dfa(0xae3)][_0x355dfa(0xbeb)][_0x355dfa(0x586)][_0x355dfa(0x20f)],_0x154a85=_0x2c594d==='text'?TextManager['autoBattle']:_0x355dfa(0xa8b)[_0x355dfa(0xb60)](_0x11cb85,TextManager['autoBattle']),_0x140f88=this['isAutoBattleCommandEnabled']();this[_0x355dfa(0x529)](_0x154a85,_0x355dfa(0x837),_0x140f88);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xa61)]=function(){const _0x3eb572=_0x2dcaec;return VisuMZ[_0x3eb572(0xae3)]['Settings'][_0x3eb572(0x586)][_0x3eb572(0x1a5)];},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x817)]=function(){return!![];},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x5f6)]=function(){},Window_PartyCommand[_0x2dcaec(0xaf6)]['addStatusCommand']=function(){const _0x2061da=_0x2dcaec,_0x17f1d9=VisuMZ[_0x2061da(0xae3)]['Settings'][_0x2061da(0x586)]['CommandAddStatus']??!![];if(!_0x17f1d9)return;const _0x2e68c4=this['commandStyle'](),_0x1a9a1f=VisuMZ['BattleCore'][_0x2061da(0xbeb)][_0x2061da(0x48b)]['CmdIconStatus']??0x57,_0x40bbf3=_0x2e68c4==='text'?TextManager['status']:_0x2061da(0xa8b)['format'](_0x1a9a1f,TextManager[_0x2061da(0x747)]),_0xc4bfa=!![];this[_0x2061da(0x529)](_0x40bbf3,'status',_0xc4bfa);},Window_PartyCommand[_0x2dcaec(0xaf6)]['addOptionsCommand']=function(){const _0x3ea0bd=_0x2dcaec;if(!this[_0x3ea0bd(0xae7)]())return;const _0x408a8c=this['commandStyle'](),_0x46c261=VisuMZ[_0x3ea0bd(0xae3)]['Settings'][_0x3ea0bd(0x586)][_0x3ea0bd(0xa96)],_0x143a4d=_0x408a8c==='text'?TextManager['options']:'\x5cI[%1]%2'['format'](_0x46c261,TextManager[_0x3ea0bd(0x14d)]),_0x395124=this['isOptionsCommandEnabled']();this['addCommand'](_0x143a4d,_0x3ea0bd(0x14d),_0x395124);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xae7)]=function(){const _0x1d5751=_0x2dcaec;return VisuMZ[_0x1d5751(0xae3)][_0x1d5751(0xbeb)][_0x1d5751(0x586)][_0x1d5751(0x75e)];},Window_PartyCommand[_0x2dcaec(0xaf6)]['isOptionsCommandEnabled']=function(){return!![];},Window_PartyCommand['prototype']['addEscapeCommand']=function(){const _0x190739=_0x2dcaec,_0x47e601=this['commandStyle'](),_0x426d65=VisuMZ[_0x190739(0xae3)][_0x190739(0xbeb)][_0x190739(0x586)]['CmdIconEscape'],_0x48625c=_0x47e601===_0x190739(0x3e1)?TextManager['escape']:_0x190739(0xa8b)['format'](_0x426d65,TextManager['escape']),_0x1628a1=this['isEscapeCommandEnabled']();this[_0x190739(0x529)](_0x48625c,'escape',_0x1628a1);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x5f9)]=function(){const _0x2c9812=_0x2dcaec;return BattleManager[_0x2c9812(0xc4e)]();},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x285)]=function(){const _0x448078=_0x2dcaec;return VisuMZ[_0x448078(0xae3)][_0x448078(0xbeb)][_0x448078(0x586)][_0x448078(0xc65)];},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e0)]=function(_0x24887b){const _0x1ff641=_0x2dcaec,_0xf5dcd5=this[_0x1ff641(0x7be)](_0x24887b);if(_0xf5dcd5==='iconText')this[_0x1ff641(0x695)](_0x24887b);else _0xf5dcd5==='icon'?this[_0x1ff641(0x786)](_0x24887b):Window_Command[_0x1ff641(0xaf6)][_0x1ff641(0x6e0)][_0x1ff641(0x390)](this,_0x24887b);},Window_PartyCommand[_0x2dcaec(0xaf6)]['commandStyle']=function(){const _0xb93f0=_0x2dcaec;return VisuMZ[_0xb93f0(0xae3)][_0xb93f0(0xbeb)][_0xb93f0(0x586)]['CmdStyle'];},Window_PartyCommand['prototype']['commandStyleCheck']=function(_0xa2e3b1){const _0x2dfc8f=_0x2dcaec;if(_0xa2e3b1<0x0)return _0x2dfc8f(0x3e1);const _0x5e8409=this[_0x2dfc8f(0x5a3)]();if(_0x5e8409!==_0x2dfc8f(0x3cc))return _0x5e8409;else{if(this[_0x2dfc8f(0x466)]()>0x0){const _0x264b60=this[_0x2dfc8f(0x246)](_0xa2e3b1);if(_0x264b60[_0x2dfc8f(0xb9e)](/\\I\[(\d+)\]/i)){const _0x306abe=this['itemLineRect'](_0xa2e3b1),_0x51cbe1=this[_0x2dfc8f(0x8da)](_0x264b60)['width'];return _0x51cbe1<=_0x306abe[_0x2dfc8f(0x64b)]?_0x2dfc8f(0x7cc):_0x2dfc8f(0x55c);}}}return'text';},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x695)]=function(_0x19f613){const _0x50437f=_0x2dcaec,_0x14bb41=this[_0x50437f(0xb4c)](_0x19f613),_0xc3ac82=this[_0x50437f(0x246)](_0x19f613),_0x1c1f05=this[_0x50437f(0x8da)](_0xc3ac82)['width'];this[_0x50437f(0xb7d)](this[_0x50437f(0x487)](_0x19f613));const _0x26c624=this['itemTextAlign']();if(_0x26c624===_0x50437f(0x185))this[_0x50437f(0xa18)](_0xc3ac82,_0x14bb41['x']+_0x14bb41[_0x50437f(0x64b)]-_0x1c1f05,_0x14bb41['y'],_0x1c1f05);else{if(_0x26c624===_0x50437f(0xc43)){const _0x324890=_0x14bb41['x']+Math['floor']((_0x14bb41[_0x50437f(0x64b)]-_0x1c1f05)/0x2);this[_0x50437f(0xa18)](_0xc3ac82,_0x324890,_0x14bb41['y'],_0x1c1f05);}else this[_0x50437f(0xa18)](_0xc3ac82,_0x14bb41['x'],_0x14bb41['y'],_0x1c1f05);}},Window_PartyCommand[_0x2dcaec(0xaf6)]['drawItemStyleIcon']=function(_0x1dd600){const _0x162089=_0x2dcaec;this['commandName'](_0x1dd600)[_0x162089(0xb9e)](/\\I\[(\d+)\]/i);const _0x160308=Number(RegExp['$1'])||0x0,_0x3844c1=this[_0x162089(0xb4c)](_0x1dd600),_0x379e21=_0x3844c1['x']+Math['floor']((_0x3844c1[_0x162089(0x64b)]-ImageManager[_0x162089(0x65c)])/0x2),_0x3088fc=_0x3844c1['y']+(_0x3844c1[_0x162089(0x75c)]-ImageManager[_0x162089(0x167)])/0x2;this[_0x162089(0x544)](_0x160308,_0x379e21,_0x3088fc);},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x4df)]=function(){},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x1f3)]=function(){const _0x5de29b=_0x2dcaec;Window_Command['prototype']['activate'][_0x5de29b(0x390)](this);const _0x28391c=this[_0x5de29b(0x9c9)]();_0x28391c===_0x5de29b(0x541)&&this['showHelpWindow']();},Window_PartyCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c9)]=function(){const _0x4996a8=_0x2dcaec;if(this[_0x4996a8(0xb73)])return this[_0x4996a8(0xb73)];return this[_0x4996a8(0xb73)]=SceneManager[_0x4996a8(0x496)]['battleLayoutStyle'](),this[_0x4996a8(0xb73)];},Window_PartyCommand[_0x2dcaec(0xaf6)]['updateHelp']=function(){const _0x92c0d4=_0x2dcaec,_0x4eb21d=VisuMZ['BattleCore'][_0x92c0d4(0xbeb)]['PartyCmd'],_0x3e6593=this[_0x92c0d4(0x3a9)]();switch(_0x3e6593){case'fight':this['_helpWindow'][_0x92c0d4(0xa9d)](_0x4eb21d[_0x92c0d4(0x5b9)]);break;case _0x92c0d4(0x837):this[_0x92c0d4(0x6ca)]['setText'](_0x4eb21d[_0x92c0d4(0x4a3)]);break;case _0x92c0d4(0x14d):this[_0x92c0d4(0x6ca)][_0x92c0d4(0xa9d)](_0x4eb21d[_0x92c0d4(0x13c)]);break;case'escape':this[_0x92c0d4(0x6ca)][_0x92c0d4(0xa9d)](_0x4eb21d[_0x92c0d4(0x6ad)]);break;case _0x92c0d4(0x747):this[_0x92c0d4(0x6ca)][_0x92c0d4(0xa9d)](Window_InBattleStatus[_0x92c0d4(0x7e9)][_0x92c0d4(0xa8c)]);break;default:this[_0x92c0d4(0x6ca)][_0x92c0d4(0xa9d)]('');break;}},VisuMZ['BattleCore'][_0x2dcaec(0x65b)]=Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x11f1ef){const _0x24b679=_0x2dcaec;VisuMZ[_0x24b679(0xae3)]['Window_ActorCommand_initialize'][_0x24b679(0x390)](this,_0x11f1ef),this['createCommandNameWindow'](_0x11f1ef);},Window_ActorCommand[_0x2dcaec(0xaf6)]['createCommandNameWindow']=function(_0x56845a){const _0x7bfbc7=_0x2dcaec,_0x3507eb=new Rectangle(0x0,0x0,_0x56845a[_0x7bfbc7(0x64b)],_0x56845a['height']);this[_0x7bfbc7(0x283)]=new Window_Base(_0x3507eb),this[_0x7bfbc7(0x283)][_0x7bfbc7(0x19d)]=0x0,this[_0x7bfbc7(0x83f)](this[_0x7bfbc7(0x283)]),this[_0x7bfbc7(0x639)]();},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xbba)]=function(){const _0x35b484=_0x2dcaec;Window_Command['prototype'][_0x35b484(0xbba)]['call'](this);if(this[_0x35b484(0x283)])this[_0x35b484(0x639)]();},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x639)]=function(){const _0x4840bc=_0x2dcaec,_0x1f21b4=this[_0x4840bc(0x283)];_0x1f21b4[_0x4840bc(0x2e1)][_0x4840bc(0xb7e)]();const _0x167e90=this[_0x4840bc(0x7be)](this[_0x4840bc(0x6fc)]());if(_0x167e90===_0x4840bc(0x55c)&&this[_0x4840bc(0x466)]()>0x0){const _0x4e2155=this[_0x4840bc(0xb4c)](this[_0x4840bc(0x6fc)]());let _0x598f19=this[_0x4840bc(0x246)](this[_0x4840bc(0x6fc)]());_0x598f19=_0x598f19[_0x4840bc(0x1d3)](/\\I\[(\d+)\]/gi,''),_0x1f21b4[_0x4840bc(0x2be)](),this[_0x4840bc(0x69d)](_0x598f19,_0x4e2155),this[_0x4840bc(0xa3c)](_0x598f19,_0x4e2155),this[_0x4840bc(0x347)](_0x598f19,_0x4e2155);}},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x69d)]=function(_0x4ba221,_0x48f243){},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xa3c)]=function(_0x3befea,_0x2751cd){const _0x37c01e=_0x2dcaec,_0x16f30e=this['_commandNameWindow'];_0x16f30e[_0x37c01e(0x225)](_0x3befea,0x0,_0x2751cd['y'],_0x16f30e['innerWidth'],_0x37c01e(0xc43));},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x347)]=function(_0x2eb4aa,_0x40d23e){const _0x30e0dd=_0x2dcaec,_0x1d36ff=this[_0x30e0dd(0x283)],_0x2c56da=$gameSystem[_0x30e0dd(0x2e0)](),_0x5ac7cd=_0x40d23e['x']+Math[_0x30e0dd(0x6eb)](_0x40d23e[_0x30e0dd(0x64b)]/0x2)+_0x2c56da;_0x1d36ff['x']=_0x1d36ff[_0x30e0dd(0x64b)]/-0x2+_0x5ac7cd,_0x1d36ff['y']=Math[_0x30e0dd(0x6eb)](_0x40d23e[_0x30e0dd(0x75c)]/0x2);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x4f1)]=function(){const _0x3e496d=_0x2dcaec;if(!this[_0x3e496d(0xaf8)])return;const _0x5c961d=this[_0x3e496d(0xaf8)][_0x3e496d(0x562)]();for(const _0x4eb86e of _0x5c961d){this['makeBattleCommand'](_0x4eb86e[_0x3e496d(0xb9f)]()[_0x3e496d(0x651)]());}},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x2d6)]=function(_0x5cbe95){const _0x274f42=_0x2dcaec;_0x5cbe95===_0x274f42(0x8f5)&&this[_0x274f42(0x7bb)]();[_0x274f42(0x518),'SKILLS'][_0x274f42(0x7f2)](_0x5cbe95)&&this[_0x274f42(0x897)]();_0x5cbe95===_0x274f42(0x9ca)&&this['addGuardCommand']();_0x5cbe95===_0x274f42(0xa23)&&this[_0x274f42(0x41c)]();_0x5cbe95===_0x274f42(0x2fa)&&this[_0x274f42(0x47e)]();_0x5cbe95===_0x274f42(0x848)&&this['addEscapeCommand']();_0x5cbe95===_0x274f42(0x6ed)&&this[_0x274f42(0x3fb)]();if(_0x5cbe95[_0x274f42(0xb9e)](/STYPE: (\d+)/i)){const _0x3c6d8e=Number(RegExp['$1']);this['addSkillTypeCommand'](_0x3c6d8e);}else{if(_0x5cbe95[_0x274f42(0xb9e)](/STYPE: (.*)/i)){const _0x4fa13a=DataManager[_0x274f42(0x51b)](RegExp['$1']);this['addSkillTypeCommand'](_0x4fa13a);}}_0x5cbe95==='ALL\x20SKILLS'&&this[_0x274f42(0xc71)]();if(_0x5cbe95[_0x274f42(0xb9e)](/SKILL: (\d+)/i)){const _0xe9e46f=Number(RegExp['$1']);this[_0x274f42(0xa98)]($dataSkills[_0xe9e46f]);}else{if(_0x5cbe95['match'](/SKILL: (.*)/i)){const _0x3c6e6f=DataManager[_0x274f42(0xba4)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x3c6e6f]);}}_0x5cbe95===_0x274f42(0x1b4)&&Imported[_0x274f42(0x50f)]&&this[_0x274f42(0x917)](),[_0x274f42(0x426),_0x274f42(0x6b4)]['includes'](_0x5cbe95)&&Imported[_0x274f42(0xb89)]&&this['addCombatLogCommand'](),_0x5cbe95===_0x274f42(0x57f)&&Imported[_0x274f42(0x5a1)]&&this[_0x274f42(0xc2d)](!![]),_0x5cbe95===_0x274f42(0x35c)&&Imported[_0x274f42(0x1a7)]&&this[_0x274f42(0x69a)]();},Window_ActorCommand[_0x2dcaec(0xaf6)]['addAttackCommand']=function(){const _0x1c0caf=_0x2dcaec,_0x458ba5=$dataSkills[this['_actor'][_0x1c0caf(0x435)]()];if(!_0x458ba5)return;if(!this[_0x1c0caf(0x15b)](_0x458ba5))return;const _0x160af5=this['commandStyle'](),_0x33bb9f=DataManager[_0x1c0caf(0x7b6)](_0x458ba5),_0x5f1c3b=DataManager[_0x1c0caf(0x8ad)](_0x458ba5),_0x2a1927=_0x160af5===_0x1c0caf(0x3e1)?_0x33bb9f:_0x1c0caf(0xa8b)['format'](_0x5f1c3b,_0x33bb9f);this[_0x1c0caf(0x529)](_0x2a1927,'attack',this[_0x1c0caf(0xaf8)][_0x1c0caf(0xbf6)]());},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x373)]=function(){const _0x5e369f=_0x2dcaec,_0x3449b0=$dataSkills[this[_0x5e369f(0xaf8)][_0x5e369f(0xc2c)]()];if(!_0x3449b0)return;if(!this['canAddSkillCommand'](_0x3449b0))return;const _0x387a51=this[_0x5e369f(0x5a3)](),_0x2d34d8=DataManager[_0x5e369f(0x7b6)](_0x3449b0),_0x228f4b=DataManager[_0x5e369f(0x8ad)](_0x3449b0),_0x1407f4=_0x387a51==='text'?_0x2d34d8:_0x5e369f(0xa8b)[_0x5e369f(0xb60)](_0x228f4b,_0x2d34d8);this[_0x5e369f(0x529)](_0x1407f4,'guard',this[_0x5e369f(0xaf8)][_0x5e369f(0xbbe)]());},Window_ActorCommand['prototype']['addItemCommand']=function(){const _0x1dad49=_0x2dcaec,_0x3f14dc=this[_0x1dad49(0x5a3)](),_0x23aaad=VisuMZ[_0x1dad49(0xae3)][_0x1dad49(0xbeb)][_0x1dad49(0x40e)][_0x1dad49(0x3b8)],_0x483a38=_0x3f14dc===_0x1dad49(0x3e1)?TextManager[_0x1dad49(0x719)]:_0x1dad49(0xa8b)['format'](_0x23aaad,TextManager['item']),_0x7eea66=this[_0x1dad49(0x5f4)]();this['addCommand'](_0x483a38,_0x1dad49(0x719),_0x7eea66);},Window_ActorCommand[_0x2dcaec(0xaf6)]['isItemCommandEnabled']=function(){const _0x3e9106=_0x2dcaec;return this[_0x3e9106(0xaf8)]&&this[_0x3e9106(0xaf8)][_0x3e9106(0xbb0)]();},Window_ActorCommand['prototype']['addSkillCommands']=function(){const _0x1057fc=_0x2dcaec,_0x6a31f=this['_actor'][_0x1057fc(0xa55)]();for(const _0x5178e4 of _0x6a31f){this[_0x1057fc(0x7ec)](_0x5178e4);}},Window_ActorCommand[_0x2dcaec(0xaf6)]['addSkillTypeCommand']=function(_0x395096){const _0x255886=_0x2dcaec;let _0x2b1e6d=$dataSystem[_0x255886(0xa55)][_0x395096];if(!_0x2b1e6d)return;let _0x4bc820=_0x2b1e6d;const _0x40845d=this[_0x255886(0x5a3)]();if(_0x40845d===_0x255886(0x3e1))_0x4bc820=_0x4bc820[_0x255886(0x1d3)](/\x1I\[(\d+)\]/gi,''),_0x4bc820=_0x4bc820['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x2b1e6d[_0x255886(0xb9e)](/\\I\[(\d+)\]/i)){const _0x304ed5=Imported['VisuMZ_1_SkillsStatesCore']?VisuMZ[_0x255886(0xc24)][_0x255886(0xbeb)]['Skills']:VisuMZ[_0x255886(0xae3)][_0x255886(0xbeb)][_0x255886(0x40e)],_0x8cfc9e=$dataSystem[_0x255886(0xc12)][_0x255886(0x7f2)](_0x395096),_0x5e9174=_0x8cfc9e?_0x304ed5['IconStypeMagic']:_0x304ed5[_0x255886(0x856)];_0x4bc820=_0x255886(0xa8b)[_0x255886(0xb60)](_0x5e9174,_0x2b1e6d);}}this[_0x255886(0x529)](_0x4bc820,_0x255886(0x7d5),!![],_0x395096);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0xc71)]=function(){const _0x562db5=_0x2dcaec,_0x34464c=this[_0x562db5(0xaf8)][_0x562db5(0xa55)](),_0x879cae=this[_0x562db5(0xaf8)][_0x562db5(0x62b)]();for(const _0x57ee1d of _0x879cae){if(!_0x57ee1d)continue;if(Imported['VisuMZ_1_SkillsStatesCore']){if(this['noSimilarSTypes'](_0x57ee1d))continue;if(this[_0x562db5(0x1e5)](_0x57ee1d))continue;}else{if(!_0x34464c[_0x562db5(0x7f2)](_0x57ee1d['stypeId']))continue;}this[_0x562db5(0xa98)](_0x57ee1d);}},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x3b0)]=function(_0x34eb91){const _0x53c948=_0x2dcaec,_0x1022cc=this['_actor'][_0x53c948(0xa55)](),_0x5ea14d=_0x1022cc['filter'](_0x3a6436=>DataManager[_0x53c948(0x1b6)](_0x34eb91)[_0x53c948(0x7f2)](_0x3a6436));return _0x5ea14d['length']<=0x0;},Window_ActorCommand[_0x2dcaec(0xaf6)]['isHiddenSkill']=function(_0x39cbfc){const _0x3c3ed7=_0x2dcaec;if(Imported[_0x3c3ed7(0xb3c)]){if(VisuMZ[_0x3c3ed7(0xc24)]['version']>=1.24){if(this['_actor']){if(!VisuMZ[_0x3c3ed7(0xc24)][_0x3c3ed7(0xad2)](this[_0x3c3ed7(0xaf8)],_0x39cbfc))return!![];if(!VisuMZ[_0x3c3ed7(0xc24)]['CheckVisibleSwitchNotetags'](this['_actor'],_0x39cbfc))return!![];if(!VisuMZ[_0x3c3ed7(0xc24)]['CheckVisibleSkillNotetags'](this[_0x3c3ed7(0xaf8)],_0x39cbfc))return!![];}}else{if(!Window_SkillList[_0x3c3ed7(0xaf6)][_0x3c3ed7(0x3c0)]['call'](this,_0x39cbfc))return!![];if(!Window_SkillList['prototype']['checkShowHideSwitchNotetags'][_0x3c3ed7(0x390)](this,_0x39cbfc))return!![];if(!Window_SkillList[_0x3c3ed7(0xaf6)][_0x3c3ed7(0x5b3)][_0x3c3ed7(0x390)](this,_0x39cbfc))return!![];}}return![];},Window_ActorCommand[_0x2dcaec(0xaf6)]['addSingleSkillCommand']=function(_0x276a7c){const _0x4869d7=_0x2dcaec;if(!_0x276a7c)return;if(!this[_0x4869d7(0x15b)](_0x276a7c))return;const _0x545008=this[_0x4869d7(0x5a3)](),_0x46cc63=DataManager[_0x4869d7(0x7b6)](_0x276a7c),_0x1f6644=DataManager[_0x4869d7(0x8ad)](_0x276a7c),_0x143adc=_0x545008===_0x4869d7(0x3e1)?_0x46cc63:_0x4869d7(0xa8b)[_0x4869d7(0xb60)](_0x1f6644,_0x46cc63),_0xa03dc4=this[_0x4869d7(0xaf8)][_0x4869d7(0x78e)](_0x276a7c);this['addCommand'](_0x143adc,_0x4869d7(0xa02),_0xa03dc4,_0x276a7c['id']);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x15b)]=function(_0x7fe798){const _0x2a8548=_0x2dcaec,_0x14bc49=_0x7fe798['note'];if(_0x14bc49[_0x2a8548(0xb9e)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x2a8548(0xaf8)][_0x2a8548(0x3d7)](_0x7fe798['id']))return![];}if(_0x14bc49[_0x2a8548(0xb9e)](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x2a8548(0xaf8)][_0x2a8548(0x220)](_0x7fe798['id']))return![];}const _0x5a641c=VisuMZ[_0x2a8548(0xae3)]['createKeyJS'](_0x7fe798,_0x2a8548(0x7e2));if(VisuMZ[_0x2a8548(0xae3)]['JS'][_0x5a641c]){if(!VisuMZ[_0x2a8548(0xae3)]['JS'][_0x5a641c][_0x2a8548(0x390)](this,this[_0x2a8548(0xaf8)],_0x7fe798))return![];}return VisuMZ[_0x2a8548(0xae3)][_0x2a8548(0xbdd)](_0x7fe798);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbdd)]=function(_0x50cd0a){const _0x2c869c=_0x2dcaec,_0x1b1729=_0x50cd0a[_0x2c869c(0x795)];if(_0x1b1729[_0x2c869c(0xb9e)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x23ce5e=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x2cd36a of _0x23ce5e){if(!$gameSwitches[_0x2c869c(0x2df)](_0x2cd36a))return![];}return!![];}if(_0x1b1729['match'](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xfb1f90=JSON[_0x2c869c(0x135)]('['+RegExp['$1'][_0x2c869c(0xb9e)](/\d+/g)+']');for(const _0x2f1604 of _0xfb1f90){if(!$gameSwitches[_0x2c869c(0x2df)](_0x2f1604))return![];}return!![];}if(_0x1b1729['match'](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0xa78fec=JSON[_0x2c869c(0x135)]('['+RegExp['$1'][_0x2c869c(0xb9e)](/\d+/g)+']');for(const _0x1dce53 of _0xa78fec){if($gameSwitches['value'](_0x1dce53))return!![];}return![];}if(_0x1b1729['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1f41a6=JSON[_0x2c869c(0x135)]('['+RegExp['$1'][_0x2c869c(0xb9e)](/\d+/g)+']');for(const _0x7d742f of _0x1f41a6){if(!$gameSwitches['value'](_0x7d742f))return!![];}return![];}if(_0x1b1729[_0x2c869c(0xb9e)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4a5f93=JSON[_0x2c869c(0x135)]('['+RegExp['$1'][_0x2c869c(0xb9e)](/\d+/g)+']');for(const _0x5b4623 of _0x4a5f93){if(!$gameSwitches[_0x2c869c(0x2df)](_0x5b4623))return!![];}return![];}if(_0x1b1729[_0x2c869c(0xb9e)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x225abc=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x261183 of _0x225abc){if($gameSwitches[_0x2c869c(0x2df)](_0x261183))return![];}return!![];}return!![];},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x47e)]=function(){const _0x10b9e8=_0x2dcaec,_0x33c0cc=this[_0x10b9e8(0x5a3)](),_0x73365a=VisuMZ[_0x10b9e8(0xae3)][_0x10b9e8(0xbeb)][_0x10b9e8(0x48b)][_0x10b9e8(0x689)]??0x57,_0x5ee40f=_0x33c0cc===_0x10b9e8(0x3e1)?TextManager[_0x10b9e8(0x747)]:'\x5cI[%1]%2'[_0x10b9e8(0xb60)](_0x73365a,TextManager[_0x10b9e8(0x747)]),_0x44c043=!![];this[_0x10b9e8(0x529)](_0x5ee40f,'status',_0x44c043);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x7b1)]=function(){const _0x2fd696=_0x2dcaec,_0x211e12=this[_0x2fd696(0x5a3)](),_0x4f5cd1=VisuMZ['BattleCore'][_0x2fd696(0xbeb)][_0x2fd696(0x586)][_0x2fd696(0x1a1)],_0x21740c=_0x211e12===_0x2fd696(0x3e1)?TextManager['escape']:_0x2fd696(0xa8b)[_0x2fd696(0xb60)](_0x4f5cd1,TextManager['escape']),_0x255790=this[_0x2fd696(0x5f9)]();this[_0x2fd696(0x529)](_0x21740c,'escape',_0x255790);},Window_ActorCommand[_0x2dcaec(0xaf6)]['isEscapeCommandEnabled']=function(){return BattleManager['canEscape']();},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x3fb)]=function(){const _0x58b916=_0x2dcaec,_0x270f96=this[_0x58b916(0x5a3)](),_0xc0248=VisuMZ[_0x58b916(0xae3)]['Settings'][_0x58b916(0x586)][_0x58b916(0x20f)],_0x2dd81c=_0x270f96===_0x58b916(0x3e1)?TextManager['autoBattle']:_0x58b916(0xa8b)[_0x58b916(0xb60)](_0xc0248,TextManager[_0x58b916(0x837)]),_0x14f73f=this['isAutoBattleCommandEnabled']();this[_0x58b916(0x529)](_0x2dd81c,_0x58b916(0x837),_0x14f73f);},Window_ActorCommand['prototype']['isAutoBattleCommandEnabled']=function(){return!![];},Window_ActorCommand['prototype'][_0x2dcaec(0x285)]=function(){const _0x63b4bd=_0x2dcaec;return VisuMZ[_0x63b4bd(0xae3)][_0x63b4bd(0xbeb)][_0x63b4bd(0x40e)][_0x63b4bd(0xc65)];},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e0)]=function(_0x2d34e7){const _0x34e8cc=_0x2dcaec,_0x30ca94=this[_0x34e8cc(0x7be)](_0x2d34e7);if(_0x30ca94==='iconText')this['drawItemStyleIconText'](_0x2d34e7);else _0x30ca94==='icon'?this[_0x34e8cc(0x786)](_0x2d34e7):Window_Command['prototype'][_0x34e8cc(0x6e0)][_0x34e8cc(0x390)](this,_0x2d34e7);this['drawSingleSkillCost'](_0x2d34e7);},Window_ActorCommand['prototype'][_0x2dcaec(0x5a3)]=function(){const _0x1c0c34=_0x2dcaec;return VisuMZ['BattleCore'][_0x1c0c34(0xbeb)]['ActorCmd'][_0x1c0c34(0x699)];},Window_ActorCommand[_0x2dcaec(0xaf6)]['commandStyleCheck']=function(_0x3aec95){const _0x497111=_0x2dcaec;if(_0x3aec95<0x0)return _0x497111(0x3e1);const _0x5936e7=this['commandStyle']();if(_0x5936e7!==_0x497111(0x3cc))return _0x5936e7;else{if(this[_0x497111(0x466)]()>0x0){const _0x22bec5=this['commandName'](_0x3aec95);if(_0x22bec5[_0x497111(0xb9e)](/\\I\[(\d+)\]/i)){const _0x5dd82c=this['itemLineRect'](_0x3aec95),_0x13a3a7=this[_0x497111(0x8da)](_0x22bec5)[_0x497111(0x64b)];return _0x13a3a7<=_0x5dd82c[_0x497111(0x64b)]?_0x497111(0x7cc):'icon';}}}return _0x497111(0x3e1);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x695)]=function(_0x2e654d){const _0x29ff12=_0x2dcaec,_0x57bd0b=this[_0x29ff12(0xb4c)](_0x2e654d),_0x20fee1=this[_0x29ff12(0x246)](_0x2e654d),_0x1ce972=this[_0x29ff12(0x8da)](_0x20fee1)[_0x29ff12(0x64b)];this[_0x29ff12(0xb7d)](this[_0x29ff12(0x487)](_0x2e654d));const _0x319db0=this[_0x29ff12(0x285)]();if(_0x319db0===_0x29ff12(0x185))this[_0x29ff12(0xa18)](_0x20fee1,_0x57bd0b['x']+_0x57bd0b[_0x29ff12(0x64b)]-_0x1ce972,_0x57bd0b['y'],_0x1ce972);else{if(_0x319db0===_0x29ff12(0xc43)){const _0x14fab3=_0x57bd0b['x']+Math[_0x29ff12(0x6eb)]((_0x57bd0b[_0x29ff12(0x64b)]-_0x1ce972)/0x2);this[_0x29ff12(0xa18)](_0x20fee1,_0x14fab3,_0x57bd0b['y'],_0x1ce972);}else this[_0x29ff12(0xa18)](_0x20fee1,_0x57bd0b['x'],_0x57bd0b['y'],_0x1ce972);}},Window_ActorCommand[_0x2dcaec(0xaf6)]['drawItemStyleIcon']=function(_0x2e07cd){const _0x2a7349=_0x2dcaec;this[_0x2a7349(0x246)](_0x2e07cd)[_0x2a7349(0xb9e)](/\\I\[(\d+)\]/i);const _0x5196c0=Number(RegExp['$1'])||0x0,_0x40913c=this[_0x2a7349(0xb4c)](_0x2e07cd),_0x29d149=_0x40913c['x']+Math[_0x2a7349(0x6eb)]((_0x40913c[_0x2a7349(0x64b)]-ImageManager['iconWidth'])/0x2),_0x4394c4=_0x40913c['y']+(_0x40913c[_0x2a7349(0x75c)]-ImageManager['iconHeight'])/0x2;this[_0x2a7349(0x544)](_0x5196c0,_0x29d149,_0x4394c4);},Window_ActorCommand[_0x2dcaec(0xaf6)]['drawSingleSkillCost']=function(_0x3ef481){const _0x31ee9f=_0x2dcaec;if(!(VisuMZ[_0x31ee9f(0xae3)]['Settings'][_0x31ee9f(0x40e)][_0x31ee9f(0x838)]??!![]))return;const _0x54f168=this[_0x31ee9f(0x53e)](_0x3ef481);if(!['attack','guard',_0x31ee9f(0xa02)]['includes'](_0x54f168))return;const _0x31e971=this['itemLineRect'](_0x3ef481);let _0x3a0942=null;if(_0x54f168===_0x31ee9f(0x75a))_0x3a0942=$dataSkills[this[_0x31ee9f(0xaf8)][_0x31ee9f(0x435)]()];else _0x54f168===_0x31ee9f(0x64c)?_0x3a0942=$dataSkills[this[_0x31ee9f(0xaf8)][_0x31ee9f(0xc2c)]()]:_0x3a0942=$dataSkills[this[_0x31ee9f(0x144)][_0x3ef481]['ext']];this['drawSkillCost'](this[_0x31ee9f(0xaf8)],_0x3a0942,_0x31e971['x'],_0x31e971['y'],_0x31e971[_0x31ee9f(0x64b)]);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x8c6)]=function(_0x259842,_0x286b08,_0x189a5e,_0x1f0014,_0x990765){const _0xcd639=_0x2dcaec;if(!_0x286b08)return;Imported[_0xcd639(0xb3c)]?Window_Command[_0xcd639(0xaf6)][_0xcd639(0x8c6)][_0xcd639(0x390)](this,_0x259842,_0x286b08,_0x189a5e,_0x1f0014,_0x990765):Window_SkillList[_0xcd639(0xaf6)][_0xcd639(0x8c6)][_0xcd639(0x390)](this,_0x286b08,_0x189a5e,_0x1f0014,_0x990765);},Window_ActorCommand[_0x2dcaec(0xaf6)]['hide']=function(){},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x1f3)]=function(){const _0x5351b4=_0x2dcaec;Window_Command[_0x5351b4(0xaf6)]['activate'][_0x5351b4(0x390)](this);const _0x55b528=this[_0x5351b4(0x9c9)]();_0x55b528==='border'&&this[_0x5351b4(0x664)]();},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c9)]=function(){const _0x2ee4c3=_0x2dcaec;if(this['_battleLayoutStyle'])return this[_0x2ee4c3(0xb73)];return this[_0x2ee4c3(0xb73)]=SceneManager['_scene'][_0x2ee4c3(0x9c9)](),this[_0x2ee4c3(0xb73)];},VisuMZ[_0x2dcaec(0xae3)]['Window_ActorCommand_setup']=Window_ActorCommand[_0x2dcaec(0xaf6)]['setup'],Window_ActorCommand[_0x2dcaec(0xaf6)]['setup']=function(_0x3937e8){const _0x2b9d0b=_0x2dcaec,_0x136af3=this['battleLayoutStyle']();if(_0x3937e8&&['xp',_0x2b9d0b(0x3ec)][_0x2b9d0b(0x7f2)](_0x136af3))this[_0x2b9d0b(0xac7)](_0x3937e8);else _0x3937e8&&[_0x2b9d0b(0x541)][_0x2b9d0b(0x7f2)](_0x136af3)&&(this['resizeWindowBorderStyle'](_0x3937e8),this[_0x2b9d0b(0x664)]());VisuMZ[_0x2b9d0b(0xae3)][_0x2b9d0b(0x7f3)][_0x2b9d0b(0x390)](this,_0x3937e8),_0x3937e8&&$gameTroop['aliveMembers']()[_0x2b9d0b(0x7ce)]>0x0&&_0x3937e8['battler']()&&_0x3937e8['battler']()[_0x2b9d0b(0xb06)]();},Window_ActorCommand[_0x2dcaec(0xaf6)]['resizeWindowXPStyle']=function(_0x135374){const _0x2f0e09=_0x2dcaec,_0x5b13c4=VisuMZ['BattleCore']['Settings'][_0x2f0e09(0x247)][_0x2f0e09(0x807)],_0x4011d1=Math[_0x2f0e09(0x976)](Graphics[_0x2f0e09(0x555)]/0x3),_0x216ac5=Math['round'](Graphics['boxWidth']/$gameParty['battleMembers']()[_0x2f0e09(0x7ce)]),_0x5276a6=Math[_0x2f0e09(0x959)](Math[_0x2f0e09(0xaf1)](_0x4011d1,_0x216ac5),_0x5b13c4),_0x26d6b1=this['fittingHeight'](VisuMZ[_0x2f0e09(0xae3)]['Settings'][_0x2f0e09(0x247)][_0x2f0e09(0x629)]),_0x53a3ad=Math[_0x2f0e09(0x6eb)]((Graphics[_0x2f0e09(0x555)]-Graphics[_0x2f0e09(0x64b)])/0x2),_0x5b5768=Graphics[_0x2f0e09(0x555)]-_0x53a3ad,_0x486d56=(Math[_0x2f0e09(0x976)](_0x216ac5*_0x135374[_0x2f0e09(0x6fc)]())+Math['round']((_0x216ac5-_0x5276a6)/0x2))[_0x2f0e09(0xc50)](_0x53a3ad,_0x5b5768-_0x5276a6),_0x329f81=Math['round'](SceneManager[_0x2f0e09(0x496)]['_statusWindow']['y']-_0x26d6b1);this[_0x2f0e09(0x5bf)](_0x486d56,_0x329f81,_0x5276a6,_0x26d6b1),this['createContents'](),this['setBackgroundType'](0x1);},Window_ActorCommand['prototype'][_0x2dcaec(0x9a6)]=function(_0x198d70){const _0x4594ca=_0x2dcaec,_0x16a1ed=SceneManager[_0x4594ca(0x496)][_0x4594ca(0x340)]();this[_0x4594ca(0x5bf)](_0x16a1ed['x'],_0x16a1ed['y'],_0x16a1ed[_0x4594ca(0x64b)],_0x16a1ed[_0x4594ca(0x75c)]),this['createContents'](),this[_0x4594ca(0x178)](0x0);},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x59e)]=function(){const _0x726639=_0x2dcaec;if(this[_0x726639(0x4cc)]){const _0x64d343=this[_0x726639(0x4cc)]['bitmap'],_0x204806=this['width']-0x8,_0x1f2b90=this[_0x726639(0x75c)],_0x524180=this[_0x726639(0xb4b)],_0x10ca49=ColorManager['dimColor1'](),_0x5cfc9a=ColorManager[_0x726639(0x9e7)]();this[_0x726639(0x4cc)]['x']=0x4,_0x64d343[_0x726639(0x6b6)](_0x204806,_0x1f2b90),_0x64d343['gradientFillRect'](0x0,0x0,_0x204806,_0x524180,_0x5cfc9a,_0x10ca49,!![]),_0x64d343[_0x726639(0x179)](0x0,_0x524180,_0x204806,_0x1f2b90-_0x524180*0x2,_0x10ca49),_0x64d343[_0x726639(0x759)](0x0,_0x1f2b90-_0x524180,_0x204806,_0x524180,_0x10ca49,_0x5cfc9a,!![]),this[_0x726639(0x4cc)][_0x726639(0x474)](0x0,0x0,_0x204806,_0x1f2b90);}},Window_ActorCommand[_0x2dcaec(0xaf6)][_0x2dcaec(0x590)]=function(){const _0x547098=_0x2dcaec;if(!this[_0x547098(0xaf8)])return;const _0xc16614=VisuMZ[_0x547098(0xae3)][_0x547098(0xbeb)][_0x547098(0x40e)],_0x1aa9b1=this[_0x547098(0x3a9)]();switch(_0x1aa9b1){case _0x547098(0x75a):this[_0x547098(0x7f8)]($dataSkills[this['_actor'][_0x547098(0x435)]()]);break;case _0x547098(0x64c):this[_0x547098(0x7f8)]($dataSkills[this['_actor'][_0x547098(0xc2c)]()]);break;case'skill':const _0x48ebf6=_0xc16614[_0x547098(0x8e9)],_0x1cd217=_0x48ebf6['format']($dataSystem['skillTypes'][this[_0x547098(0x34e)]()]);this[_0x547098(0x6ca)]['setText'](_0x1cd217);break;case _0x547098(0xa02):this[_0x547098(0x7f8)]($dataSkills[this['currentExt']()]);break;case'item':this[_0x547098(0x6ca)][_0x547098(0xa9d)](_0xc16614[_0x547098(0x289)]);break;case'escape':this[_0x547098(0x6ca)][_0x547098(0xa9d)](_0xc16614['HelpEscape']);break;case _0x547098(0x837):this['_helpWindow'][_0x547098(0xa9d)](_0xc16614[_0x547098(0x4a3)]);break;case'status':this[_0x547098(0x6ca)][_0x547098(0xa9d)](Window_InBattleStatus[_0x547098(0x7e9)][_0x547098(0xa8c)]);break;default:this['_helpWindow'][_0x547098(0xa9d)]('');break;}},Window_ActorCommand['prototype'][_0x2dcaec(0x7ab)]=function(){const _0x1e478e=_0x2dcaec;this[_0x1e478e(0xac5)](0x0);if(this[_0x1e478e(0xaf8)]&&ConfigManager[_0x1e478e(0xb24)]){const _0x2637fe=this[_0x1e478e(0xaf8)][_0x1e478e(0x4e6)]();this[_0x1e478e(0x26a)](_0x2637fe);if(_0x2637fe===_0x1e478e(0x7d5)){const _0x2aa617=this[_0x1e478e(0xaf8)][_0x1e478e(0x55f)]();if(_0x2aa617){const _0x18672b=this[_0x1e478e(0xc55)](_0x1e478e(0x7d5),_0x2aa617[_0x1e478e(0x193)]);this[_0x1e478e(0x44e)](_0x18672b||0x0);}}else{if(_0x2637fe===_0x1e478e(0xa02)){const _0x10c77f=this['_actor']['lastBattleSkill']();if(_0x10c77f){const _0x2d78cd=this[_0x1e478e(0xc55)](_0x1e478e(0xa02),_0x10c77f['id']);this[_0x1e478e(0x44e)](_0x2d78cd||0x0);}}}}},Window_ActorCommand['prototype']['findSymbolExt']=function(_0x31fec3,_0x3fc0eb){return this['_list']['findIndex'](_0x4c062b=>_0x4c062b['symbol']===_0x31fec3&&_0x4c062b['ext']===_0x3fc0eb);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x74c)]=Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x41be06){const _0x4292b1=_0x2dcaec;VisuMZ[_0x4292b1(0xae3)][_0x4292b1(0x74c)][_0x4292b1(0x390)](this,_0x41be06),this[_0x4292b1(0x469)](),this['createAttachmentSprites']();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x9c9)]=function(){const _0x1e940d=_0x2dcaec;if(this[_0x1e940d(0xb73)])return this[_0x1e940d(0xb73)];return this[_0x1e940d(0xb73)]=SceneManager[_0x1e940d(0x496)][_0x1e940d(0x9c9)](),this['_battleLayoutStyle'];},Window_BattleStatus['prototype'][_0x2dcaec(0x469)]=function(){const _0x2cf5ba=_0x2dcaec;this[_0x2cf5ba(0x659)]=this['isFrameVisible']();const _0x1d0d07=VisuMZ[_0x2cf5ba(0xae3)][_0x2cf5ba(0xbeb)]['BattleLayout'];_0x1d0d07[_0x2cf5ba(0x56c)]&&(this[_0x2cf5ba(0x19d)]=0x0);},Window_BattleStatus[_0x2dcaec(0xaf6)]['isFrameVisible']=function(){const _0x1887e5=_0x2dcaec,_0x226ba8=VisuMZ[_0x1887e5(0xae3)][_0x1887e5(0xbeb)][_0x1887e5(0x247)];if(_0x226ba8[_0x1887e5(0x2ce)])return!![];const _0x4df0e4=this['battleLayoutStyle']();switch(_0x4df0e4){case'list':case'border':return!![];break;case _0x1887e5(0x30e):case'xp':case _0x1887e5(0x3ec):default:return![];break;}},Window_BattleStatus['prototype'][_0x2dcaec(0x92f)]=function(){const _0x10b1ef=_0x2dcaec;return this[_0x10b1ef(0xc11)]()?0x0:0xa;},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d8)]=function(){const _0x12f240=_0x2dcaec,_0x39c8f6=this['battleLayoutStyle']();switch(_0x39c8f6){case _0x12f240(0x97c):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x12f240(0x429)]()[_0x12f240(0x7ce)];break;case _0x12f240(0x30e):default:return $gameParty[_0x12f240(0x724)]();break;}},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x81f)]=function(){const _0x33f27c=_0x2dcaec,_0x355d0a=this[_0x33f27c(0x9c9)]();switch(_0x355d0a){case'list':return Window_StatusBase[_0x33f27c(0xaf6)]['itemHeight'][_0x33f27c(0x390)](this);break;case _0x33f27c(0x30e):case'xp':case'portrait':default:return this[_0x33f27c(0x74b)];break;}},Window_BattleStatus[_0x2dcaec(0xaf6)]['rowSpacing']=function(){const _0x269720=_0x2dcaec,_0x3d11e6=this[_0x269720(0x9c9)]();switch(_0x3d11e6){case _0x269720(0x97c):return Window_StatusBase[_0x269720(0xaf6)][_0x269720(0xc19)][_0x269720(0x390)](this);break;case _0x269720(0x30e):case'xp':case _0x269720(0x3ec):default:return 0x0;break;}},Window_BattleStatus['prototype'][_0x2dcaec(0xb33)]=function(){const _0x414c81=_0x2dcaec;this[_0x414c81(0xc11)]()?Window_StatusBase[_0x414c81(0xaf6)][_0x414c81(0xb33)][_0x414c81(0x390)](this):this[_0x414c81(0xb4b)]=0x8;},Window_BattleStatus['prototype'][_0x2dcaec(0x2d2)]=function(){const _0x3a71ac=_0x2dcaec,_0xd084=VisuMZ[_0x3a71ac(0xae3)]['Settings'][_0x3a71ac(0x247)];_0xd084[_0x3a71ac(0x2ce)]?this[_0x3a71ac(0x6bc)]=ImageManager['loadSystem'](_0xd084[_0x3a71ac(0x2ce)]):Window_StatusBase['prototype'][_0x3a71ac(0x2d2)][_0x3a71ac(0x390)](this);},Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemBackground']=function(_0x2e350e){const _0x63bed5=_0x2dcaec,_0x166f35=VisuMZ[_0x63bed5(0xae3)][_0x63bed5(0xbeb)][_0x63bed5(0x247)];if(_0x166f35['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x63bed5(0xaf6)][_0x63bed5(0x587)][_0x63bed5(0x390)](this,_0x2e350e);},Window_BattleStatus['prototype'][_0x2dcaec(0xb34)]=function(){const _0x492f1b=_0x2dcaec;this[_0x492f1b(0x3a7)]=!![];},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x5e84d7=_0x2dcaec;Window_StatusBase[_0x5e84d7(0xaf6)]['update']['call'](this),this[_0x5e84d7(0x42a)](),this[_0x5e84d7(0xaed)]();if(this[_0x5e84d7(0x9c9)]()===_0x5e84d7(0x541))this[_0x5e84d7(0x1fc)]();},Window_BattleStatus['prototype'][_0x2dcaec(0x42a)]=function(){const _0x220690=_0x2dcaec;if($gameTemp[_0x220690(0x7dc)]())this[_0x220690(0x811)](),this[_0x220690(0x3a7)]=![],$gameTemp[_0x220690(0xb6a)]();else this[_0x220690(0x3a7)]&&(this[_0x220690(0x3a7)]=![],this[_0x220690(0xbc9)](),this['updateAttachmentSprites']());},Window_BattleStatus[_0x2dcaec(0xaf6)]['show']=function(){const _0x46d54c=_0x2dcaec;Window_StatusBase[_0x46d54c(0xaf6)][_0x46d54c(0xbc5)]['call'](this);if(!$gameSystem['isSideView']())this[_0x46d54c(0xbc9)]();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x4df)]=function(){const _0x3f1d23=_0x2dcaec;if(this[_0x3f1d23(0x61d)]===Window_BattleStatus)return;Window_StatusBase[_0x3f1d23(0xaf6)][_0x3f1d23(0x4df)][_0x3f1d23(0x390)](this);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x181)]=function(_0x19fad8){const _0x2c76f2=_0x2dcaec,_0x1ab9b2=this[_0x2c76f2(0x9c9)]();switch(_0x1ab9b2){case'xp':case _0x2c76f2(0x3ec):break;case _0x2c76f2(0x30e):case _0x2c76f2(0x97c):case _0x2c76f2(0x541):default:return Window_StatusBase['prototype'][_0x2c76f2(0x181)][_0x2c76f2(0x390)](this,_0x19fad8);break;}},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleStatus_drawItemImage']=Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x396)],Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemImage']=function(_0x1e7a1c){const _0x527a77=_0x2dcaec,_0xa22dc3=this[_0x527a77(0x9c9)]();switch(_0xa22dc3){case'list':this[_0x527a77(0x742)](_0x1e7a1c);break;case'xp':this[_0x527a77(0x5c9)](_0x1e7a1c);break;case _0x527a77(0x3ec):this[_0x527a77(0x357)](_0x1e7a1c);break;case _0x527a77(0x30e):case _0x527a77(0x541):default:VisuMZ['BattleCore'][_0x527a77(0x744)][_0x527a77(0x390)](this,_0x1e7a1c);break;}},Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemStatus']=function(_0x2be4a0){const _0x3b5e91=_0x2dcaec,_0x23c589=this[_0x3b5e91(0x9c9)]();if(!$gameSystem[_0x3b5e91(0x334)]())this[_0x3b5e91(0x841)](_0x2be4a0);switch(_0x23c589){case _0x3b5e91(0x97c):this[_0x3b5e91(0x700)](_0x2be4a0);break;case'xp':case _0x3b5e91(0x3ec):case'default':case _0x3b5e91(0x541):default:this[_0x3b5e91(0x4bd)](_0x2be4a0);break;}},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x393)]=function(){const _0x1216ae=_0x2dcaec,_0x3ca0ed=this[_0x1216ae(0x9c9)]();if(['xp'][_0x1216ae(0x7f2)](_0x3ca0ed)&&!$gameSystem[_0x1216ae(0x334)]()){this['setCursorRect'](0x0,0x0,0x0,0x0);return;}Window_StatusBase[_0x1216ae(0xaf6)][_0x1216ae(0x393)][_0x1216ae(0x390)](this);},Window_BattleStatus['prototype']['centerFrontViewSprite']=function(_0x4aaf99){const _0x2b409e=_0x2dcaec,_0x252e96=this[_0x2b409e(0x3fc)](_0x4aaf99)[_0x2b409e(0xbc2)]();if(!_0x252e96)return;const _0x40ac15=this[_0x2b409e(0x9c9)](),_0x5ba798=this[_0x2b409e(0x574)](_0x4aaf99);let _0x4ac728=Math[_0x2b409e(0x976)](_0x5ba798['x']+_0x5ba798[_0x2b409e(0x64b)]/0x2)+this[_0x2b409e(0xb4b)];[_0x2b409e(0x97c)][_0x2b409e(0x7f2)](_0x40ac15)&&(_0x4ac728=_0x5ba798[_0x2b409e(0x64b)]/$gameParty[_0x2b409e(0x429)]()['length'],_0x4ac728*=_0x4aaf99,_0x4ac728+=_0x5ba798[_0x2b409e(0x64b)]/$gameParty[_0x2b409e(0x429)]()['length']/0x2);let _0x3a4333=Math[_0x2b409e(0x976)](this[_0x2b409e(0x7fc)](_0x4aaf99,_0x252e96,_0x5ba798));_0x252e96['setHome'](_0x4ac728,_0x3a4333),this[_0x2b409e(0x994)](_0x252e96,0x1),_0x252e96[_0x2b409e(0xbc5)](),this['updateEffectsContainer'](),this[_0x2b409e(0xaf5)]();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x7fc)]=function(_0x2c0e7a,_0x2564b8,_0x285861){const _0x8414ad=_0x2dcaec,_0x2544fa=VisuMZ['BattleCore']['Settings']['BattleLayout'],_0x15d80c=this['battleLayoutStyle']();if(_0x15d80c==='xp'){const _0x17ae4a=_0x2544fa[_0x8414ad(0x797)];switch(_0x17ae4a['toLowerCase']()[_0x8414ad(0x651)]()){case'bottom':return _0x285861[_0x8414ad(0x75c)]-_0x2564b8[_0x8414ad(0x399)][_0x8414ad(0x75c)]/0x4;break;case _0x8414ad(0xc43):const _0xc4902=_0x2544fa['XPActorDefaultHeight'];return(_0x285861[_0x8414ad(0x75c)]+(_0x2564b8[_0x8414ad(0x75c)]||_0xc4902))/0x2;break;case _0x8414ad(0xa33):return 0x0;case _0x8414ad(0x321):default:return this[_0x8414ad(0x9e5)](_0x285861);break;}}else{if(_0x15d80c===_0x8414ad(0x3ec)){}}return _0x2564b8[_0x8414ad(0x75c)];},Sprite_Name['prototype'][_0x2dcaec(0x901)]=function(){return 0x24;},Sprite_Name[_0x2dcaec(0xaf6)][_0x2dcaec(0x4b1)]=function(){const _0x31e293=_0x2dcaec,_0x2a25d0=this['name'](),_0x1396d0=this[_0x31e293(0x207)](),_0x58db1f=this[_0x31e293(0x901)]();this['setupFont'](),this[_0x31e293(0x4ca)][_0x31e293(0xb7e)](),this['bitmap'][_0x31e293(0x174)](_0x2a25d0,0x4,0x0,_0x1396d0,_0x58db1f,_0x31e293(0x99d));},Bitmap[_0x2dcaec(0xaf6)][_0x2dcaec(0x174)]=function(_0x2c4635,_0x47cccd,_0x2816f6,_0x1053be,_0x3725b5,_0x4986f0){const _0x134a0d=_0x2dcaec;TextManager['parseLocalizedText']&&(_0x2c4635=TextManager['parseLocalizedText'](_0x2c4635));const _0x502bf1=this[_0x134a0d(0x663)],_0xf949af=_0x502bf1[_0x134a0d(0x6fb)];_0x1053be=_0x1053be||0xffffffff;let _0x8ee792=_0x47cccd,_0x23991b=Math['round'](_0x2816f6+0x18/0x2+this['fontSize']*0.35);_0x4986f0===_0x134a0d(0xc43)&&(_0x8ee792+=_0x1053be/0x2),_0x4986f0==='right'&&(_0x8ee792+=_0x1053be),_0x502bf1[_0x134a0d(0xa41)](),_0x502bf1['font']=this[_0x134a0d(0x8db)](),_0x502bf1[_0x134a0d(0xc4d)]=_0x4986f0,_0x502bf1[_0x134a0d(0x725)]=_0x134a0d(0x194),_0x502bf1[_0x134a0d(0x6fb)]=0x1,this[_0x134a0d(0xab3)](_0x2c4635,_0x8ee792,_0x23991b,_0x1053be),_0x502bf1['globalAlpha']=_0xf949af,this[_0x134a0d(0x3a6)](_0x2c4635,_0x8ee792,_0x23991b,_0x1053be),_0x502bf1[_0x134a0d(0xa95)](),this['_baseTexture']['update']();},Window_BattleStatus[_0x2dcaec(0xaf6)]['nameY']=function(_0x542340){const _0x2e68c7=_0x2dcaec;return this['basicGaugesY'](_0x542340)-this[_0x2e68c7(0x2b3)]();},Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemImageListStyle']=function(_0x3c11f5){const _0x1c18af=_0x2dcaec;if(!VisuMZ[_0x1c18af(0xae3)][_0x1c18af(0xbeb)]['BattleLayout'][_0x1c18af(0xad3)])return;const _0x788c57=this['actor'](_0x3c11f5),_0x545dfc=this[_0x1c18af(0x574)](_0x3c11f5);_0x545dfc[_0x1c18af(0x64b)]=ImageManager['faceWidth'],_0x545dfc[_0x1c18af(0x75c)]-=0x2,this[_0x1c18af(0xba9)](_0x788c57,_0x545dfc['x']+0x1,_0x545dfc['y']+0x1,_0x545dfc[_0x1c18af(0x64b)],_0x545dfc[_0x1c18af(0x75c)]);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x700)]=function(_0x435825){const _0x124df3=_0x2dcaec,_0xb82c77=VisuMZ[_0x124df3(0xae3)][_0x124df3(0xbeb)][_0x124df3(0x247)],_0x1ced5c=$dataSystem[_0x124df3(0x2c3)]?0x4:0x3,_0x47a8a9=_0x1ced5c*0x80+(_0x1ced5c-0x1)*0x8+0x4,_0x3c3cce=this[_0x124df3(0x3fc)](_0x435825),_0x184759=this[_0x124df3(0x574)](_0x435825);let _0x52b23d=_0x184759['x']+this[_0x124df3(0xb4b)];_0xb82c77[_0x124df3(0xad3)]?_0x52b23d=_0x184759['x']+ImageManager[_0x124df3(0xaaf)]+0x8:_0x52b23d+=ImageManager[_0x124df3(0x65c)];const _0x4f0ae7=Math[_0x124df3(0x976)](Math[_0x124df3(0xaf1)](_0x184759['x']+_0x184759[_0x124df3(0x64b)]-_0x47a8a9,_0x52b23d)),_0x46618d=Math[_0x124df3(0x976)](_0x184759['y']+(_0x184759[_0x124df3(0x75c)]-Sprite_Name['prototype'][_0x124df3(0x901)]())/0x2),_0x52f300=Math[_0x124df3(0x976)](_0x4f0ae7-ImageManager['iconWidth']/0x2-0x4),_0x15d721=Math[_0x124df3(0x976)](_0x184759['y']+(_0x184759[_0x124df3(0x75c)]-ImageManager[_0x124df3(0x167)])/0x2+ImageManager[_0x124df3(0x167)]/0x2);let _0xf62077=_0x4f0ae7+0x88;const _0x1db3f1=_0x46618d;this[_0x124df3(0x762)](_0x3c3cce,_0x4f0ae7-0x4+(_0xb82c77['TpbGaugeOffsetX']||0x0),_0x46618d+(_0xb82c77[_0x124df3(0x5ca)]||0x0)),this[_0x124df3(0x594)](_0x3c3cce,_0x4f0ae7+(_0xb82c77[_0x124df3(0xa4f)]||0x0),_0x46618d+(_0xb82c77[_0x124df3(0xa07)]||0x0)),this[_0x124df3(0x458)](_0x3c3cce,_0x52f300+(_0xb82c77['StateIconOffsetX']||0x0),_0x15d721+(_0xb82c77[_0x124df3(0x514)]||0x0)),this[_0x124df3(0x27d)](_0x3c3cce,'hp',_0xf62077+0x88*0x0+(_0xb82c77[_0x124df3(0x5c8)]||0x0),_0x1db3f1+(_0xb82c77['HpGaugeOffsetY']||0x0)),this[_0x124df3(0x27d)](_0x3c3cce,'mp',_0xf62077+0x88*0x1+(_0xb82c77['MpGaugeOffsetX']||0x0),_0x1db3f1+(_0xb82c77[_0x124df3(0x38f)]||0x0)),$dataSystem['optDisplayTp']&&this[_0x124df3(0x27d)](_0x3c3cce,'tp',_0xf62077+0x88*0x2+(_0xb82c77[_0x124df3(0x39b)]||0x0),_0x1db3f1+(_0xb82c77[_0x124df3(0x83c)]||0x0));},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x5c9)]=function(_0x54fcb7){const _0x2b567e=_0x2dcaec;if(!$gameSystem[_0x2b567e(0x334)]())return;VisuMZ[_0x2b567e(0xae3)][_0x2b567e(0x744)][_0x2b567e(0x390)](this,_0x54fcb7);},Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemStatusXPStyle']=function(_0x2cfb1b){const _0x1be5a9=_0x2dcaec,_0x4639f4=VisuMZ[_0x1be5a9(0xae3)]['Settings']['BattleLayout'],_0x2ed020=this[_0x1be5a9(0x3fc)](_0x2cfb1b),_0x3f2b2b=this['itemRect'](_0x2cfb1b),_0x2b89b3=Math[_0x1be5a9(0x976)](_0x3f2b2b['x']+(_0x3f2b2b[_0x1be5a9(0x64b)]-0x80)/0x2),_0x26468d=this['nameY'](_0x3f2b2b);let _0x19db4e=_0x2b89b3-ImageManager['iconWidth']/0x2-0x4,_0x544af4=_0x26468d+ImageManager['iconHeight']/0x2;_0x19db4e-ImageManager[_0x1be5a9(0x65c)]/0x2<_0x3f2b2b['x']&&(_0x19db4e=_0x2b89b3+ImageManager[_0x1be5a9(0x65c)]/0x2-0x4,_0x544af4=_0x26468d-ImageManager['iconHeight']/0x2);const _0x4afc6a=_0x2b89b3,_0x4b3943=this['basicGaugesY'](_0x3f2b2b);this[_0x1be5a9(0x762)](_0x2ed020,_0x2b89b3+(_0x4639f4[_0x1be5a9(0x55b)]||0x0),_0x26468d+(_0x4639f4['TpbGaugeOffsetY']||0x0)),this[_0x1be5a9(0x594)](_0x2ed020,_0x2b89b3+(_0x4639f4[_0x1be5a9(0xa4f)]||0x0),_0x26468d+(_0x4639f4['NameOffsetY']||0x0)),this[_0x1be5a9(0x458)](_0x2ed020,_0x19db4e+(_0x4639f4['StateIconOffsetX']||0x0),_0x544af4+(_0x4639f4[_0x1be5a9(0x514)]||0x0)),this[_0x1be5a9(0x27d)](_0x2ed020,'hp',_0x4afc6a+(_0x4639f4[_0x1be5a9(0x5c8)]||0x0),_0x4b3943+(_0x4639f4['HpGaugeOffsetY']||0x0)),this['placeGauge'](_0x2ed020,'mp',_0x4afc6a+(_0x4639f4['MpGaugeOffsetX']||0x0),_0x4b3943+this[_0x1be5a9(0x2b3)]()+(_0x4639f4[_0x1be5a9(0x38f)]||0x0)),$dataSystem[_0x1be5a9(0x2c3)]&&this[_0x1be5a9(0x27d)](_0x2ed020,'tp',_0x4afc6a+(_0x4639f4[_0x1be5a9(0x39b)]||0x0),_0x4b3943+this[_0x1be5a9(0x2b3)]()*0x2+(_0x4639f4[_0x1be5a9(0x83c)]||0x0));},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x51f)]=function(_0x44aed5){const _0x31bd65=_0x2dcaec;if(!VisuMZ[_0x31bd65(0xae3)]['Settings'][_0x31bd65(0x247)][_0x31bd65(0x9ea)])return![];if(_0x44aed5[_0x31bd65(0x296)]())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x44aed5[_0x31bd65(0x9b4)]();},Game_Actor[_0x2dcaec(0xaf6)]['getBattlePortraitOffsetX']=function(){const _0x1aa6ad=_0x2dcaec;if(this[_0x1aa6ad(0x3fc)]()[_0x1aa6ad(0x795)][_0x1aa6ad(0xb9e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x1aa6ad(0x3fc)]()[_0x1aa6ad(0x795)][_0x1aa6ad(0xb9e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x2dcaec(0xaf6)]['getBattlePortraitOffsetY']=function(){const _0x5444f5=_0x2dcaec;if(this[_0x5444f5(0x3fc)]()['note']['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x5444f5(0x3fc)]()[_0x5444f5(0x795)][_0x5444f5(0xb9e)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x2dcaec(0xaf6)]['drawItemImagePortraitStyle']=function(_0x52a16d){const _0x53e0aa=_0x2dcaec,_0x257f35=this[_0x53e0aa(0x3fc)](_0x52a16d);if(this[_0x53e0aa(0x51f)](_0x257f35)){const _0x568e21=_0x53e0aa(0xa58)[_0x53e0aa(0xb60)](_0x257f35[_0x53e0aa(0x8f3)]()),_0x426c69=this['createInnerPortrait'](_0x568e21,Sprite),_0x3065b8=_0x257f35[_0x53e0aa(0xaa6)]();_0x3065b8!==''?_0x426c69['bitmap']=ImageManager[_0x53e0aa(0x39f)](_0x3065b8):_0x426c69[_0x53e0aa(0x4ca)]=ImageManager[_0x53e0aa(0x3aa)];const _0x28ce18=this[_0x53e0aa(0x574)](_0x52a16d);_0x426c69[_0x53e0aa(0x156)]['x']=0.5,_0x426c69['anchor']['y']=0x1;let _0x33ea2e=Math[_0x53e0aa(0x976)](_0x28ce18['x']+_0x28ce18['width']/0x2)+this['padding'];_0x33ea2e+=_0x257f35['getBattlePortraitOffsetX']();let _0x1be57f=Math['round'](this[_0x53e0aa(0x75c)]);_0x1be57f+=_0x257f35[_0x53e0aa(0x3c6)](),_0x426c69[_0x53e0aa(0x5bf)](_0x33ea2e,_0x1be57f);const _0x50fc3c=VisuMZ['BattleCore']['Settings'][_0x53e0aa(0x247)][_0x53e0aa(0xbfa)];_0x426c69[_0x53e0aa(0x8a3)]['x']=_0x50fc3c,_0x426c69[_0x53e0aa(0x8a3)]['y']=_0x50fc3c,_0x426c69[_0x53e0aa(0xbc5)]();}else{const _0x40eacc=this[_0x53e0aa(0xb18)](_0x52a16d);this[_0x53e0aa(0xba9)](_0x257f35,_0x40eacc['x'],_0x40eacc['y'],_0x40eacc['width'],_0x40eacc[_0x53e0aa(0x75c)]);}},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xb02)]=function(_0x5bc275,_0x2d06d6){const _0x594c30=_0x2dcaec,_0xef76fa=this['_additionalSprites'];if(_0xef76fa[_0x5bc275])return _0xef76fa[_0x5bc275];else{const _0x52958a=new _0x2d06d6();return _0xef76fa[_0x5bc275]=_0x52958a,this['addChildToBack'](_0x52958a),this[_0x594c30(0x8e8)](this[_0x594c30(0x9dd)]),_0x52958a;}},Window_BattleStatus['prototype'][_0x2dcaec(0xbcf)]=function(){const _0x54bdf1=_0x2dcaec;this['_createCursorArea'](),this[_0x54bdf1(0xbdf)](),Window_StatusBase[_0x54bdf1(0xaf6)][_0x54bdf1(0xbcf)][_0x54bdf1(0x390)](this),this[_0x54bdf1(0xb0a)]();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x9cb)]=function(){const _0x256d2e=_0x2dcaec;this['_cursorArea']=new Sprite(),this[_0x256d2e(0x9dd)][_0x256d2e(0x6ef)]=[new PIXI[(_0x256d2e(0x6ef))][(_0x256d2e(0x760))]()],this[_0x256d2e(0x9dd)][_0x256d2e(0x63c)]=new Rectangle(),this[_0x256d2e(0x9dd)][_0x256d2e(0x5bf)](this['_padding'],this[_0x256d2e(0xb57)]),this[_0x256d2e(0x83f)](this[_0x256d2e(0x9dd)]);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xbdf)]=function(){const _0x5c4b65=_0x2dcaec;this[_0x5c4b65(0x422)]=new Sprite(),this[_0x5c4b65(0x83f)](this[_0x5c4b65(0x422)]);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xc63)]=function(){const _0x13e32c=_0x2dcaec;this['_effectsContainer']&&this['addChild'](this[_0x13e32c(0x422)]);},Window_BattleStatus['prototype'][_0x2dcaec(0xb0a)]=function(){const _0x408b1e=_0x2dcaec;this[_0x408b1e(0x8c9)]=new Sprite(),this[_0x408b1e(0x83f)](this[_0x408b1e(0x8c9)]);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x1aa)]=function(){const _0x374ef7=_0x2dcaec;this[_0x374ef7(0x557)]=new Sprite();for(let _0x5de83d=0x0;_0x5de83d<0x9;_0x5de83d++){this[_0x374ef7(0x557)][_0x374ef7(0x83f)](new Sprite());}this['_cursorArea']['addChild'](this['_cursorSprite']);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xa30)]=function(){const _0x4ce662=_0x2dcaec;Window_StatusBase['prototype'][_0x4ce662(0xa30)][_0x4ce662(0x390)](this),this[_0x4ce662(0xa70)]();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xa70)]=function(){const _0x586c52=_0x2dcaec,_0x3b4f18=this['_padding'];this['_cursorArea'][_0x586c52(0x5bf)](_0x3b4f18,_0x3b4f18),this[_0x586c52(0x9dd)]['x']=_0x3b4f18-this[_0x586c52(0xb2a)]['x'],this[_0x586c52(0x9dd)]['y']=_0x3b4f18-this['origin']['y'],this[_0x586c52(0x86d)]>0x0&&this[_0x586c52(0x74b)]>0x0?this['_cursorArea']['visible']=this['isOpen']():this[_0x586c52(0x9dd)][_0x586c52(0xaba)]=![];},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xb9a)]=function(){const _0x24b714=_0x2dcaec;Window_StatusBase[_0x24b714(0xaf6)][_0x24b714(0xb9a)][_0x24b714(0x390)](this),this['_updateCursorFilterArea']();},Window_BattleStatus['prototype']['_updateCursorFilterArea']=function(){const _0x26315c=_0x2dcaec,_0x4d1d29=this[_0x26315c(0x9dd)][_0x26315c(0x13d)][_0x26315c(0xb68)](new Point(0x0,0x0)),_0x294be3=this[_0x26315c(0x9dd)][_0x26315c(0x63c)];_0x294be3['x']=_0x4d1d29['x']+this[_0x26315c(0xb2a)]['x'],_0x294be3['y']=_0x4d1d29['y']+this[_0x26315c(0xb2a)]['y'],_0x294be3[_0x26315c(0x64b)]=this['innerWidth'],_0x294be3[_0x26315c(0x75c)]=this[_0x26315c(0x74b)];},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x60b)]=function(_0x517e71){const _0x3728ed=_0x2dcaec;if(this[_0x3728ed(0x9c9)]()!=='portrait')return;this[_0x3728ed(0x357)](_0x517e71[_0x3728ed(0x6fc)]());},Window_BattleStatus[_0x2dcaec(0xaf6)]['addDamageSprite']=function(_0x3f3f55,_0x3038f1){const _0x302a48=_0x2dcaec;if(!this[_0x302a48(0x8c9)])return;if(!_0x3f3f55)return;if(!_0x3038f1)return;const _0x371c08=this[_0x302a48(0x574)](_0x3038f1['index']());_0x371c08['x']+=_0x371c08['width']/0x2+this['padding'],_0x3f3f55['x']=_0x371c08['x'],_0x3f3f55['y']=_0x371c08['y'],this[_0x302a48(0x8c9)][_0x302a48(0x83f)](_0x3f3f55);},Window_BattleStatus['prototype'][_0x2dcaec(0x8ee)]=function(_0x55d49a){const _0x393043=_0x2dcaec;if(!this[_0x393043(0x8c9)])return;if(!_0x55d49a)return;this[_0x393043(0x8c9)][_0x393043(0xa03)](_0x55d49a);},Window_BattleStatus[_0x2dcaec(0xaf6)]['updateBorderStyle']=function(){const _0x3fc042=_0x2dcaec;if(!this[_0x3fc042(0x570)]())return;if(!this[_0x3fc042(0x163)])this[_0x3fc042(0x3e6)]();this[_0x3fc042(0xacb)](),this[_0x3fc042(0x5aa)]();},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x570)]=function(){const _0x466269=_0x2dcaec;if(this[_0x466269(0x61d)]!==Window_BattleStatus)return![];if(!SceneManager[_0x466269(0xa2b)]())return![];return VisuMZ[_0x466269(0xae3)][_0x466269(0xbeb)][_0x466269(0x247)][_0x466269(0x537)];},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x3e6)]=function(){const _0x57368c=_0x2dcaec;this['_borderPortraitSprite']=new Sprite();const _0x1d4a47=SceneManager[_0x57368c(0x496)],_0x5a1ec0=_0x1d4a47[_0x57368c(0x18e)]['indexOf'](_0x1d4a47[_0x57368c(0x3c9)]);_0x1d4a47[_0x57368c(0x994)](this['_borderPortraitSprite'],_0x5a1ec0),this['_borderPortraitSprite']['anchor']['x']=0.5,this[_0x57368c(0x163)][_0x57368c(0x156)]['y']=0x1;const _0x4f84ea=VisuMZ[_0x57368c(0xae3)][_0x57368c(0xbeb)][_0x57368c(0x247)][_0x57368c(0x162)];this[_0x57368c(0x163)][_0x57368c(0x8a3)]['x']=_0x4f84ea,this[_0x57368c(0x163)][_0x57368c(0x8a3)]['y']=_0x4f84ea,this['_borderPortraitSprite']['y']=this['y']+this[_0x57368c(0x75c)],this[_0x57368c(0x8a6)]=0x0;},Window_BattleStatus['prototype'][_0x2dcaec(0x80a)]=function(){const _0x4a2a5e=_0x2dcaec;return BattleManager[_0x4a2a5e(0x5f5)]();},Window_BattleStatus['prototype'][_0x2dcaec(0xacb)]=function(){const _0x47cbc4=_0x2dcaec;this[_0x47cbc4(0x163)]['visible']=this[_0x47cbc4(0x80a)]();const _0x4aa9e1=BattleManager[_0x47cbc4(0x3fc)](),_0x3b8d47=_0x4aa9e1?_0x4aa9e1[_0x47cbc4(0xaa6)]()||'':'';if(_0x4aa9e1===this[_0x47cbc4(0x163)][_0x47cbc4(0x3fc)]&&_0x3b8d47===this['_borderPortraitSprite'][_0x47cbc4(0x597)])return;this['_borderPortraitSprite'][_0x47cbc4(0x3fc)]=_0x4aa9e1||this[_0x47cbc4(0x163)][_0x47cbc4(0x3fc)],this[_0x47cbc4(0x163)][_0x47cbc4(0x597)]=_0x3b8d47;if(!_0x4aa9e1)return;else{if(_0x3b8d47===''){this[_0x47cbc4(0x163)]['bitmap']=ImageManager[_0x47cbc4(0x3aa)],this[_0x47cbc4(0x163)][_0x47cbc4(0x597)]='';return;}else{const _0x24b97e=ImageManager[_0x47cbc4(0x39f)](_0x3b8d47);this['_borderPortraitSprite'][_0x47cbc4(0x19d)]=0x0,_0x24b97e[_0x47cbc4(0x612)](this[_0x47cbc4(0x9ec)][_0x47cbc4(0x558)](this,_0x24b97e));}}},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x9ec)]=function(_0x578c74){const _0x38988f=_0x2dcaec;this[_0x38988f(0x8a6)]=0x14,this[_0x38988f(0x163)]['bitmap']=_0x578c74;SceneManager[_0x38988f(0x496)][_0x38988f(0x3e3)]()?(this[_0x38988f(0x163)]['x']=0x0,this[_0x38988f(0x25c)]=Math[_0x38988f(0xbd6)](_0x578c74[_0x38988f(0x64b)]/0x2)):(this[_0x38988f(0x163)]['x']=this[_0x38988f(0x64b)],this[_0x38988f(0x25c)]=this['width']*0x3/0x4);this[_0x38988f(0x163)][_0x38988f(0x19d)]=0x0,this[_0x38988f(0x163)]['y']=this['y']+this[_0x38988f(0x75c)];const _0x184c92=BattleManager[_0x38988f(0x3fc)]();_0x184c92&&(this[_0x38988f(0x25c)]+=_0x184c92['getBattlePortraitOffsetX'](),this[_0x38988f(0x163)]['y']+=_0x184c92['getBattlePortraitOffsetY']());},Window_BattleStatus[_0x2dcaec(0xaf6)]['updateBorderSprite']=function(){const _0x26c2e3=_0x2dcaec;if(this['_borderPortraitDuration']>0x0){const _0x3b921d=this[_0x26c2e3(0x8a6)],_0x3cb63b=this['_borderPortraitSprite'];_0x3cb63b['x']=(_0x3cb63b['x']*(_0x3b921d-0x1)+this[_0x26c2e3(0x25c)])/_0x3b921d,_0x3cb63b['opacity']=(_0x3cb63b['opacity']*(_0x3b921d-0x1)+0xff)/_0x3b921d,this[_0x26c2e3(0x8a6)]--;}},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xaed)]=function(){const _0x2bb9bf=_0x2dcaec;return;this[_0x2bb9bf(0x422)]&&(this[_0x2bb9bf(0x422)]['x']=this['x'],this['_effectsContainer']['y']=this['y']),this[_0x2bb9bf(0x8c9)]&&(this[_0x2bb9bf(0x8c9)]['x']=this['x'],this['_damageContainer']['y']=this['y']);},Window_BattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x983)]=function(){const _0x2ef46d=_0x2dcaec,_0x194b95=VisuMZ['BattleCore'][_0x2ef46d(0xbeb)]['BattleLayout'];if(_0x194b95[_0x2ef46d(0x676)]){const _0xf842c=new Sprite();_0xf842c[_0x2ef46d(0x4ca)]=ImageManager['loadSystem'](_0x194b95[_0x2ef46d(0x676)]),_0xf842c['x']=_0x194b95['StatusWindowAttachmentBackOffsetX']||0x0,_0xf842c['y']=_0x194b95[_0x2ef46d(0xa7c)]||0x0,this[_0x2ef46d(0x8e8)](_0xf842c),this[_0x2ef46d(0xb3d)]=_0xf842c;}if(_0x194b95['StatusWindowAttachmentFront']){const _0x1941a5=new Sprite();_0x1941a5['bitmap']=ImageManager[_0x2ef46d(0xa82)](_0x194b95[_0x2ef46d(0x1e9)]),_0x1941a5['x']=_0x194b95[_0x2ef46d(0xab7)]||0x0,_0x1941a5['y']=_0x194b95[_0x2ef46d(0xbc4)]||0x0,this['addChild'](_0x1941a5),this[_0x2ef46d(0x3f0)]=_0x1941a5;}},Window_BattleStatus['prototype'][_0x2dcaec(0xaf5)]=function(){const _0x4653b7=_0x2dcaec;this['_frontAttachmentSprite']&&this['addChild'](this[_0x4653b7(0x3f0)]),this[_0x4653b7(0xb3d)]&&this[_0x4653b7(0x8e8)](this['_backAttachmentSprite']);},Window_BattleActor[_0x2dcaec(0xaf6)][_0x2dcaec(0x263)]=function(){const _0x1a9ee7=_0x2dcaec;return this[_0x1a9ee7(0x4a9)]();},Window_BattleActor[_0x2dcaec(0xaf6)]['isActionSelectionValid']=function(){const _0x56286d=_0x2dcaec,_0x5f8ac2=BattleManager['inputtingAction']();if(!_0x5f8ac2)return!![];if(!_0x5f8ac2[_0x56286d(0x719)]())return!![];const _0x43457e=this[_0x56286d(0x3fc)](this['index']()),_0x261770=_0x5f8ac2[_0x56286d(0x719)]()[_0x56286d(0x795)];if(_0x5f8ac2[_0x56286d(0x3a4)]()){if(_0x43457e===BattleManager[_0x56286d(0x3fc)]())return![];}if(_0x5f8ac2['isForDeadFriend']()){if(!_0x43457e['isDead']())return![];}if(_0x5f8ac2[_0x56286d(0x4ad)]()){if(!_0x43457e['isAlive']())return![];}return!![];},Window_BattleActor[_0x2dcaec(0xaf6)][_0x2dcaec(0x427)]=function(_0x5517df){const _0x34eae6=_0x2dcaec;this[_0x34eae6(0x89d)]=_0x5517df;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x2ea)]=Window_BattleActor[_0x2dcaec(0xaf6)]['processTouch'],Window_BattleActor[_0x2dcaec(0xaf6)]['processTouch']=function(){const _0x3b7866=_0x2dcaec;Window_BattleStatus['prototype'][_0x3b7866(0x1cd)][_0x3b7866(0x390)](this),this[_0x3b7866(0x89d)]?this[_0x3b7866(0x650)]():VisuMZ['BattleCore'][_0x3b7866(0x2ea)][_0x3b7866(0x390)](this);},Window_BattleActor['prototype'][_0x2dcaec(0x650)]=function(){const _0x2caadf=_0x2dcaec,_0x39797a=SceneManager[_0x2caadf(0x496)]['_enemyWindow'];if(!_0x39797a)return;this['_doubleTouch']=![];const _0x35c23f=this[_0x2caadf(0x3d8)]();if(_0x35c23f>=0x0){this[_0x2caadf(0x44e)](_0x35c23f);if(TouchInput['isClicked']()){const _0x21d5c0=$gameParty[_0x2caadf(0x963)]()[_0x35c23f],_0x4033bd=_0x39797a['_enemies'][_0x2caadf(0x7bc)](_0x21d5c0);_0x4033bd>=0x0&&(_0x39797a['select'](_0x4033bd),_0x39797a[_0x2caadf(0x4ba)]());}}},Window_BattleActor['prototype'][_0x2dcaec(0x451)]=function(){const _0xf508dd=_0x2dcaec;this[_0xf508dd(0x89d)]&&(this[_0xf508dd(0xb88)]++,this[_0xf508dd(0x1d7)]=!![]);const _0x47bc4d=Window_BattleStatus[_0xf508dd(0xaf6)][_0xf508dd(0x451)]['call'](this);return this[_0xf508dd(0x89d)]&&(this[_0xf508dd(0x1d7)]=![]),_0x47bc4d;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc34)]=Window_BattleActor[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc5)],Window_BattleActor[_0x2dcaec(0xaf6)]['show']=function(){const _0x305077=_0x2dcaec;VisuMZ['BattleCore'][_0x305077(0xc34)][_0x305077(0x390)](this);const _0x1e5ea8=BattleManager[_0x305077(0x524)]();if(_0x1e5ea8){const _0x22cbd4=$gameParty[_0x305077(0x9ef)]();_0x1e5ea8[_0x305077(0x8fc)]()&&_0x22cbd4[_0x305077(0x7ce)]>0x1&&this[_0x305077(0x494)](_0x305077(0xa9e),this[_0x305077(0x282)][_0x305077(0x558)](this));}},VisuMZ['BattleCore'][_0x2dcaec(0xa4d)]=Window_BattleActor['prototype']['hide'],Window_BattleActor[_0x2dcaec(0xaf6)][_0x2dcaec(0x4df)]=function(){const _0x9ec7fe=_0x2dcaec;VisuMZ[_0x9ec7fe(0xae3)][_0x9ec7fe(0xa4d)][_0x9ec7fe(0x390)](this),delete this['_handlers'][_0x9ec7fe(0x3fe)],delete this[_0x9ec7fe(0x912)][_0x9ec7fe(0xa9e)];},Window_BattleActor[_0x2dcaec(0xaf6)]['selectAllActors']=function(){const _0x54f8f3=_0x2dcaec,_0x2ac33b=BattleManager['inputtingAction']();if(_0x2ac33b)_0x2ac33b[_0x54f8f3(0x200)](_0x54f8f3(0x7d3));this[_0x54f8f3(0x4ba)]();},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleEnemy_initialize']=Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)],Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x1ffa44){const _0x2a57cd=_0x2dcaec;this['_lastEnemy']=null,VisuMZ[_0x2a57cd(0xae3)][_0x2a57cd(0x92a)]['call'](this,_0x1ffa44);if(Imported[_0x2a57cd(0x205)]){if(VisuMZ[_0x2a57cd(0x852)][_0x2a57cd(0x620)]<1.12){let _0x24e1b6='';_0x24e1b6+=_0x2a57cd(0x978),_0x24e1b6+=_0x2a57cd(0x61a),_0x24e1b6+=_0x2a57cd(0x461),alert(_0x24e1b6),SceneManager['exit']();}}},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x9d8)]=function(){const _0x10fa8f=_0x2dcaec;return this[_0x10fa8f(0x466)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x343)]=Window_BattleEnemy[_0x2dcaec(0xaf6)]['show'],Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc5)]=function(){const _0x4379cf=_0x2dcaec;VisuMZ[_0x4379cf(0xae3)][_0x4379cf(0x343)][_0x4379cf(0x390)](this),this['y']=Graphics[_0x4379cf(0x75c)]*0xa,this[_0x4379cf(0xae5)]()&&this['openBattleActorWindow']();},VisuMZ['BattleCore']['Window_BattleEnemy_hide']=Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x4df)],Window_BattleEnemy[_0x2dcaec(0xaf6)]['hide']=function(){const _0x503958=_0x2dcaec;VisuMZ[_0x503958(0xae3)][_0x503958(0x2c8)][_0x503958(0x390)](this),$gameParty[_0x503958(0x44e)](null),delete this[_0x503958(0x912)][_0x503958(0x3fe)],delete this[_0x503958(0x912)][_0x503958(0xa9e)];},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x805)]=function(){const _0x565493=_0x2dcaec;let _0x1660fd=$gameTroop[_0x565493(0x9ef)]();const _0x53e6d4=BattleManager[_0x565493(0x524)]();if(_0x53e6d4){_0x53e6d4[_0x565493(0x8fc)]()&&_0x1660fd[_0x565493(0x7ce)]>0x1&&this[_0x565493(0x494)]('pageup',this['selectAllEnemies']['bind'](this));if(_0x53e6d4[_0x565493(0xb17)]()){const _0x436439=$gameParty['aliveMembers']();_0x1660fd=_0x1660fd['concat'](_0x436439),_0x53e6d4[_0x565493(0x8fc)]()&&_0x436439['length']>0x1&&this[_0x565493(0x494)]('pagedown',this[_0x565493(0x282)][_0x565493(0x558)](this));}}return _0x1660fd;},Window_BattleEnemy[_0x2dcaec(0xaf6)]['refresh']=function(){const _0x31eac8=_0x2dcaec;this[_0x31eac8(0x250)]=this[_0x31eac8(0x805)](),this[_0x31eac8(0xa8d)](),Window_Selectable[_0x31eac8(0xaf6)]['refresh']['call'](this);},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xa8d)]=function(){const _0x14c41d=_0x2dcaec;this[_0x14c41d(0x250)]['sort']((_0x3ed943,_0x38e47d)=>{const _0x3a571c=_0x14c41d;if(_0x3ed943[_0x3a571c(0x8d6)]()!==_0x38e47d[_0x3a571c(0x8d6)]()){if(_0x3ed943['isEnemy']())return-0x1;if(_0x38e47d['isEnemy']())return 0x1;}if(_0x3ed943[_0x3a571c(0x8d6)]()&&_0x38e47d[_0x3a571c(0x8d6)]())return _0x3ed943[_0x3a571c(0x6fc)]()-_0x38e47d[_0x3a571c(0x6fc)]();return _0x3ed943[_0x3a571c(0xbc2)]()['_baseX']===_0x38e47d[_0x3a571c(0xbc2)]()['_baseX']?_0x3ed943[_0x3a571c(0xbc2)]()['_baseY']-_0x38e47d[_0x3a571c(0xbc2)]()[_0x3a571c(0xa19)]:_0x3ed943[_0x3a571c(0xbc2)]()[_0x3a571c(0xae9)]-_0x38e47d['battler']()[_0x3a571c(0xae9)];}),SceneManager[_0x14c41d(0x78b)]()&&this[_0x14c41d(0x250)][_0x14c41d(0x137)]();},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0xa94)]=function(){const _0xff5aaf=_0x2dcaec,_0x167b87=VisuMZ[_0xff5aaf(0xae3)][_0xff5aaf(0xbeb)]['Enemy'];_0x167b87[_0xff5aaf(0x4b7)]?this[_0xff5aaf(0x988)]():this['autoSelectPriority']();},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x988)]=function(){const _0x5890a9=_0x2dcaec,_0x297774=BattleManager[_0x5890a9(0x524)]();if(_0x297774&&_0x297774['isForAnyone']()){if(_0x297774['isForAnyoneFocusFriends']()){if(this[_0x5890a9(0x593)]&&this[_0x5890a9(0x250)][_0x5890a9(0x7f2)](this['_lastActor'])){const _0x2b8364=this[_0x5890a9(0x250)][_0x5890a9(0x7bc)](this[_0x5890a9(0x593)]);return this[_0x5890a9(0xac5)](_0x2b8364);}else return this[_0x5890a9(0x799)]();}}if(this[_0x5890a9(0x9fd)]&&this[_0x5890a9(0x250)]['includes'](this[_0x5890a9(0x9fd)])){const _0x474dc7=this[_0x5890a9(0x250)][_0x5890a9(0x7bc)](this[_0x5890a9(0x9fd)]);this[_0x5890a9(0xac5)](_0x474dc7);}else this[_0x5890a9(0x799)]();},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x799)]=function(){const _0x34b19d=_0x2dcaec,_0xac0073=BattleManager[_0x34b19d(0x524)]();if(_0xac0073&&_0xac0073['isForAnyone']()){const _0x504308=$gameParty['aliveMembers']()[0x0];let _0x5678a1=this['_enemies']['indexOf'](_0x504308);const _0x60ee49=_0xac0073[_0x34b19d(0x719)]()[_0x34b19d(0x147)];if(_0x60ee49[_0x34b19d(0xb9e)](/(?:ALLY|FRIEND) OR (?:ENEMY|FOE)/i)){this[_0x34b19d(0xac5)](_0x5678a1);return;}else{if(_0x60ee49['match'](/(?:ENEMY|FOE) OR (?:ALLY|FRIEND)/i)){this[_0x34b19d(0xac5)](_0x5678a1-0x1);return;}}}const _0x4d1430=VisuMZ[_0x34b19d(0xae3)][_0x34b19d(0xbeb)]['Enemy'];let _0x691bcf=![];$gameSystem['isSideView']()?_0x691bcf=_0x4d1430[_0x34b19d(0x740)]:_0x691bcf=_0x4d1430['FrontViewSelect'],this[_0x34b19d(0xac5)](_0x691bcf?this['maxItems']()-0x1:0x0);},Window_BattleEnemy[_0x2dcaec(0xaf6)]['callOkHandler']=function(){const _0x27fd77=_0x2dcaec;Window_Selectable[_0x27fd77(0xaf6)][_0x27fd77(0x527)][_0x27fd77(0x390)](this);if(!this[_0x27fd77(0x2cf)]())return;if(this[_0x27fd77(0x2cf)]()[_0x27fd77(0x5d1)]())this[_0x27fd77(0x9fd)]=this[_0x27fd77(0x2cf)]();if(this['enemy']()[_0x27fd77(0x8d6)]())this[_0x27fd77(0x593)]=this[_0x27fd77(0x2cf)]();},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x44e)]=function(_0x460b9){const _0x4be1e8=_0x2dcaec;Window_Selectable[_0x4be1e8(0xaf6)][_0x4be1e8(0x44e)][_0x4be1e8(0x390)](this,_0x460b9),$gameTroop[_0x4be1e8(0x44e)](this[_0x4be1e8(0x2cf)]()),$gameParty[_0x4be1e8(0x44e)](this[_0x4be1e8(0x2cf)]());if(!this[_0x4be1e8(0x2cf)]())return;if(this[_0x4be1e8(0xae5)]()){const _0x3aca83=SceneManager[_0x4be1e8(0x496)][_0x4be1e8(0x14a)];this[_0x4be1e8(0x2cf)]()['isActor']()?_0x3aca83[_0x4be1e8(0x44e)](this[_0x4be1e8(0x2cf)]()[_0x4be1e8(0x6fc)]()):_0x3aca83[_0x4be1e8(0xabf)]();}},Window_BattleEnemy[_0x2dcaec(0xaf6)]['meetsSelectFrontviewActorConditions']=function(){const _0x4b3c7d=_0x2dcaec;if(!this[_0x4b3c7d(0xaba)])return![];if($gameSystem[_0x4b3c7d(0x334)]())return![];const _0x31e6ba=SceneManager[_0x4b3c7d(0x496)][_0x4b3c7d(0x9c9)](),_0x530953=[_0x4b3c7d(0x30e),'list','xp',_0x4b3c7d(0x3ec),_0x4b3c7d(0x541)];return _0x530953['includes'](_0x31e6ba);},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x26c)]=function(){const _0x357f86=_0x2dcaec,_0x28b55c=SceneManager['_scene'][_0x357f86(0x14a)];_0x28b55c['show'](),_0x28b55c[_0x357f86(0x427)](!![]),_0x28b55c[_0x357f86(0xbc9)](),_0x28b55c[_0x357f86(0xabf)]();const _0x147014=SceneManager[_0x357f86(0x496)][_0x357f86(0x9c9)](),_0x1400ec=['xp',_0x357f86(0x3ec),_0x357f86(0x541)];if(_0x1400ec['includes'](_0x147014)){const _0x208508=SceneManager['_scene'][_0x357f86(0x300)];_0x208508[_0x357f86(0x8a3)]['y']=0x0;}},Window_BattleEnemy['prototype'][_0x2dcaec(0x28b)]=function(){const _0xa147a2=_0x2dcaec,_0x11ef0f=SceneManager['_scene'][_0xa147a2(0x14a)];_0x11ef0f[_0xa147a2(0x4df)](),_0x11ef0f[_0xa147a2(0x427)](![]),_0x11ef0f[_0xa147a2(0xabf)]();const _0x2d384f=SceneManager['_scene']['_statusWindow'];_0x2d384f[_0xa147a2(0x8a3)]['y']=0x1;},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x1df)]=function(){const _0x490ff9=_0x2dcaec,_0x372b8d=BattleManager[_0x490ff9(0x524)]();if(_0x372b8d)_0x372b8d[_0x490ff9(0x200)](_0x490ff9(0x6a4));this[_0x490ff9(0x4ba)]();},Window_BattleEnemy[_0x2dcaec(0xaf6)][_0x2dcaec(0x282)]=function(){const _0x4b26b8=_0x2dcaec,_0x3c698a=BattleManager[_0x4b26b8(0x524)]();if(_0x3c698a)_0x3c698a[_0x4b26b8(0x200)](_0x4b26b8(0x7d3));this['processOk']();},Window_BattleEnemy['prototype'][_0x2dcaec(0x263)]=function(){return this['isActionSelectionValid']();},Window_BattleEnemy['prototype'][_0x2dcaec(0x4a9)]=function(){const _0x117b64=_0x2dcaec,_0x18ca05=BattleManager[_0x117b64(0x524)]();if(!_0x18ca05)return!![];if(!_0x18ca05[_0x117b64(0x719)]())return!![];const _0x4c0f10=this['enemy'](),_0x59b559=_0x18ca05[_0x117b64(0x719)]()['note'];if(_0x18ca05[_0x117b64(0x3a4)]()){if(_0x4c0f10===BattleManager[_0x117b64(0x3fc)]())return![];}return!![];},Window_BattleItem[_0x2dcaec(0xaf6)][_0x2dcaec(0x7f2)]=function(_0x4c5040){const _0x2bf4e7=_0x2dcaec;if(!_0x4c5040)return![];return _0x4c5040[_0x2bf4e7(0x9e1)]===0x0||_0x4c5040['occasion']===0x1;};function Window_AutoBattleCancel(){const _0x4796eb=_0x2dcaec;this[_0x4796eb(0x970)](...arguments);}Window_AutoBattleCancel[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Window_Base[_0x2dcaec(0xaf6)]),Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype'][_0x2dcaec(0x970)]=function(_0x252dc5){const _0x39d056=_0x2dcaec;Window_Base[_0x39d056(0xaf6)][_0x39d056(0x970)][_0x39d056(0x390)](this,_0x252dc5),this[_0x39d056(0x178)](this['bgType']()),this[_0x39d056(0xbc9)]();},Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0x729)]=function(){const _0x504283=_0x2dcaec;return VisuMZ['BattleCore'][_0x504283(0xbeb)]['AutoBattle'][_0x504283(0x63d)];},Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc9)]=function(){const _0x36ddd8=_0x2dcaec;this['contents']['clear']();const _0x1a64d3=VisuMZ['BattleCore'][_0x36ddd8(0xbeb)][_0x36ddd8(0xaec)][_0x36ddd8(0x183)],_0x4cbb87=_0x1a64d3[_0x36ddd8(0xb60)](this[_0x36ddd8(0x2b2)](),this[_0x36ddd8(0x2fd)]()),_0x1b9ceb=this[_0x36ddd8(0x8da)](_0x4cbb87)[_0x36ddd8(0x64b)],_0x2ce482=Math[_0x36ddd8(0x6eb)]((this[_0x36ddd8(0x86d)]-_0x1b9ceb)/0x2);this[_0x36ddd8(0xa18)](_0x4cbb87,_0x2ce482,0x0,_0x1b9ceb);},Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0x2b2)]=function(){const _0x296f04=_0x2dcaec;return Imported[_0x296f04(0x6d3)]?TextManager[_0x296f04(0x768)]('ok'):VisuMZ[_0x296f04(0xae3)][_0x296f04(0xbeb)][_0x296f04(0xaec)]['AutoBattleOK'];},Window_AutoBattleCancel[_0x2dcaec(0xaf6)]['cancelButtonText']=function(){const _0x2e3a13=_0x2dcaec;return Imported[_0x2e3a13(0x6d3)]?TextManager[_0x2e3a13(0x768)](_0x2e3a13(0x473)):VisuMZ['BattleCore']['Settings'][_0x2e3a13(0xaec)][_0x2e3a13(0xbcc)];},Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x22bb0c=_0x2dcaec;Window_Base['prototype'][_0x22bb0c(0x23a)][_0x22bb0c(0x390)](this),this[_0x22bb0c(0xb2d)](),this['updateCancel']();},Window_AutoBattleCancel[_0x2dcaec(0xaf6)][_0x2dcaec(0xb2d)]=function(){const _0x31f840=_0x2dcaec;this[_0x31f840(0xaba)]=BattleManager[_0x31f840(0x91c)];},Window_AutoBattleCancel['prototype'][_0x2dcaec(0x3eb)]=function(){const _0x188e5c=_0x2dcaec;if(!BattleManager[_0x188e5c(0x91c)])return;(Input[_0x188e5c(0x89e)]('ok')||Input[_0x188e5c(0x89e)]('cancel')||TouchInput[_0x188e5c(0x755)]()||TouchInput[_0x188e5c(0x493)]())&&(SoundManager[_0x188e5c(0xa48)](),BattleManager['_autoBattle']=![],Input['clear'](),TouchInput[_0x188e5c(0xb7e)]());};function _0x2f13(){const _0x1fbc32=['_backAttachmentSprite','%1Apply%2JS','PreStartActionJS','ShowAddedState','motionIdle','_offsetX','Rate','randomInt','makeUniqueNames','displayType','_forcedHomeY','_preemptive','pauseInjectAnimation','ShowSubstitute','padding','itemLineRect','Game_Action_itemEffectAddNormalState','alive\x20opponents','ENEMY_OFFSET_X','ForceRandom','#ffffff','ActSeq_BattleLog_WaitForBattleLog','isGrowing','endInBattleStatus','\x5cC[4](Passive)','onJumpEnd','_padding','%1RegenerateJS','ActSeq_Animation_WaitForAnimation','Window_BattleLog_clear','regionId','applyDamageCaps','setupMotionBlurImpactFilter','removeImmortal','ShowCounter','format','smooth','ActSeq_Grid_TraverseToNode','isArray','_battlerKeyCache','ActSeq_Mechanics_AtbGauge','attackAnimationId1','State-%1-%2','apply','ActSeq_Impact_BlueRedInvert','clearBattleRefreshRequest','PosOffsetX','base','ActSeq_DB_DragonbonesMotionAni','meetsUsableItemConditions','TpbActiveChangeEnabled','_growX','battleEnd','performDamage','_battleLayoutStyle','arRedFlat','checkAutoCustomActionSequenceNotetagEffect','sliceMin','ActSeq_Mechanics_CustomDmgFormula','playCursor','Override','_animationSprites','offsetY','PreDamage%1JS','changePaintOpacity','clear','_executedValue','StatusWindow_BgType','tone','commandFight','finalizeScale','Game_Battler_performMiss','setAttack','ActSeqProjectiles','ActSeq_Movement_Spin','_animationCount','VisuMZ_4_CombatLog','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','ActSeq_Camera_Offset','fadeShiftY','remove','process_VisuMZ_BattleCore_DamageStyles','setStateTurns','createAllWindows','AsUser','ShuffleArray','isAtbCastingState','StateID','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','allBattleMembers','HelpStatus','\x5cI[%1]\x5cHEXCOLOR<%3>%2','Parse_Notetags_Targets','_updateFilterArea','AnimationID','ActSeq_Movement_WaitForOpacity','ActionCount','match','toUpperCase','guardMpLifeSteal','BoostPoints','toString','Game_Battler_onTurnEnd','getSkillIdWithName','EmergeText','Sprite_Battler_damageOffsetY','_targetAngle','PreApplyAsTargetJS','drawActorFace','Setting','getDragonbones','updateBattleVariables','getStateDisplay','_shake','Game_Battler_clearDamagePopup','canUseItemCommand','isIncludedInEnemyWindow','requestFauxAnimation','WaitForOpacity','allowCollapse','battleVoices','onAngleEnd','_buttonText','ActSeq_Grid_RemoveTriggerFromNode','WIDTH','callUpdateHelp','setMoveEasingType','logActionList','waitForNewLine','canGuard','Window_BattleLog_displayMpDamage','reduce','updateLink','battler','PopupPosition','StatusWindowAttachmentFrontOffsetY','show','cameraOffsetDuration','actionsFmt','ActSeq_Mechanics_EmulateSkillCost','refresh','damagePopupPosition','%1Damage%2JS','AutoBattleCancel','%1Event','arRedRate','_createClientArea','battlelog','processBattleCoreJS','popupDamage','startGrow','waitForMovement','Interrupt','ceil','cutinEnter','Scene_Battle_createPartyCommandWindowIBS','performTpbActiveCheckSwitch','Scene_Battle_windowAreaHeight','process_VisuMZ_BattleCore_Notetags','FRUSTRATION','CheckSkillCommandShowSwitches','refreshBattlerMotions','_createEffectsContainer','_angleDuration','expRate','ActSeq_Mechanics_EnemyEscape','Sprite_Damage_createChildSprite','needsInputWindowChange','ActSeq_Mechanics_SwapWeapon','drawItemActorFace','dead','ConfigManager_makeData','autoBattleUseSkills','Game_Map_setupBattleback','Settings','Scene_Battle_createHelpWindow','BattleManager_isTpbMainPhase','LUK','collapse','cancelHpLifeSteal','isTpbReady','_floatDuration','Game_Action_setSkill','Buffs','finishActorInput','canAttack','drawActorLevel','TextFmt','Scene_QuickLoad','PortraitScale','isSpriteVisible','isAlwaysVisible','_targetX','isNextSceneBattleTransitionable','StateOverlayOffsetX','setupWeaponAnimation','canInput','ActSeq_Mechanics_AddState','horzCells','updateShadowScale','FvAniCenterScreen','actorCommandSingleSkill','ActSeq_Camera_FocusTarget','performSubstitute','ActSeq_Mechanics_BreakShieldReset','clearForcedGameTroopSettingsBattleCore','Game_BattlerBase_refresh','requestBattleBalloon','attachSpritesToDistortionSprite','▼%1','clearNameTempVisibility','_battlerContainer','isFrameVisible','magicSkills','ActSeq_Grid_ActionAnimationAtNode','createSeparateDamagePopups','EnemyOffsetX','drawTurnsRemaining','SLEEP','ActSeq_Mechanics_EmulateSkillEffect','rowSpacing','_surprise','actionEffect','startPartyCommandSelection','VariableDmg','VisuMZ_3_VisualCutinEffect','checkExtendTroopCompatibility','map','Window_Options_statusText','surprise','createDistortionSprite','SkillsStatesCore','_offsetY','_targetIndex','CmdTextAutoBattle','ActSeq_Mechanics_RemoveBuffDebuff','isPreviousScene','Window_BattleLog_displayEvasion','ActSeq_Impact_Negative','guardSkillId','addWeaponSwapCommand','ShowReflectWait','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','initVisibility','_injectAnimationSprite','startTpbTurn','_fauxAnimationSprites','Window_BattleActor_show','\x5cC[6]%1\x5c}\x20\x5cC[4]Hit\x20Combo\x5c{','Enemy','setActiveWeaponSet','extendTroopMembers','_target','isForOpponentBattleCore','_performDamageMotion','_cache','StepDistanceX','WeaponTypeID','Window_BattleLog_pushBaseLine','245kUCpBL','Sprite_Gauge_smoothness','_visibleDuration','center','sprite','addFightCommand','onBattleEndBattleCore','AdjustRect','unshift','_currentActor','turnsFmt','performActionMotions','Sprite_Enemy_setHue','textAlign','canEscape','OverallFormulaJS','clamp','UNTITLED','pause','enemyShowParametersAlways','removeOnceParallelInterpreter','findSymbolExt','displaySubstitute','BattleManager_processDefeat','\x5cC[5](Turns\x20%2%1\x5cC[5])\x5cC[0]','ActionAnimation','getEnemyIdWithName','checkSubstitute','targetsForFriends','usePremadeActionSequence','addBattleCoreAutoBattleStyleCommand','Scene_Battle_stop','ForceExploiter','magicReflection','isForRandom','updateEffectsContainer','processAnimationRequests','CmdTextAlign','DistanceY','Scene_Battle_commandFight','alterPriority','evade','ARRAYJSON','partyCommandWindowRect','animation','processDrawEnemyBattler','Armor-%1-%2','setupCriticalEffect','removeActor','addSingleSkillCommands','startInput','gainHp','Sprite_Actor_update','_defeatedEnemies','_flipScaleX','MotionFrameWait','mpDamageFmt','onSkewEnd','actorCommandWindowRect','refreshStatusWindow','ANGLE','_performActionEnd','_bypassCanCounterCheck','type','parse','isChanting','reverse','jumpBattler','ActSeq_BattleLog_Clear','stepFlinch','split','HelpOptions','worldTransform','Sprite_Actor_setBattler','makeData','Weapon-%1-%2','ScaleY','debuffColor','clearBattlerMotionTrailData','_list','helpAreaBottom','FUNC','scope','_bypass_applyBattleCoreHitRateJS','helpAreaHeight','_actorWindow','calcWindowHeight','createBattleFieldBattleCore','options','PostEndActionJS','battleAnimation','makeTurnsText','_action','Scene_Battle_needsInputWindowChangeIBS','_currentAngle','totalDmgFmt','_commonEventQueue','anchor','ActSeq_Mechanics_PtbConvert','Window_BattleLog_popBaseLine','Game_Battler_performActionStart','currentDisplayedValue','canAddSkillCommand','isAnyProjectilePresent','clearBattleCoreAspects','PreDamageJS','speed','38NnaHaY','VisuMZ_3_ActSeqCamera','PortraitScaleBorderStyle','_borderPortraitSprite','updateOnceParallelInterpreters','ActSeq_Mechanics_ActiveChainInputDisable','\x5cI[%1]\x5cC[%3]%2','iconHeight','abort','%1EndTurnJS','AttachStateOffsetY','blockWidth','loadFaceImages','statusTextAutoBattleStyle','_hideAllIcons','NewPopupBottom','useItem','PostDamage%1JS','pageOffsetX','_subject','drawTextTopAligned','6953639ZuTQqC','_skewEasing','increaseHits','setBackgroundType','fillRect','missile','Immortal','pointX','animationBaseDelay','user','isTpb','_allTargets','drawBackgroundRect','parallaxScrollY','AutoBattleMsg','ALL_ENEMIES','right','head','_jumpDuration','Sprite_Battler_updatePosition','displayAction','Scene_Battle_itemWindowRect','mainSprite','damageOffsetX','getDualWieldTimes','children','performActionEndMembers','push','SlotID','_preBattleCommonEvent','stypeId','alphabetic','Game_Battler_performEvasion','requestPointAnimation','ComboWindow_DrawJS','Window_BattleLog_displayMiss','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','command283','makeActionListAutoAttack','isMVAnimation','opacity','isBattleMember','battleGrow','ActSeq_BattleLog_DisplayAction','CmdIconEscape','_commonEventIDs','ActionEndUpdate','ActSeq_Grid_AnimationIDAtNode','CommandAddAutoBattle','getBattleMembers','VisuMZ_2_BattleGridSystem','registerCommand','numberFontFace','_createCursorSprite','Frame','isMeleeSingleTargetAction','SvWeaponSolo-%1-%2','setLastBattleSkill','updatePhase','battlerSmoothImage','skillWindowRect','ShowCurrentState','performWeaponAnimation','PARTY','result','getSkillTypes','Window_BattleLog_displayFailure','USER-DEFINED\x204','_waitMode','JumpToLabel','_growEasing','createRateJS','applyVariance','ActSeq_Impact_ShockwavePoint','setupBattlebackBattleCore','normal','makeBuffHelpText','ActSeq_Animation_ShowAnimation','removeHorrorEffect','StepDuration','setGuard','itemEffectRecoverMp','invokeMagicReflection','BattleManager_startInput','windowAreaHeight','alive\x20opponents\x20not\x20target','isTeamBased','ActSeq_Horror_TVRemove','processTouch','ActSeq_Mechanics_DamagePopup','_namesCount','ActSeq_Horror_GlitchRemove','isUnderAnimation','Game_Action_needsSelection','replace','addChildToUiContainer','BattleManager_invokeCounterAttack','%1-%2','active','processCancel','ActorOffsetX','changeCtbChargeTime','sortDamageSprites','ActionEnd','paramValueByName','ActSeq_Mechanics_PtbFullHalfAction','selectAllEnemies','uiInputPosition','criticalDmgRate','ActSeq_Movement_FaceJsPoint','ActionStart','log','isHiddenSkill','%1\x20Aspect','Scene_Battle_startEnemySelection','isMeleeMultiTargetAction','StatusWindowAttachmentFront','WaitCount','canAlterActionCostPTB','process_VisuMZ_BattleCore_BaseTroops','FvAniEachTarget','battleMove','Game_Map_battleback2Name','_skillIDs','_lastPluginCommandInterpreter','Game_Action_executeHpDamage','activate','startEnemySelection','isDead','BattleManager_endAction_ComboWindow','pageButtonX','StyleON','drawDebuffs','enemyShowLevel','_targetOpacity','updateBorderStyle','ActSeq_Movement_WaitForFloat','clearBattleCoreData','_iconIndex','setTargetBattlerKey','CombatLogIcon','+%1\x20MP','Game_Action_testApply','▲%1','VisuMZ_2_AggroControlSystem','_forceAction','bitmapWidth','inBattle','startVisualCutin','_motion','_isProjectile','USER-DEFINED\x201','clearFreezeMotion','Variable','CmdIconAutoBattle','startIcon','SwitchCritical','MotionType','_isBattlerFlipped','smoothSelect','isGuard','next\x20target','itemHit','SkillItemStandardCols','preemptive','CriticalColor','setBattlerBattleCore','Window_PartyCommand_initialize','createCommandNameWindow','_battlerHue','isAnyoneFloating','hasSkill','destroy','CastCertain','drawActorStateData','waitForOpacity','drawText','sideview_ui','PostEndBattleJS','skewDuration','buffNameFmt','_inBattleStatusMode','BattleManager_startBattle','isForOne','drawComboText','ActSeq_Cutin_WaitForExit','ActSeq_Motion_ClearFreezeFrame','setEventCallback','displayBattleCoreTransitionErrorMsg','emerge','battlerKey','ActSeq_Grid_PushFromTargetNode','setItem','AllowRandomSpeed','resetNameTempVisibility','_statesWindow','EXCLAMATION','update','repositionCancelButtonBorderStyle','WaitForJump','_enemy','makeActions','_weaponSprite','performReflection','moveBattlerToPoint','isVisualHpGaugeDisplayed','ActSeq_Movement_WaitForJump','_dragonbonesSpriteContainer','itemLifeStealRate','commandName','BattleLayout','onAllActionsEnd','_targetSkewX','Sprite_Battler_setBattler','repositionEnemiesByResolution','disarmLifeSteal','jsAccuracyAsUser','in\x20order\x20for\x20VisuMZ_1_BattleCore\x20to\x20work.','Spriteset_Battle_updateActors','_enemies','applyFreezeMotionFrames','Scene_Map_initialize','setupBattleCoreAspects','invokeAction','obj','SHOW_BUTTON','_visualHpGauge_JustDied','lifeStealTrait','PreApplyJS','ActSeq_Mechanics_Collapse','isForFriend','_borderPortraitTargetX','_skewWholeDuration','removeAnimation','OffsetAdjust','VoiceLineType','BattleManager_endAction','getParamBuffAndStateRate','isCurrentItemEnabled','_effectDuration','ActionItemMsg','Game_Action_itemEffectAddAttackState','_buffTurns','_battleCoreBattleStartEvent','VisuMZ_3_BattleVoices','selectSymbol','none','openBattleActorWindow','SceneManager_isSceneChanging','pageButtonPosition','Wave','Game_Troop_expTotal','Window_BattleLog_popupDamage','updateJump','_lineHeight','_targetBattlerKey','wait','ActSeq_Motion_PerformAction','VisuMZ_3_ActSeqImpact','ShakeFlinch','ARRAYSTRUCT','effect','statesWindowRect','animationShouldMirror','placeGauge','battleSpriteSkew','disarmMpLifeSteal','ActSeq_Grid_AnimationTypeAtNode','MaxLines','selectAllActors','_commandNameWindow','Scene_ItemBase_applyItem','itemTextAlign','turns','startActorCommandSelection','PostApplyAsTargetJS','HelpItem','endBattle','closeBattleActorWindow','playSystemSound','_colorFilter','createMainSprite','ActSeq_Grid_AddTriggerToNode','ApplyImmortal','Sprite_Actor_moveToStartPosition','WindowWidth','minimumHits','_targetOffsetY','MultiTarget','getBattlePortrait','normalIcon','cameraDuration','displayRemovedStates','_forcing','_lastRegenFrameCount','isCommonEventReserved','_enemySprite','alive\x20friends','PostStartTurnJS','Scene_Battle_onEnemyCancel','createKeyJS','updateBattleProcess','_spriteset','isAnyoneJumping','VisuMZ_2_BattleSystemATB','stateRate','aspect','updateShadowBattleCore','VisuMZ_1_MessageCore','process_VisuMZ_BattleCore_PreBattleCommonEvent','clearActiveWeaponSet','abs','Scene_Battle_update','ActSeq_Impact_MotionBlurTarget','updateBattlebackBitmap','Game_Action_evalDamageFormula','isDisarmLifeSteal','okButtonText','gaugeLineHeight','Sprite_StateIcon_updateFrame','isAlive','createCommandVisibleJS','paramBuffRate','ExtDisplayedParams','JS\x20%1START\x20BATTLE','portraitFlipHorz','HpGauge','ActSeq_Cutin_AddVisualCutinEffect','isStateResist','resetFontSettings','WaitForNewLine','onEnemyOk','battleEffect','waitForAnimation','optDisplayTp','getReturnWindow','findTargetSprite','snapForBackground','%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.','Window_BattleEnemy_hide','cancelLifeSteal','isForDeadFriend','applyBattleCoreJS','SWEAT','Sprite_Enemy_update','StatusWindowSkinFilename','enemy','STRUCT','Game_Action_executeDamage','loadWindowskin','performRecovery','COBWEB','alive\x20friends\x20not\x20user','makeBattleCommand','_linkedSprite','createMultiTargetWindows','mainSpriteScaleY','ActSeq_Grid_RemovePassiveStatesFromNode','setCommonEvent','Defeat','_damageCounterWindow','textAlignment','value','windowPadding','contents','hpRate','Sprite_SvEnemy','BattleManager_onEncounter','mainSpriteScaleX','helpWindowRectBorderStyle','processDefeat','createBattleBalloon','showEnemyAttackAnimation','Window_BattleActor_processTouch','setupMotion','gainCurrentActionsETB','targetBattlerContainerOpacity','_stateIconSprite','missed','initBattlePortrait','Amp','opponentsUnit','1537285GUtEpk','BattleManager_endBattle','create','drawActorIcons','createTroopNote','BattleGridSystem','startShakeFlinch','STATUS','addImmortal','ShowSubstituteWait','cancelButtonText','VisuMZ_2_BattleSystemFTB','criticalHitFlat','_statusWindow','terminate','\x5c}\x5cC[21]Total\x20Damage:\x20\x5c{\x5cC[0]%1','ResetFocus','WaitForExit','isBattlerTargeted','enemyShowParametersIfBattleTest','LIGHTBULB','%1StartTurnJS','_back2Sprite','drawActorBuffRates','formula','setBalloonPose','_enemyIDs','default','clearGlobalVariables','startMotion','displayAddedStates','stateHelpFmt','_battleField','PopupShiftY','setupBlueRedInvertImpactFilter','createActorCommandWindow','Game_Temp_requestAnimation','Scene_Map_initializeAfter','applyEasing','startHomeMove','createStateSprite','_regionBattleback2','DamageStyleList','cancelTargetSelectionVisibility','Sprite_Actor_initMembers','normalText','name','wholeActionSet','displayCritical','processRefresh','getBattlerKeyTargets','buffHelpFmt','clearFreezeMotionForWeapons','pushBaseLine','applyGlobal','Scene_Boot_onDatabaseLoaded','createActorCommandWindowBattleCore','_homeDuration','Width','updateUiContainerPosition','prev\x20target','updateBattlebackBitmap2','Status\x20is\x20currently\x20normal.','start','WaitForEntrance','isSideView','startJump','isBTB','Game_Action_executeMpDamage','removeState','CastPhysical','battleCorePreBattleCommonEvent','Scene_Battle_startPartyCommandSelection','_wtypeIDs','textColor','createDigits','exit','partyCommandWindowRectBorderStyle','applyGlobalCommonEventNotetags','_customDamageFormula','Window_BattleEnemy_show','HalfActions','displayEvasion','shouldDisperseDamage','commandNameWindowCenter','ActSeq_Mechanics_WaitForEffect','_opacityWholeDuration','Angle','checkTpbInputOpen','testApply','MAT','currentExt','position','BattleManager_processVictory','-%1\x20MP','NameFontSize','getHardDamageCap','createPartyCommandWindowBattleCore','alterCost','isETB','drawItemImagePortraitStyle','VisuMZ_2_BattleSystemPTB','onMoveEnd','customDamageFormula','updateBattlebackBitmap1','GRID\x20MOVE','_uiContainer','all\x20targets','Game_Battler_forceAction','_targetY','_animationContainer','unchanged','allIcons','Height','requestBalloon','WaitForSkew','isSkewing','process_VisuMZ_BattleCore_PluginParams','missle','normalHelp','_tpbState','statusWindowRectDefaultStyle','endAnimation','ActSeq_Target_CurrentIndex','removeStatesAuto','drawLineText','NOTE','WaitForMovement','addGuardCommand','AutoMeleeSolo','FaceDirection','battleDisplayText','isForAll','setBattleAngle','removedBuffs','getAttackWeaponAnimationId','Scene_Battle_onActorOk','Turns','isSkill','makeActionOrders','drawActorSimpleStatus','isForOneBattleCore','applyHardDamageCap','updateShadowPosition','isPlaying','isEffecting','drawEnemyBattler','_battler','ScaleToFit','animationWait','_back1Sprite','NameAsTarget','ActionSkillMsg1','resetTextColor','front\x20base','updateShakeFlinch','MpGaugeOffsetY','call','ExtraSettings','ShowHpDmg','refreshCursor','ScaleUp','commandAutoBattle','drawItemImage','battleInjectPrep','updateCustomActionSequence','_shadowSprite','ShowHide','TpGaugeOffsetX','ActionCenteredName','_freezeMotionData','moveBattlerDistance','loadPicture','startDamagePopup','Destination','StartTurnShow','visibilityState','isForNotUser','DisablePartyCmd','_drawTextBody','_requestRefresh','overworldBattleback1Name','currentSymbol','_emptyBitmap','currentAction','PostStartActionJS','fadeShiftX','processRandomizedData','tpbActorSwitchConditionsMet','noSimilarSTypes','createInBattleStatusWindow','_totalHits','string','updateCounter','rec','contentsOpacity','BattleDefeatJS','CmdIconItem','_commonEventKey','setBattleZoom','getItemDamageAmountLabelBattleCore','_targetFloatHeight','dead\x20friends','Window_BattleLog_performAction','performMiss','checkShowHideBattleNotetags','createJS','mainSpriteHeight','displayStartMessages','battleAngle','forceMotion','getBattlePortraitOffsetY','actorCommandAutoBattle','process_VisuMZ_BattleCore_Failsafes','_windowLayer','makeEscapeRatio','isSceneChanging','auto','targetActionSet','updateCallMenu','initElementStatusCore','shouldHideBattleEndPopups','_buttonKey','addBuff','NameLegacy','ActionEffect','maxLines','updateStateSpriteBattleCore','isLearnedSkill','hitIndex','battlerShadowScaleX','targetSpritePosition','createStatesWindow','Window_BattleLog_performSubstitute','statusWindowRectXPStyle','70821HkOHnl','ItemID','Name','text','_playTestFastMode','isRightInputMode','cancelActorInput','portraitIndex','createBorderStylePortraitSprite','clearOnceParallelInterpreters','evalDamageFormulaBattleCore','process_VisuMZ_BattleCore_Action_Notetags','Point','updateCancel','portrait','moveToStartPositionBattleCore','popBaseLine','makeTargetsBattleCoreJS','_frontAttachmentSprite','ShowAddedBuff','Scene_Map_updateCallMenu','displayChangedBuffs','createMultiTargetWindow','ShowActorGauge','Scale','dead\x20opponents','valueColor','executeDamage','Scene_Battle_selectPreviousCommand','addAutoBattleCommand','actor','CopyCombatLog','pageup','_tempActor','Game_Action_isForAliveFriend','getItemDamageAmountTextBattleCore','_methods','States','_aspectData','alterActionCostPTB','ShowWeapon','itemPadding','isItem','expTotal','Game_Interpreter_PluginCommand','StatusWindow_DrawJS','autoBattleStyle','Filename','ActorCmd','CastAnimation','isMagical','setupIconTextPopup','autoBattleWindowRect','buffColor','hpDamage','setWaitMode','_lines','loop','battleJump','statusWindowRectBorderStyle','ShowRemovedBuff','isAnyoneGrowing','addItemCommand','Linear','Mechanics','battleCameraData','ActSeq_Movement_WaitForSpin','process_VisuMZ_BattleCore_TraitObject_Notetags','_effectsContainer','emulateAction','onRegeneratePlayStateAnimation','Game_Party_addActor','COMBATLOG','setEnemyWindowMode','ActSeq_Grid_AddPassiveStatesToNode','battleMembers','updateRefresh','ParseWeaponNotetags','\x5cC[6](Actions\x20%2%1\x5cC[6])\x5cC[0]','updateWeather','Users','hasStaticSvBattler','_damages','weapons','setBattleCameraOffset','makeStateHelpText','_endBattle','attackSkillId','isPartyCommandWindowDisabled','displayHpDamage','jsCritRateAsUser','Game_Action_isForFriend','BravePoints','_eventId','battlerShadowScaleY','svActor','_actionBattlers','setupOversaturateImpactFilter','Sprite_Enemy_updateStateSprite','Game_BattlerBase_allIconsIBS','ActSeq_Movement_MoveToJsPoint','_character','_jumpWholeDuration','isOpen','VisuMZ_1_MainMenuCore','ArRedFlat','iconIndex','enemyHpGaugeRate','VisuMZ_2_HorrorEffects','displayBuffs','setImmortal','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','select','ConvertParams','createActors','_makeCursorAlpha','createEnemyWindow','startBattle','applyResultSwitches','ActSeq_Mechanics_OtbOrder','ParseActorNotetags','declareGlobalVariables','placeStateIcon','pages','applySoftDamageCap','playEnemyAttack','AnchorX','MANUAL','setupShockwaveImpactFilter','Game_Party_removeActor','FvAniCenterAll','with\x20latest\x20version\x20of\x20VisuMZ_1_BattleCore!','targetObject','Scene_Battle_startActorCommandSelection','_appeared','_shadowScaleX','maxItems','isAlwaysHidden','ComboWindow','initBattleCore','ActSeq_Set_SetupAction','Actor','ActSeq_Movement_FacePoint','updateSkew','ActSeq_Set_TargetActionSet','Window_BattleLog_performMagicEvasion','BTB','AspectIcon','ConvertCount','cancel','setFrame','prepareCustomActionSequence','nameColor','BARE\x20HANDS','isHidden','ParseArmorNotetags','dead\x20battlers','buffValueFmt','totalHealFmt','updateShadow','addStatusCommand','getDamageStyle','CTB','DefaultDamageStyle','setClickHandler','Game_Action_itemTargetCandidates','Debuffs','isStateAffected','_targetGrowY','isCommandEnabled','itemCri','getItemDamageAmountLabelOriginal','_armorPenetration','InBattleStatus','Game_Interpreter_command301','autoRemovalTiming','_immortal','setupDesaturateImpactFilter','softDamageCapRate','Game_Battler_clearMotion','PreApplyAsUserJS','isCancelled','setHandler','setupTextPopup','_scene','ActSeq_Animation_ChangeBattlePortrait_JS','wtypeId','revealNewWeaknesses','processPostBattleCommonEvents','setBlendColor','ActorOffsetY','Game_Action_isForAll','getColor','command301_PreBattleEvent','BULB','_floatWholeDuration','ActSeq_Skew_WaitForSkew','HelpAutoBattle','USER-DEFINED\x203','requestMotion','fight','_endingBattle','_actorCommandWindow','isActionSelectionValid','startWeaponAnimation','Game_BattlerBase_die','Game_BattlerBase_addNewState','isForAliveFriend','target','BattlebackScale','Sprite_Battler_startMove','redraw','svBattlerData','PostDamageAsUserJS','isTpbMainPhase','EnableDamageCap','Game_Action_setAttack','LastSelected','svActorVertCells','_inputting','processOk','setHelpWindow','_cacheTextWidth','drawItemStatusXPStyle','jsAccuracyAsTarget','abnormal','setActionState','DamageStyles','ActSeq_Grid_ClearPassiveStatesFromNode','damagePopupOffsetY','_mainSprite','MAXMP','charging','isBusy','onFloatEnd','itemTargetCandidates','bitmap','HomePosJS','_dimmerSprite','redrawForGaugeRate','visualHpGauge','displayTpDamage','isBypassDamageCap','close','isSkillItemWindowsMiddle','isFlipped','Game_Actor_equips','clearMotion','VisuMZ_3_FrontviewBattleUI','Game_Action_clear','DistanceAdjust','alterBreakShield','EscapeFail','WaitForEffect','loadSvActor','_floatHeight','BackColor','hide','PopupOffsetY','checkSceneBattleTransitionable','updatePositionBattleCore','addNewState','angle','updateStaticSvBattlerFrames','lastCommandSymbol','AutoMeleeAoE','updateAngleCalculations','_enemyNameContainer','WaitComplete','walk','_updateDuration','Window_SkillList_maxCols','Window_BattleLog_refresh','Game_Map_battleback1Name','Scene_Battle_startActorSelection','makeCommandList','StatusGraphic','waitCount','createEnemies','_partyWindow','ElementStatusCore','svBattlerShadowVisible','ArPenFlat','_tpbNeedsPartyCommand','flashColor','%1▲','ActSeq_Impact_MotionTrailCreate','processForcedAction','BattleCmdList','currentMaxValue','_autoBattleWindow','getBattlerFromKey','isSTB','currentValue','pageButtonY','Scene_Party','stateColor','_colorTone','addGeneralOptions','portraitFlipVert','JS\x20%1START\x20ACTION','useDigitGrouping','Game_Action_makeTargets','priority','createTargetsJS','VisuMZ_2_PartySystem','isBattlerGrounded','_jumpMaxHeight','addNormalStatus','addedBuffs','StateIconOffsetY','Scene_Options','autoBattleStart','traitObjects','STYPES','CheckActSeqProjectileVersion','MOTIONS','getStypeIdWithName','setActiveWeaponSlot','addOptionsCommand','setVisibleUI','showPortraits','checkCacheKey','\x5cC[%1]','nextActor','onDisabledPartyCommandSelection','inputtingAction','isBigCharacter','_motionSpeed','callOkHandler','performLifeSteal','addCommand','updateAttachedSprites','ActSeq_ChangeAngle','ParseStateNotetags','Scene_Battle_createActorCommandWindowIBS','BattleManager_checkSubstitute','isChangingOpacity','WaitForFloat','PostEndTurnJS','USER-DEFINED\x205','_battleBalloonSprites','Enemy-%1-%2','_enemyId','Game_BattlerBase_param','ShowPortraitsBorderStyle','spinBattler','resetResultSwitches','clearElementChanges','CheckMapBattleEventValid','Damage','OffsetY','commandSymbol','DamageDisplay','ActSeq_BattleLog_UI','border','ActSeq_Mechanics_BtbGain','65074955nuscjs','drawIcon','victory','_lastAction','MAXHP','BattleManager_checkBattleEnd','ActSeq_Camera_Reset','displayMiss','alive\x20friends\x20not\x20target','physical','TRAIT_PARAM','onEscapeFailure','negativeMpLifeSteal','onEnemyCancel','MessageWait','ActSeq_Mechanics_BoostPointsStoreData','adjustFlippedBattlefield','contentsBack','boxWidth','svBattlerName','_cursorSprite','bind','ActSeq_Animation_CastAnimation','charged','TpbGaugeOffsetX','icon','ActSeq_Mechanics_BreakShieldChange','hasAspectData','lastBattleSkill','_showWeapon','refreshRequest','battleCommands','_targetGrowX','setBattleCameraPoint','Window_BattleLog_performEvasion','Sprite_Enemy_updateCollapse','stbGainInstant','isUndecided','clearTargetBattlerKey','excludeListing','ActSeq_Movement_Opacity','StatusWindowSkinHide','CmdIconFight','_skillWindow','casting','isBorderStylePortraitShown','isBuffAffected','Victory','ActSeq_Element_NullElements','itemRect','isAffectedByBreakShield','isAutoBattle','Scene_Battle_skillWindowRect','EscapeSuccessJS','onBattleEnd','Game_Battler_onBattleStart','createAutoBattleWindow','ActSeq_Animation_GuardAnimation','LIGHT\x20BULB','Game_Action_isForOpponent','WEAPON\x20SWAP','performCounter','isFightCommandEnabled','slices','JS\x20ESCAPE\x20SUCCESS','_phase','SvMotionIdleMass-%1-%2','PartyCmd','drawItemBackground','isDying','Game_Troop_setup','MUSIC\x20NOTE','portraitFilename','getAttackMotion','updateStatusWindowPosition','_updateTargetValue','displayActionResults','updateHelp','_angleEasing','createHpGaugeSprite','_lastActor','placeActorName','createDamageCounterWindow','_motionCount','lastFilename','displayFailure','_skewDuration','isAnyBattleBalloonPlaying','MotionSpeed','VisuMZ_4_BreakShields','clearRect','refreshDimmerBitmap','addText','VisuMZ_3_BattleAI\x20needs\x20to\x20be\x20updated\x20','VisuMZ_2_WeaponSwapSystem','_enemySprites','commandStyle','refreshMotion','repeats','_homeX','VisuMZ_2_BattleSystemETB','initMembersBattleCore','addBattlerAspect','updateBorderSprite','Scene_Battle_start','getConfigValue','Increases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','_targetDamage','updateOpacity','escape','ActSeq_Inject_WaitForInjectAni','isShownOnBattlePortrait','checkShowHideSkillNotetags','TextColor','isForAnyoneFocusFriends','isPlaytest','SyncBuffExpire','faceHeight','HelpFight','svAnchorX','registerDefeatedEnemy','Game_Enemy_transform','setBattlerFlip','ActSeq_Zoom_WaitForZoom','move','splice','getSpecificBattlerKeyTarget','ScaleX','ActSeq_Cutin_WaitForEntrance','Scene_Battle_partyCommandWindowRect','ActSeq_BattleVoice_PlayCommonLine','makeTargetsBattleCore','hasSvBattler','HpGaugeOffsetX','drawItemImageXPStyle','TpbGaugeOffsetY','Update\x20your\x20Battle\x20System\x20-\x20%1\x20to\x20the\x20latest','_shadowScaleY','repeatTargets','createEnemyNames','iterateBattler','playOkSound','isEnemy','Sprite_Actor_updateFrame','turn','logWindowRect','updateScale','Sprite_Battler_isMoving','loadOtherActorImages','clearDamagePopup','createWeather','NameDamageVisibility','lifeSteaItem','createDamageContainer','Sprite_Actor_setActorHome','Scene_Battle_createAllWindows','Game_Action_makeDamageValueDisperse','motionType','Window_BattleLog_displayTpDamage','ActSeq_Grid_MoveTargetsInDirection','removeCurrentAction','AnchorY','battleProjectiles','CustomFontFace','_deathStateApplied','selectAll','Game_Action_numRepeats','swing','EscapeSuccess','isTickBased','filter','gainCurrentActionsFTB','Scene_Battle_createEnemyWindow','isDrain','Mute','textWidth','Direction','isItemCommandEnabled','isInputting','addCustomCommands','ActSeq_Inject_AnimationStart','updateBattleBalloons','isEscapeCommandEnabled','_hpGaugeSprite','AttachStateOffsetX','hasBeenDefeatedBefore','VarianceFormulaJS','ActSeq_Element_AddElements','dead\x20enemies','createStateIconSprite','characterName','ActSeq_Animation_SkillAnimation','Duration','setupActionSet','drawGauge','BattleManager_onEscapeSuccess','ActSeq_Movement_HomeReset','NameAlwaysSelectOnly','Param','ActSeq_Movement_BattleStep','refreshActorPortrait','multiTargetWindowRect','_selectionEffectCount','gaugeRate','JS\x20BATTLE\x20DEFEAT','parent','VisuMZ_2_BattleSystemBTB','addLoadListener','ActSeq_Impact_ShockwaveCenterTargets','parallaxHue','performShakeFlinch','BattleManager_abort','ActSeq_Weapon_NextActiveWeapon','Game_Action_isForRandom','Game_Action_isForOne','in\x20order\x20for\x20Taunt\x20and\x20Provoke\x20features\x20to\x20work\x20','196842dRDava','JS\x20ESCAPE\x20FAILURE','constructor','PreEndBattleJS','performJump','version','itemEffectGainTp','VisuMZ_3_ActiveChainSkills','moveToStartPosition','some','FlinchDistanceY','gaugeBackColor','softDamageCap','createActionSequenceProjectile','XPActorCommandLines','autoMeleeSingleTargetActionSet','skills','_shakeFlinchDuration','Sprite_Enemy_updateBossCollapse','createPageButtons','CurrentTurn','friendsUnit','adjustPosition_1for1','ActSeq_Zoom_Scale','HitFlat','isImmortal','skillItemWindowRectMiddle','deathStateId','getNextDamagePopup','ParseClassNotetags','updateCommandNameWindow','isAnyoneInjectAniPrepping','turnOrderChangeOTB','filterArea','AutoBattleBgType','damage','hitsHealFmt','createCancelButton','removeChildFromUiContainer','NameAttachStateIcon','SvBattlerMass-%1-%2','STB','updateNameTempVisibility','Scene_Map_launchBattle','anchorX','PostApply%1JS','finishActionSet','Game_Battler_onBattleEnd','width','guard','ActSeq_Movement_MoveToPoint','clearActiveWeaponSlot','adjustPosition_ScaleUp','processEnemyModeTouchBattleCore','trim','_item','PostRegenerateJS','startSpin','measureTextWidth','isAnyoneChangingOpacity','helpWindowRect','debuffHelpFmt','frameVisible','deactivate','Window_ActorCommand_initialize','iconWidth','_pagedownButton','performCastAnimation','autoMeleeMultiTargetActionSet','alive\x20battlers','QUESTION','HITTYPE_CERTAIN','context','showHelpWindow','WaitCount1','makeAutoBattleActions','ActSeq_Projectile_Icon','NO\x20ACTOR\x20FOUND!','ActSeq_Movement_HomeMoveToPoint','buff','ParseEnemyNotetags','selectNextCommand','_regionBattleback1','isConfused','blt','weaponTypes','_speed','Game_BattlerBase_meetsUsableItemConditions','makeDamageValue','_flashDuration','StartTurnMsg','StatusWindowAttachmentBack','ActSeq_Animation_BalloonIconSpecific','isNameTemporarilyVisible','processBattleBalloonRequests','isMagicSkill','applyBattleCoreCriticalHitRateJS','transform','getChildIndex','disperseDamage','retreat','_waitCount','adjustWeaponSpriteOffset','setupHpGaugeSprite','adjustPosition','arPenFlat','smoothness','addShowHpGaugeCommand','#%1','setBattlePortrait','CmdIconStatus','ActSeq_Animation_ChangeBattlePortrait','Mirror','removeAnimationFromContainer','paintOpacity','ActSeq_BattleLog_PushBaseLine','frameDelay','_svBattlerData','action','HitRate','hidden','waitForEffect','drawItemStyleIconText','version\x20in\x20order\x20to\x20use\x20the\x20<Extend:\x20x>\x20function.','performMagicEvasion','_forActor','CmdStyle','addBattleGridMoveCommand','maxWidth','createShadowSprite','commandNameWindowDrawBackground','PreApply%1JS','DigitGroupingDamageSprites','Game_Interpreter_terminate','applyArmorModifiers','_enemyWindow','damageFlat','all\x20enemies','ActSeq_Mechanics_StateTurnsChangeTo','isAppeared','updateEvent','selectNextCommandTpb','negativeLifeSteal','battleZoom','DistanceX','TextAlign','HelpEscape','enemyTpGaugeRate','frontview_ui','Text','Sprite_Battler_update','isDisplayEmergedEnemies','_updateColorFilter','COMBAT\x20LOG','makeTargets','resize','_effectType','join','_tpbChargeTime','isRepeated','sort','windowskin','updateShadowVisibility','clone','_cancelButton','Game_Enemy_setup','createEffectActionSet','turnCount','BattleManager_onEscapeFailure','MP_Flat','_stateTurns','_totalValue','hpAffected','ACTOR_OFFSET_X','ActSeq_Mechanics_EtbAction','_helpWindow','battleFloat','setActorHome','swapEnemyIDs','parallaxScrollXinvertEnemy','TP_Rate','value1','jump','updateDuration','VisuMZ_0_CoreEngine','onSelectAction','battleStatusWindowAnimationContainer','CriticalDmgRate','command301','coreEngineRepositionEnemies','graphicType','messageSpeed','Game_Action_applyGlobal','spriteId','ActSeq_BattleLog_Refresh','JS\x20%1DAMAGE\x20%2','addBattlerStates','drawItem','_ptbActionCost','putActiveBattlerOnTop','battlerName','actionSplicePoint','_weather','battleOpacity','AniDuration','removeBattleBalloon','encounterList','Actions','floor','isCTB','AUTO\x20BATTLE','isSideButtonLayout','filters','ActSeq_Element_ForceElements','actionBattleCoreJS','isNegativeLifeSteal','troop','createChildSprite','drawActorGraphic','DualWield','Scene_Battle_isTimeActiveIBS','ActSeqImpact','commandOptions','Game_BattlerBase_isStateResist','globalAlpha','index','_buffs','Game_BattlerBase_canGuard','growBattler','drawItemStatusListStyle','isGuardWaiting','Shadow2','Window_BattleLog_performDamage','ActSeq_Cutin_EndVisualCutinEffectAll','endVisualCutin','%1EndActionJS','ACTOR_OFFSET_Y','_enemyID','ActionSequence','setBattleImpactTimeScale','isAnyoneSpinning','createAttachedSprites','invokeCounterAttack','ActSeq_Movement_MoveToTarget','setTroopPage','makeActionList','setupFont','setColorTone','forceAction','hitsDmgFmt','AllEnemiesText','okTargetSelectionVisibility','ActSeq_BattleVoice_PlaySpecialLine','parameters','item','PopupShiftX','displayReflection','ActSeq_Movement_HomeMoveBy','ActSeq_Mechanics_Multipliers','traits','ArRedRate','Game_BattlerBase_canAttack','SvMotionIdleSolo-%1-%2','JS\x20%1REGENERATE','FlashDuration','maxBattleMembers','textBaseline','ActSeq_Movement_Skew','message2','ChargeRate','bgType','ActSeq_Mechanics_ActionEffect','addTextToCombatLog','isSelected','GetActionSequenceSpecialTarget','SkillItemMiddleLayout','reserveCommonEvent','PostApplyAsUserJS','performAttackSlot','processExtendTroopMembers','updateHpGaugePosition','_callSceneOptions','showAnimation','updatePointAnimations','alterChange','tpbCommandFight','launchBattle','Scene_Battle_updateCancelButton','critical','_executeHpDamage','updateStateIconSprite','displayCounter','isSkipPartyCommandWindow','SideviewSelect','debuffValueFmt','drawItemImageListStyle','Scene_Battle_onEnemyOk','Window_BattleStatus_drawItemImage','BattleStartEvent','CounterPlayback','status','getBattlerKeyTargetReplacement','startTurn','toUseBoostPoints','innerHeight','Window_BattleStatus_initialize','mainSpriteWidth','mhp','ActSeq_DB_DragonbonesTimeScale','TargetLocation','setupZoomBlurImpactFilter','eraseState','makeSuccess','MUSIC','isClicked','StepDistanceY','ActSeq_Impact_TimeStop','opacitySpeed','gradientFillRect','attack','fontFace','height','MUSICNOTE','CommandAddOptions','JS\x20%1END\x20TURN','AlphaFilter','updateBossCollapse','placeTimeGauge','setBattlerMotionTrailData','ActSeq_Motion_RefreshMotion','drawBattlerData','Window_BattleLog_performReflection','setupBattleCoreData','getInputButtonString','isAnyoneMoving','ActSeq_Grid_AddTriggerToNodeJS','updatePageButtonVisibility','shadow','playReflection','PrioritySortActors','createHelpWindowBattleCore','criticalDmgFlat','playBattleVoice','battleCoreResumeLaunchBattle','endAction','ActSeq_Mechanics_PtbAlterCost','pageButtons','isPTB','pointY','onEscapeSuccess','ComboWindow_RectJS','regenerateAllBattleCore','temporaryVisibile','gainMp','drawEnemyName','Game_Temp_requestBalloon','CreateActionSequenceTargets','process_VisuMZ_BattleCore_CreateRegExp','ActionSkillMsg2','makeBuffName','makeTargetSprites','_animation','CoreEngine','drawItemStyleIcon','ActSeq_Mechanics_StbRemoveExcessActions','performSTBExploiter','PopupOffsetX','<CUSTOM\x20ACTION\x20SEQUENCE>','isBattleFlipped','selectedBattlers','_branch','canUse','VisuMZ_3_SideviewBattleUI','mpDamage','damageText','ext','isCustomActionSequence','PRE-','note','ReflectAnimation','XPSpriteYLocation','10HUdYIB','autoSelectPriority','makeSpeed','StartTurnWait','performAction','_onceParallelInterpreters','nextActiveWeaponSlot','stateMotionIndex','overworldBattleback2Name','onGrowEnd','updateStateSprite','addDebuff','Scene_Battle_createAllWindows_ComboWindow','numRepeats','CommonEventID','_targetHomeX','SvBattlerSolo-%1-%2','battleUIOffsetY','flashDuration','selectLast','Game_Map_encounterList','All\x20Enemies','ANGER','random','includeState','addEscapeCommand','NameAlwaysHidden','startActorSelection','ConvertActionSequenceTarget','VoiceLine','battleCommandName','_duration','jsScaleToFit','debuffNameFmt','deadMembers','addAttackCommand','indexOf','displayedParams','commandStyleCheck','ActSeq_ChangeSkew','partyCommandWindowRectDefaultStyle','Scene_Options_maxCommands','inHomePosition','description','_itemWindow','ActSeq_Mechanics_FtbAction','updateHomeMove','applyBattleCoreHitRateJS','Spriteset_Battle_createLowerLayer','100%','numTargets','CastMagical','iconText','needsSelection','length','changeBattlerOpacity','AsTarget','buffRemove','Scene_Battle_onActorCancel','all\x20actors','MaxHP','skill','states','RevertAngle','SkillItemBorderCols','ActSeq_Weapon_ClearActiveWeapon','Scene_Battle_updateStatusWindowPosition','ActSeq_Impact_ZoomBlurPoint','isBattleRefreshRequested','moveBattlerHomeToPoint','Window_BattleLog_performActionEnd','uiMenuStyle','updateAction','applyTargetFilters','CommandVisible','-%1','front\x20center','maxTp','Game_Action_setItem','frameCount','isDuringNonLoopingMotion','SETTINGS','startSkew','DefaultSoftCap','addSkillTypeCommand','glitch','WaitForZoom','BattleManager_inputtingAction','ActSeq_Camera_Clamp','_totalDamage','includes','Window_ActorCommand_setup','parallaxScrollYinvertEnemy','command357','buffIconIndex','atbInterrupt','setHelpWindowItem','Class-%1-%2','ActSeq_Grid_TeleportToNode','doesPageHaveOnceParallelStart','frontviewSpriteY','SILENCE','_lastHpDamage','autoBattleAtStart','Sprite_Battler_initMembers','VisuMZ_3_ActSeqProjectiles','Parse_Notetags_HelpDescription','pha','drawItemActorSvBattler','validTargets','battleback1Name','CommandWidth','VisuMZ_3_BattleAI','jsCritRateAsTarget','isBorderPortraitSpriteVisible','updateFrame','isFTB','ActSeq_Mechanics_HpMpTp','DefaultHardCap','CalcEscapeRaiseJS','BattleLogRectJS','preparePartyRefresh','code','ActSeq_Mechanics_OnceParallel','mainFontSize','isTpbCharged','createBattleField','isAutoBattleCommandEnabled','actor%1-gauge-%2','requestAnimation','process_VisuMZ_BattleCore_jsFunctions','Targets1','onActorCancel','ActSeq_Movement_WaitForMovement','onTurnEnd','itemHeight','displayCurrentState','moveBattlerHomeDistance','applyImmortal','_homeEasing','isAnyoneSkewing','updateForceAction','DefeatEvent','VisuMZ_4_IconBalloons','command3011','_weaponImageId','ActSeq_Zoom_Reset','MotionIdle','alive\x20actors\x20not\x20user','ColorManager_mpColor','motionSpeed','ATK','ActSeq_BattleLog_AddText','normalColor','VisuMZ_3_StateTooltips','MIN_SAFE_INTEGER','setSTBExploited','isPhysical','Scene_Battle_helpWindowRect','autoBattle','ShowCosts','battleSkew','getAspectData','Game_Actor_makeActionList','TpGaugeOffsetY','ActSeq_Mechanics_EmulateItemEffect','damagePopupOffsetX','addChild','svShadow','centerFrontViewSprite','OffsetX','StartName','stepBack','actorCommandEscape','addState','executeHpDamage','ESCAPE','ActSeq_Impact_ColorBreak','isCancelTriggered','onHomeMoveEnd','processEscape','comboWindowOffsetX','ActSeq_Mechanics_RemoveState','startMove','ClearBattleLog','setHome','AggroControlSystem','_battleBalloonQueue','View\x20battle\x20member\x20status.','allowRandomSpeed','IconStypeNorm','Scene_Battle_createActorCommandWindow','colSpacing','MeleeDistance','setHorrorEffectSettings','Exploited','pattern','_forcedBattleLayout','selectNextActor','clearResult','ActSeq_Projectile_Picture','attackMotions','value2','SkewX','notFocusValid','_multipliers','_motionType','updateGrow','dying','ActSeq_Grid_AnimationJsAtNode','ALL_ACTORS','BattleSystemSTB','Game_System_initialize','innerWidth','createUIContainer','GroupDigits','shouldPopupDamage','getLastHpDamage','HP_Flat','loadBattleback1','BindCommonEventKeysForObj','_flashColor','Scene_Battle_logWindowRect','damageOffsetY','VariableHeal','Game_Battler_performDamage','Window_BattleLog_displayActionResults','ActSeq_Movement_HomeMoveToTarget','Scene_Battle_updateBattleProcess','SwitchMissEvade','Sprite_Animation_targetSpritePosition','createMiss','changeInputWindow','_targetHomeY','WaitForCamera','Targets2','compareBattlerSprites','getAttackMotionSlot','alignBattleCoreDamageSprite','updateActors','setHue','contains','freezeFrame','_colorType','extraPositionY','canMove','GuardFormulaJS','_returnWindow','svActorHorzCells','ActSeq_Set_FinishAction','PreStartTurnJS','minimumStayDuration','jsOneForOne','canAttackBattleCore','cutinExit','addSkillCommands','drawParamData','CreateCommonEventKeys','weatherType','\x20to\x20%1\x20midbattle.','StyleName','_enemyWindowMode','isTriggered','Formula','_actorSprites','Game_Action_itemHit','Window_BattleLog_displayCurrentState','scale','command119','CreateCutinSettings','_borderPortraitDuration','customFontFace','battleSpin','AllowCollapse','command236','isBattleSys','ENEMY_OFFSET_Y','battleCommandIcon','_nameTempVisibleDuration','focus','enemyNames','battlerHue','updateFloat','_svBattlerSprite','getDefeatedEnemies','regenerateAll','increaseTotal','performCollapse','clearWeaponAnimation','Sprite_Battler_damageOffsetX','actions','ShowPopup','isPreviousSceneBattleTransitionable','ParseSkillNotetags','_inBattleStatusWindow','drawDarkRect','ShowEnemyGauge','battleUIOffsetX','itemEffectAddAttackState','JS\x20%1START\x20TURN','isDamagePopupRequested','Game_Action_updateLastTarget','drawSkillCost','TimeScale','updateCollapse','_damageContainer','ActSeq_Movement_Jump','_targetHits','setupBattleback','_actionInputIndex','DestinationJS','_battleCoreNoElement','stopInjectAnimation','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','LifeStealRegExp','ActSeq_Skew_Reset','open','becomeSTBExploited','isActor','Game_Action_setSubject','duration','_baseLineStack','textSizeEx','_makeFontNameText','applyForcedGameTroopSettingsBattleCore','Elements','ActSeq_Mechanics_StbExploit','endIcon','param','onOpacityEnd','_tpbSceneChangeCacheActor','???','_pageupButton','loadBattleback2','canBattlerMove','$target','addChildToBack','HelpSkillType','updateWaitMode','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20rate\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalRate\x20=\x20rate;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(rate)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20rate\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20rate\x20to\x20%2\x27.format(\x27\x27,originalRate));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalRate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20rate\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20rate;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','1:1','pop','removeDamageSprite','CriticalDmgFlat','drawingAreaWidth','\x5cHEXCOLOR<%1>','ResetOffset','actorId','float','ATTACK','updateInterpreter','forActor','updateTargetValue','weatherPower','BattleEndEvent','equipSlots','canSingleOrMultipleSelect','extraPositionX','WaitForAnimation','visualCutinPortraitType','ActSeq_Mechanics_StbExtraAction','bitmapHeight','pageOffsetY','BattleManager_startTurn','resetCounter','_displayBattleCoreTransitionErrorMsg','updatePosition','Game_Interpreter_command283','createHelpWindow','onStaticEnemyBitmapLoad','gainStoredBoostPoints','isAnimationShownOnBattlePortrait','processActorCommandCancelTPB','lineHeight','2606600wlWQZV','battlerSprites','statusWindowRect','LOVE','_handlers','displayReflectionPlayBack','undecided','isTimeActive','Shadow','addPartyCommand','toLowerCase','<CENTER>%1','isDebuffAffected','inBattleStatusWindowRect','_autoBattle','dataId','AddOption','evalDamageFormula','isAttack','isTurnBased','battleInjectAni','TurnsFmt','addBattleCoreAutoBattleStartupCommand','callNextMethod','forceWeaponAnimation','BattleManager_initMembers','skewBattler','ShakeFlinchDuration','Window_BattleEnemy_initialize','attackAnimationIdSlot','visualCutinPortraitHue','linkSprite','updateBattlerContainer','extraHeight','processAbort','ActSeq_Impact_MotionTrailRemove','addOnceParallelInterpreter','drawActorName','applyAngleChange','ActSeq_Mechanics_AddBuffDebuff','isForAliveFriendBattleCore','StateOverlayOffsetY','evaded','Style','jsScaleUp','showNormalAnimation','addActor','BindCommonEventKeysForGroup','changeAtbCastTime','FaceAway','StatusWindow_RectJS','Window_Options_addGeneralOptions','svBattlerAnchorY','addDamageSprite','chant','_skewX','ActSeq_Target_RandTarget','command339','ActSeq_Mechanics_DeathBreak','retrieveBattleBalloon','FocusX','createDamageSprite','isForAnyoneFocusOpponents','_homeY','createAnimationContainer','message4','fontSize','_targetSkewY','parallaxHueEnemyModifier','Sprite_Battler_setHome','enemyShowParametersIfDefeated','attackStatesRate','BattleManager_cancelActorInput','displayMpDamage','buffAdd','max','guardHpLifeSteal','hitType','BattleManager_makeActionOrders','updateEventMain','originalName','Post','balloonId','_damagePopupArray','anchorY','members','Game_BattlerBase_initMembers','Decreases\x20%1\x20to\x20%3%2\x5cC[0].\x20%4','skillItemWindowRectBorderStyle','compatibilityVisible','removeBuff','makeHpDamageText','_active','PointJS','AutoNotetag','movement','paySkillCost','playEnemyDamage','initialize','changeBattlebacks','Sprite_Actor_createStateSprite','updateMotionCount','Window_BattleLog_performCounter','selectPreviousCommand','round','damageCounterWindowRect','VisuMZ_2_AggroControlSystem\x20needs\x20to\x20be\x20updated\x20','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20','onEncounterBattleCore','Normal','list','_tempBattler','createPartyCommandWindow','counterAttack','loadCharacter','ANTI_TINT_UI','ActSeq_Impact_Desaturate','createAttachmentSprites','_angleWholeDuration','AutoAddState','_tempEquipCheck','JS\x20%1END\x20ACTION','autoSelectLastSelected','PreDamageAsTargetJS','isDTB','_stypeIDs','startFloat','isForFriendBattleCore','parseForcedGameTroopSettingsBattleCore','thrust','IconIndex','14556YuNwnt','attackStates','ShowCounterWait','addChildAt','lineRect','_blendColor','equips','battleBalloon','skew','BattleManager_startAction','updateBitmap','%1StartActionJS','left','noise','Game_Actor_setup','Game_Action_isForDeadFriend','getItemDamageAmountTextOriginal','Sprite_Weapon_loadBitmap','setBattler','Exploiter','ActSeq_Mechanics_AnalyzeWeakness','resizeWindowBorderStyle','_logWindow','Game_Battler_regenerateAll','BattleManager_setup','Parse_Notetags_TraitObjects','WaitForProjectile','chantStyle','PreStartBattleJS','\x5cC[0]','Enable','isActiveTpb','GetActionSequenceSpecialTargetWithFlags','BattleSystemBTB','sleep','getMenuImage','loadBitmap','applyData','statusText','lifeStealRate','Game_Battler_startTpbTurn','ParseItemNotetags','isActing','dead\x20actors','ActSeq_Movement_MoveBy','gaugeX','ConfigManager_applyData','lukEffectRate','ActSeq_Movement_WaitForSkew','Window_BattleLog_performCollapse','ActSeq_Animation_AttackAnimation','_battleCoreBattleResumeAfter','getLastPluginCommandInterpreter','isQueueOptionsMenu','isSubjectValidForAnyoneSelect','isBattleCoreTargetScope','battleLayoutStyle','GUARD','_createCursorArea','updateLastTarget','hue','executeMpDamage','EasingType','_jumpHeight','addAutoBattleCommands','drawActorStateTurns','changeTurnOrderByCTB','loadEnemy','isActiveTpbReady','adjustPosition_ScaleToFit','Window_BattleLog_performMiss','maxCols','Sprite_Enemy_createStateIconSprite','_growWholeDuration','needsSelectionBattleCore','Window_BattleLog_update','_cursorArea','_growDuration','gainTp','in\x20order\x20for\x20Ally\x20or\x20Enemy\x20targeting\x20to\x20work\x20','occasion','Window_ItemList_maxCols','VisuMZ_2_DragonbonesUnion','Game_Action_apply','nameY','isAtbChargingState','dimColor2','ActSeq_Animation_ShowAnimationJS','Scene_Battle_terminate','ShowPortraits','isCertainHit','processBorderActor','FullActions','drawStates','aliveMembers','isJumping','_escapeRatio','_activeWeaponSlot','updateFlip','_attackAnimationId','svBattlerAnchorX','performMoveToTargets','HP_Rate','_forcedBattlers','RequiresDefeat','PostDamageJS','callOptions','animationId','_lastEnemy','performActionStart','passiveText','_homeWholeDuration','alive\x20enemies\x20not\x20user','singleSkill','removeChild','performEvasion','attackTimesAdd','AGI','NameOffsetY','_opacityDuration','BattleLog','SkillID','DEF','isNonSubmenuCancel','isOnCurrentMap','Game_Action_setGuard','shift','ActSeq_Animation_ActionAnimation','Radius','makeDeepCopy','damageContainer','statusDescription','alive\x20enemies','setSkill','createBattleFieldContainer','drawTextEx','_baseY','Game_BattlerBase_eraseState','commandEscape','isWaiting','animationNextDelay','targetDistortionSpritePosition','isForOpponent','EnemyOffsetY','partyCommandWindowRectXPStyle','Pre','ITEM','PreRegenerateJS','checkTpbInputClose','itemEffectAddNormalState','NUM','_targets','ActSeq_Movement_FaceDirection','_battlerName','isSceneBattle','WaitForAngle','ActSeq_Inject_AnimationPauseResume','onBattleStartOnceParallels','_stateSprite','_updateClientArea','createString','delay','top','ActSeq_Animation_ItemAnimation','createBattleUIOffsetY','setStateTooltipBattler','PopupDuration','BattleManager_selectNextCommand','alterType','comboWindowOffsetY','updateCancelButton','commandNameWindowDrawText','addBattlerBuffsDebuffs','positionOffsetX','GetParamIcon','updateStyleOpacity','save','startAction','AddHpGaugeOption','switchToWeaponType','\x5cI[%2]\x5cC[16]%1\x5cC[0]','WaitCount2','AttackAnimation','playCancel','not\x20focus','\x5cC[16]%1\x5cC[0]','isATB','552bonqIv','Window_BattleActor_hide','previousActor','NameOffsetX','onDatabaseLoaded','adjustPosition_ScaleDown','Letter','PostStartBattleJS','revertTpbCachedActor','skillTypes','Sprite_Actor_updateShadow','performActionEnd','actor%1-portrait','ActSeq_Movement_Scale','...','concat','AS\x20TARGET','addMeleeReturnActionSet','slice','opacityStart','ZZZ','isAutoBattleCommandAdded','BattleVictoryJS','canGuardBattleCore','EVAL','svAnchorY','SceneManager_push','ActSeq_Movement_Float','enemyStatus','gainBravePoints','battleback2Name','targetsForOpponents','VisuMZ_1_ElementStatusCore','ActSeq_Impact_MotionBlurScreen','onBattleStart','isAnimationPlaying','_updateCursorArea','Game_Battler_makeSpeed','_pattern','clearAllVisualCutins','damageRate','battleCamera','Scene_Battle_createCancelButton','disarmHpLifeSteal','flipVisualCutinVert','ChantStyle','ActSeq_Mechanics_CtbOrder','ActSeq_Inject_AnimationEnd','StatusWindowAttachmentBackOffsetY','backColor','passive','_states','Scene_Battle_initialize','custom','loadSystem','performAttack','AspectColor','processHandling','_actorMultiTargetWindow','_distortionSprite','state','PreEndActionJS','setValue','\x5cI[%1]%2','statusHelpDesc','sortEnemies','isCharging','isCustomBattleScope','setCustomDamageFormula','Window_BattleLog_performRecovery','drawItemActorSprite','setFullActionsPTB','autoSelect','restore','CmdIconOptions','changeWeather','addSingleSkillCommand','_createColorFilter','createLowerLayer','startInjectAnimation','_text','setText','pagedown','Game_Temp_initialize','mpColor','mmp','_actions','_underAnimationContainer','onActorOk','startOpacity','getBattlePortraitFilename','cameraClamp','changeTextColor','addStateTurns','isMoving','initMembers','isOverworld','ActSeq_BattleLog_WaitForNewLine','addWindow','faceWidth','_battlePortrait','maxCommands','enemyId','_drawTextOutline','boxHeight','offsetX','hitText','StatusWindowAttachmentFrontOffsetX','process_VisuMZ_BattleCore_CommonEventKeys','HITTYPE_MAGICAL','visible','ActSeq_Grid_PullToTargetNode','_opacityEasing','ChangeOrderBy','destroyDamageSprite','deselect','actorCommandCancelTPB','Skill-%1-%2','Scene_Battle_selectNextCommand','onBattleStartBattleCore','_floatEasing','forceSelect','getWtypeIdWithName','resizeWindowXPStyle','_battleCoreForcedElements','targetObjects','waitForJump','prepareBorderActor','isGuardLifeSteal','addedDebuffs','createBattleUIOffsetX','SmoothImage','Scene_Battle_createAllWindowsIBS','isCancelLifeSteal','CheckVisibleBattleNotetags','ShowFacesListStyle','isOpenAndActive','startAttackWeaponAnimation','Targets','_flinched','angleDuration','_partyCommandWindow','trueRandomTarget','makeTargetSelectionMoreVisible','Scene_Battle_commandEscape','ActSeq_Impact_TimeScale','%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.','NextTurn','SkewY','ActSeq_Motion_FreezeMotionFrame','setReturnWindow','BattleCore','Parse_Notetags_Action','meetsSelectFrontviewActorConditions','displayItemMessage','isOptionsCommandAdded','EnableSoftCap','_baseX','RegExp','EscapeFailureJS','AutoBattle','updateEffectContainers','setSubject','_frame','isForRandomBattleCore','min','Game_Action_executeHpDamage_ComboWindow','playOnceParallelTroopPage','_reflectionTarget','updateAttachmentSprites','prototype','weaponImageId','_actor','flipVisualCutinHorz','ActSeq_Horror_Clear','subject','ActSeq_Animation_AttackAnimation2','freezeMotion','ShowMissEvasion','ActSeq_Mechanics_VariablePopup','addAnimationSpriteToContainer','portraitHue','createInnerPortrait','requestMotionRefresh','BG_TYPE','setupBattleCore','stepForward','AspectNameFmt','ActSeq_Projectile_Animation','emulateActionEffect','_createDamageContainer','setBattlerFacePoint','ActSeq_Weapon_SetActiveWeapon','_growY','VisuMZ_2_BattleSystemCTB','createEnemySprite','return\x200','_canLose','QoL','waitForFloat','PreEndTurnJS','setup','VisuMZ_2_BattleSystemSTB','isForAnyone','faceRect','FlinchDuration','_shakeFlinchPower','die','_forcedHomeX','extraPositionScaledY','battleCoreTpbMainPhase','clearHorrorEffects','MDF','setLetter','powerDownColor','applyItem','commandRemember','Window_BattleLog_performActionStart','PrioritySortActive','ActSeq_Angle_WaitForAngle','startInBattleStatus','effects','origin','jsScaleDown','setSvBattlerSprite','updateVisibility','stop','Scene_Battle_createPartyCommandWindow','performFlinch','ActSeq_Motion_WaitMotionFrame','criticalHitRate','updatePadding','requestRefresh','_angleRevertOnFinish','isBattleTest','JS\x20%1END\x20BATTLE','hardDamageCap','Strength','AllActorsText','ANNOYED','VisuMZ_1_SkillsStatesCore'];_0x2f13=function(){return _0x1fbc32;};return _0x2f13();}function Window_EnemyName(){const _0x146e4c=_0x2dcaec;this[_0x146e4c(0x970)](...arguments);}Window_EnemyName['prototype']=Object[_0x2dcaec(0x2f5)](Window_StatusBase['prototype']),Window_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Window_EnemyName,Window_EnemyName[_0x2dcaec(0xaf6)]['initialize']=function(_0x16ee23){const _0x2c7335=_0x2dcaec;this[_0x2c7335(0x708)]=_0x16ee23,this[_0x2c7335(0xa9c)]='';const _0x1fcc11=new Rectangle(0x0,0x0,Graphics[_0x2c7335(0x555)],this['lineHeight']()*0x4);Window_StatusBase[_0x2c7335(0xaf6)]['initialize'][_0x2c7335(0x390)](this,_0x1fcc11),this['setBackgroundType'](0x2),this[_0x2c7335(0x3b6)]=0x0;},Window_EnemyName['prototype'][_0x2dcaec(0xb33)]=function(){const _0x4bc721=_0x2dcaec;this[_0x4bc721(0xb4b)]=0x0;},Window_EnemyName['prototype'][_0x2dcaec(0x2cf)]=function(){const _0x13527b=_0x2dcaec;return $gameTroop[_0x13527b(0x963)]()[this[_0x13527b(0x708)]];},Window_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x316920=_0x2dcaec;Window_StatusBase[_0x316920(0xaf6)]['update'][_0x316920(0x390)](this),this['enemy']()&&this['enemy']()[_0x316920(0x321)]()!==this[_0x316920(0xa9c)]&&(this['_text']=this['enemy']()[_0x316920(0x321)](),this[_0x316920(0xbc9)]()),this['updateOpacity'](),this['updatePosition']();},Window_EnemyName[_0x2dcaec(0xaf6)]['updateOpacity']=function(){const _0x5199cf=_0x2dcaec;if(!this[_0x5199cf(0x2cf)]()){if(this[_0x5199cf(0x3b6)]>0x0)this[_0x5199cf(0x3b6)]-=0x10;}else{if(this[_0x5199cf(0x2cf)]()[_0x5199cf(0x1f5)]()){if(this[_0x5199cf(0x3b6)]>0x0)this['contentsOpacity']-=0x10;}else{if(SceneManager[_0x5199cf(0x496)][_0x5199cf(0x6a2)]&&SceneManager[_0x5199cf(0x496)]['_enemyWindow'][_0x5199cf(0x1d7)]&&SceneManager['_scene'][_0x5199cf(0x6a2)][_0x5199cf(0x250)][_0x5199cf(0x7f2)](this[_0x5199cf(0x2cf)]())){if(this[_0x5199cf(0x3b6)]<0xff)this[_0x5199cf(0x3b6)]+=0x10;}else this[_0x5199cf(0x3b6)]>0x0&&(this['contentsOpacity']-=0x10);}}},Window_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x906)]=function(){const _0x3d7a1f=_0x2dcaec;if(!this[_0x3d7a1f(0x2cf)]())return;SceneManager[_0x3d7a1f(0x78b)]()?this['x']=Graphics[_0x3d7a1f(0x555)]-this[_0x3d7a1f(0x2cf)]()[_0x3d7a1f(0xbc2)]()['_baseX']:this['x']=this[_0x3d7a1f(0x2cf)]()['battler']()[_0x3d7a1f(0xae9)];this['x']-=Math[_0x3d7a1f(0x976)](this[_0x3d7a1f(0x64b)]/0x2),this['y']=this[_0x3d7a1f(0x2cf)]()[_0x3d7a1f(0xbc2)]()['_baseY']-Math[_0x3d7a1f(0x976)](this[_0x3d7a1f(0x90d)]()*1.5);const _0x5ba6d0=VisuMZ['BattleCore']['Settings'][_0x3d7a1f(0xc36)];this['x']+=_0x5ba6d0[_0x3d7a1f(0xa4f)]||0x0,this['y']+=_0x5ba6d0['NameOffsetY']||0x0;},Window_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x2be)]=function(){const _0x2a6230=_0x2dcaec;Window_Base[_0x2a6230(0xaf6)][_0x2a6230(0x2be)]['call'](this),this[_0x2a6230(0x2e1)][_0x2a6230(0x950)]=VisuMZ[_0x2a6230(0xae3)][_0x2a6230(0xbeb)][_0x2a6230(0xc36)][_0x2a6230(0x352)];},Window_EnemyName['prototype']['refresh']=function(){const _0x37c173=_0x2dcaec;Window_StatusBase[_0x37c173(0xaf6)][_0x37c173(0xbc9)]['call'](this),this[_0x37c173(0x2e1)]['clear']();if(!this['enemy']())return;this[_0x37c173(0x77d)]();},Window_EnemyName[_0x2dcaec(0xaf6)][_0x2dcaec(0x77d)]=function(){const _0x3ff422=_0x2dcaec;this[_0x3ff422(0xa9c)]=this[_0x3ff422(0x2cf)]()[_0x3ff422(0x321)]();const _0x2cb63a=this[_0x3ff422(0x8da)](this[_0x3ff422(0xa9c)])[_0x3ff422(0x64b)],_0x4b7b97=Math[_0x3ff422(0x976)]((this[_0x3ff422(0x86d)]-_0x2cb63a)/0x2);this[_0x3ff422(0xa18)](this['_text'],_0x4b7b97,0x0,_0x2cb63a+0x8);},Window_BattleLog['prototype'][_0x2dcaec(0x3d5)]=function(){const _0xd2c3f3=_0x2dcaec;return VisuMZ['BattleCore'][_0xd2c3f3(0xbeb)][_0xd2c3f3(0xa09)][_0xd2c3f3(0x281)];},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x6da)]=function(){const _0x4e9f2f=_0x2dcaec;return VisuMZ[_0x4e9f2f(0xae3)][_0x4e9f2f(0xbeb)][_0x4e9f2f(0xa09)][_0x4e9f2f(0x551)];},Window_BattleLog['prototype'][_0x2dcaec(0xa7d)]=function(){const _0x2de150=_0x2dcaec;return VisuMZ['BattleCore'][_0x2de150(0xbeb)][_0x2de150(0xa09)][_0x2de150(0x4de)];},Window_BattleLog['prototype']['isFastForward']=function(){return![];},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xc1b)]=function(_0x378024,_0xf7e01){const _0x47eb28=_0x2dcaec;this[_0x47eb28(0xc48)]('actionSplicePoint'),BattleManager[_0x47eb28(0x254)](_0x378024,_0xf7e01),this[_0x47eb28(0x925)]();},Window_BattleLog['prototype'][_0x2dcaec(0xb09)]=function(_0x49971a,_0x576b13,_0xd4be97){const _0x45f10a=_0x2dcaec;this[_0x45f10a(0xc48)](_0x45f10a(0x6e4)),BattleManager[_0x45f10a(0x423)](_0x49971a,_0x576b13,_0xd4be97),this[_0x45f10a(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e4)]=function(){const _0x5969ae=_0x2dcaec;this[_0x5969ae(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x190)]=function(_0x297a73){const _0x9487d7=_0x2dcaec,_0x33e12b=Array[_0x9487d7(0xaf6)][_0x9487d7(0xa5e)][_0x9487d7(0x390)](arguments,0x1),_0x4b8af4={'name':_0x297a73,'params':_0x33e12b},_0x486813=this[_0x9487d7(0x402)]['map'](_0xb35ec7=>_0xb35ec7[_0x9487d7(0x321)])[_0x9487d7(0x7bc)](_0x9487d7(0x6e4));_0x486813>=0x0?this[_0x9487d7(0x402)][_0x9487d7(0x5c0)](_0x486813,0x0,_0x4b8af4):this[_0x9487d7(0x402)][_0x9487d7(0x190)](_0x4b8af4);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xc48)]=function(_0x2162c6){const _0x96adad=_0x2dcaec,_0x4dccae=Array[_0x96adad(0xaf6)][_0x96adad(0xa5e)][_0x96adad(0x390)](arguments,0x1);this[_0x96adad(0x402)][_0x96adad(0xc48)]({'name':_0x2162c6,'params':_0x4dccae});},Window_BattleLog['prototype'][_0x2dcaec(0xbbc)]=function(){const _0x577557=_0x2dcaec;if(!$gameTemp[_0x577557(0x5b6)]())return;console[_0x577557(0x1e4)](this['_methods']['map'](_0x2320b8=>_0x2320b8['name'])[_0x577557(0x6b8)]('\x0a'));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x4ee)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc9)],Window_BattleLog[_0x2dcaec(0xaf6)]['refresh']=function(){const _0x363d27=_0x2dcaec;this[_0x363d27(0x3a7)]=!![];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x9dc)]=Window_BattleLog[_0x2dcaec(0xaf6)]['update'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x691ec5=_0x2dcaec;VisuMZ['BattleCore'][_0x691ec5(0x9dc)][_0x691ec5(0x390)](this);if(this[_0x691ec5(0x3a7)])this['processRefresh']();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x324)]=function(){const _0x1b32a4=_0x2dcaec;this['_requestRefresh']=![],VisuMZ['BattleCore']['Window_BattleLog_refresh'][_0x1b32a4(0x390)](this);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x370)]=function(_0x451228){const _0x5f075c=_0x2dcaec;let _0x5d4e2e=VisuMZ[_0x5f075c(0xae3)][_0x5f075c(0xbeb)][_0x5f075c(0xa09)][_0x5f075c(0x6ac)][_0x5f075c(0x918)]()[_0x5f075c(0x651)](),_0x9c99ca=this[_0x5f075c(0x416)][_0x451228];if(_0x9c99ca[_0x5f075c(0xb9e)](/<LEFT>/i))_0x5d4e2e=_0x5f075c(0x99d);else{if(_0x9c99ca[_0x5f075c(0xb9e)](/<CENTER>/i))_0x5d4e2e=_0x5f075c(0xc43);else _0x9c99ca[_0x5f075c(0xb9e)](/<RIGHT>/i)&&(_0x5d4e2e='right');}_0x9c99ca=_0x9c99ca[_0x5f075c(0x1d3)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x9c99ca=_0x9c99ca['replace'](/\\I\[0\]/gi,'');const _0x144b8e=this[_0x5f075c(0x995)](_0x451228);this[_0x5f075c(0x2e1)][_0x5f075c(0x59d)](_0x144b8e['x'],_0x144b8e['y'],_0x144b8e[_0x5f075c(0x64b)],_0x144b8e[_0x5f075c(0x75c)]);const _0x13d9a3=this[_0x5f075c(0x8da)](_0x9c99ca)['width'];let _0x2fe072=_0x144b8e['x'];if(_0x5d4e2e==='center')_0x2fe072+=(_0x144b8e[_0x5f075c(0x64b)]-_0x13d9a3)/0x2;else _0x5d4e2e==='right'&&(_0x2fe072+=_0x144b8e[_0x5f075c(0x64b)]-_0x13d9a3);this[_0x5f075c(0xa18)](_0x9c99ca,_0x2fe072,_0x144b8e['y'],_0x13d9a3+0x8);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x59f)]=function(_0xacdfc7){const _0x4cdeb1=_0x2dcaec;this[_0x4cdeb1(0x416)][_0x4cdeb1(0x190)](_0xacdfc7),this[_0x4cdeb1(0xbc9)](),this['callNextMethod']();},Window_BattleLog[_0x2dcaec(0xaf6)]['updateWaitMode']=function(){const _0x2a4624=_0x2dcaec;let _0x23ac68=![];switch(this[_0x2a4624(0x1b9)]){case _0x2a4624(0x27a):_0x23ac68=this['_spriteset']['isEffecting']();break;case _0x2a4624(0x96d):_0x23ac68=this[_0x2a4624(0x2a3)][_0x2a4624(0x769)]();break;case _0x2a4624(0xc6c):_0x23ac68=this['_spriteset'][_0x2a4624(0xa6f)]();break;case'float':_0x23ac68=this['_spriteset'][_0x2a4624(0x21f)]();break;case _0x2a4624(0x6d1):_0x23ac68=this['_spriteset']['isAnyoneJumping']();break;case _0x2a4624(0x19d):_0x23ac68=this[_0x2a4624(0x2a3)][_0x2a4624(0x656)]();break;}return!_0x23ac68&&(this[_0x2a4624(0x1b9)]=''),_0x23ac68;},Window_BattleLog['prototype']['waitForAnimation']=function(){const _0xb0caa9=_0x2dcaec;this['setWaitMode'](_0xb0caa9(0xc6c));},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xb13)]=function(){const _0x24137b=_0x2dcaec;this[_0x24137b(0x415)](_0x24137b(0x8f4));},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xaca)]=function(){const _0x579fa1=_0x2dcaec;this[_0x579fa1(0x415)]('jump');},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x224)]=function(){const _0x278dfc=_0x2dcaec;this[_0x278dfc(0x415)]('opacity');},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x749)]=function(){const _0x1c4100=_0x2dcaec,_0x2d5a5a=VisuMZ[_0x1c4100(0xae3)][_0x1c4100(0xbeb)][_0x1c4100(0xa09)];if(!_0x2d5a5a[_0x1c4100(0x3a2)])return;this[_0x1c4100(0x190)](_0x1c4100(0x59f),_0x2d5a5a[_0x1c4100(0x675)]['format']($gameTroop[_0x1c4100(0x6c2)]())),this[_0x1c4100(0x190)](_0x1c4100(0x4f3),_0x2d5a5a[_0x1c4100(0x79b)]),this[_0x1c4100(0x190)](_0x1c4100(0xb7e));};var $subject,$action,$targets;Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa42)]=function(_0x46f42c,_0x206d12,_0x35f81d){const _0x41be5f=_0x2dcaec;$subject=_0x46f42c,$action=_0x206d12,$targets=_0x35f81d,this[_0x41be5f(0x793)](_0x206d12)?BattleManager[_0x41be5f(0x475)]():this[_0x41be5f(0xc5d)](_0x46f42c,_0x206d12,_0x35f81d);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x793)]=function(_0x155135){const _0x21e39d=_0x2dcaec;if(!SceneManager[_0x21e39d(0xa2b)]())return![];if(!_0x155135)return![];if(!_0x155135[_0x21e39d(0x719)]())return![];if(_0x155135[_0x21e39d(0x719)]()[_0x21e39d(0x795)][_0x21e39d(0xb9e)](/<CUSTOM ACTION SEQUENCE>/i))return!![];if(DataManager[_0x21e39d(0xb75)](_0x155135[_0x21e39d(0x719)]()))return!![];return![];},Window_BattleLog[_0x2dcaec(0xaf6)]['usePremadeActionSequence']=function(_0x1ed3cd,_0x225b67,_0x32a1aa){const _0x4bef05=_0x2dcaec;this[_0x4bef05(0x604)](_0x1ed3cd,_0x225b67,_0x32a1aa),this[_0x4bef05(0x6c1)](_0x1ed3cd,_0x225b67,_0x32a1aa),this[_0x4bef05(0x649)](_0x1ed3cd,_0x225b67,_0x32a1aa);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x189)]=function(_0x3f4b90,_0x50178b){const _0x78b550=_0x2dcaec,_0x281b6c=VisuMZ['BattleCore'][_0x78b550(0xbeb)]['BattleLog'];_0x281b6c[_0x78b550(0x39c)]&&this['push'](_0x78b550(0x59f),_0x78b550(0x919)['format'](DataManager[_0x78b550(0x376)](_0x50178b)));if(DataManager['isSkill'](_0x50178b)){if(_0x281b6c[_0x78b550(0x38b)])this['displayItemMessage'](_0x50178b['message1'],_0x3f4b90,_0x50178b);if(_0x281b6c[_0x78b550(0x781)])this[_0x78b550(0xae6)](_0x50178b['message2'],_0x3f4b90,_0x50178b);}else{if(_0x281b6c[_0x78b550(0x265)])this[_0x78b550(0xae6)](TextManager[_0x78b550(0x170)],_0x3f4b90,_0x50178b);}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x604)]=function(_0x29ff77,_0x1ccb17,_0x2fdfbc){const _0x46a05c=_0x2dcaec,_0x2dc382=_0x1ccb17['item']();this['displayAction'](_0x29ff77,_0x2dc382),this[_0x46a05c(0x190)]('applyImmortal',_0x29ff77,_0x2fdfbc,!![]),this[_0x46a05c(0x190)](_0x46a05c(0x9fe),_0x29ff77,_0x1ccb17),this[_0x46a05c(0x190)](_0x46a05c(0xbd4)),this[_0x46a05c(0x190)](_0x46a05c(0x65e),_0x29ff77,_0x1ccb17),this[_0x46a05c(0x190)]('waitForAnimation');},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x6c1)]=function(_0x48d5dc,_0x2beed5,_0x450ab2){const _0x47f652=_0x2dcaec;if(this[_0x47f652(0x1ac)](_0x2beed5))this[_0x47f652(0x62a)](_0x48d5dc,_0x2beed5,_0x450ab2);else{if(this[_0x47f652(0x1e8)](_0x2beed5))this[_0x47f652(0x65f)](_0x48d5dc,_0x2beed5,_0x450ab2);else _0x2beed5[_0x47f652(0xc62)]()?this['targetActionSet'](_0x48d5dc,_0x2beed5,_0x450ab2):this[_0x47f652(0x322)](_0x48d5dc,_0x2beed5,_0x450ab2);}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa5d)]=function(_0x448247,_0x4b6650,_0x14ea01,_0x539311){const _0x273764=_0x2dcaec;if(_0x4b6650){const _0x17b0c0=_0x448247[_0x273764(0xbc2)]();this[_0x273764(0x190)](_0x273764(0x61f),[_0x448247],_0x14ea01,_0x539311),this[_0x273764(0x190)]('performMoveToPoint',_0x448247,_0x17b0c0[_0x273764(0x5a6)],_0x17b0c0[_0x273764(0x94d)],_0x539311,![],'Linear'),this[_0x273764(0x190)](_0x273764(0x4a5),[_0x448247],_0x273764(0xc69)),this[_0x273764(0x190)](_0x273764(0xbd4)),this['push']('requestMotion',[_0x448247],'walk');}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x1ac)]=function(_0x24a7fd){const _0x383713=_0x2dcaec;if(!_0x24a7fd[_0x383713(0x835)]())return![];if(!_0x24a7fd[_0x383713(0x22c)]())return![];if(!_0x24a7fd[_0x383713(0xa1f)]())return![];return VisuMZ[_0x383713(0xae3)][_0x383713(0xbeb)]['ActionSequence'][_0x383713(0x374)];},Window_BattleLog[_0x2dcaec(0xaf6)]['autoMeleeSingleTargetActionSet']=function(_0x24a32b,_0x506278,_0x325395){const _0x2b5dc5=_0x2dcaec,_0x3a4e97=_0x24a32b[_0x2b5dc5(0x58c)]()[_0x2b5dc5(0x134)]<0x2,_0x298752=0x14,_0x1d4277=0x30;let _0x1038c5=!![];_0x325395[_0x2b5dc5(0x7ce)]>0x0&&_0x24a32b[_0x2b5dc5(0x8d6)]()===_0x325395[0x0][_0x2b5dc5(0x8d6)]()&&(_0x1038c5=![]);_0x3a4e97&&_0x1038c5&&(this[_0x2b5dc5(0x190)](_0x2b5dc5(0x61f),[_0x24a32b],_0x1d4277,_0x298752),this['push'](_0x2b5dc5(0x9f6),_0x24a32b,_0x325395,_0x2b5dc5(0x38d),_0x298752,!![],'Linear',!![]),this[_0x2b5dc5(0x190)](_0x2b5dc5(0x4a5),[_0x24a32b],_0x2b5dc5(0x4eb)),this[_0x2b5dc5(0x190)](_0x2b5dc5(0xbd4)));let _0x4accea=_0x506278[_0x2b5dc5(0x920)]()?this[_0x2b5dc5(0x18d)](_0x24a32b):0x1;for(let _0x3c33c4=0x0;_0x3c33c4<_0x4accea;_0x3c33c4++){_0x506278[_0x2b5dc5(0x920)]()&&_0x24a32b[_0x2b5dc5(0x8d6)]()&&this[_0x2b5dc5(0x190)]('setActiveWeaponSet',_0x24a32b,_0x3c33c4),_0x506278['item']()['animationId']<0x0?this[_0x2b5dc5(0x3cd)](_0x24a32b,_0x506278,_0x325395):this['wholeActionSet'](_0x24a32b,_0x506278,_0x325395);}_0x506278['isAttack']()&&_0x24a32b[_0x2b5dc5(0x8d6)]()&&this[_0x2b5dc5(0x190)](_0x2b5dc5(0x2ab),_0x24a32b),this[_0x2b5dc5(0x190)]('applyImmortal',_0x24a32b,_0x325395,![]),this[_0x2b5dc5(0xa5d)](_0x24a32b,_0x3a4e97,_0x1d4277,_0x298752);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x1e8)]=function(_0x4f6bff){const _0x621edf=_0x2dcaec;if(!_0x4f6bff['isPhysical']())return![];if(!_0x4f6bff[_0x621edf(0x377)]())return![];if(!_0x4f6bff['isForOpponent']())return![];return VisuMZ[_0x621edf(0xae3)][_0x621edf(0xbeb)][_0x621edf(0x709)][_0x621edf(0x4e7)];},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x65f)]=function(_0x4eab01,_0xb29cfb,_0x2cb9be){const _0x2e91d8=_0x2dcaec,_0x28d284=_0x4eab01[_0x2e91d8(0x58c)]()[_0x2e91d8(0x134)]<0x2,_0x5e183b=0x14,_0x344b88=0x30;if(_0x28d284){this[_0x2e91d8(0x190)](_0x2e91d8(0x61f),[_0x4eab01],_0x344b88,_0x5e183b);const _0x4a6f37=_0x2cb9be[_0x2e91d8(0x7ce)]>0x1?_0x2e91d8(0x7e4):'front\x20base';this['push'](_0x2e91d8(0x9f6),_0x4eab01,_0x2cb9be,_0x4a6f37,_0x5e183b,!![],_0x2e91d8(0x41d),!![]),this['push'](_0x2e91d8(0x4a5),[_0x4eab01],_0x2e91d8(0x4eb)),this[_0x2e91d8(0x190)](_0x2e91d8(0xbd4));}let _0x19d753=_0xb29cfb[_0x2e91d8(0x920)]()?this[_0x2e91d8(0x18d)](_0x4eab01):0x1;for(let _0x245390=0x0;_0x245390<_0x19d753;_0x245390++){_0xb29cfb[_0x2e91d8(0x920)]()&&_0x4eab01[_0x2e91d8(0x8d6)]()&&this[_0x2e91d8(0x190)](_0x2e91d8(0xc37),_0x4eab01,_0x245390),this[_0x2e91d8(0x322)](_0x4eab01,_0xb29cfb,_0x2cb9be);}_0xb29cfb['isAttack']()&&_0x4eab01[_0x2e91d8(0x8d6)]()&&this[_0x2e91d8(0x190)](_0x2e91d8(0x2ab),_0x4eab01),this[_0x2e91d8(0x190)](_0x2e91d8(0x822),_0x4eab01,_0x2cb9be,![]),this['addMeleeReturnActionSet'](_0x4eab01,_0x28d284,_0x344b88,_0x5e183b);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x3cd)]=function(_0x2117f1,_0x38cdfd,_0x4f5edf){const _0x16be27=_0x2dcaec,_0x29c3d6=_0x38cdfd[_0x16be27(0x719)]();for(const _0x13bab2 of _0x4f5edf){if(!_0x13bab2)continue;this[_0x16be27(0x190)](_0x16be27(0x79c),_0x2117f1,_0x38cdfd),this['push'](_0x16be27(0x4f3),Sprite_Battler[_0x16be27(0x526)]),this[_0x16be27(0x190)](_0x16be27(0x735),_0x2117f1,[_0x13bab2],_0x29c3d6['animationId']),this[_0x16be27(0x190)](_0x16be27(0x4f3),0x18),this[_0x16be27(0x190)](_0x16be27(0xc1b),_0x2117f1,_0x13bab2);}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x322)]=function(_0xbb7507,_0x502be4,_0x343e84){const _0x33de3f=_0x2dcaec,_0x3a1eaa=_0x502be4['item']();let _0x3c1532=_0x502be4['isAttack']()?0x1+_0xbb7507[_0x33de3f(0xa05)]():0x1;while(_0x3c1532--){this['push'](_0x33de3f(0x79c),_0xbb7507,_0x502be4),this[_0x33de3f(0x190)](_0x33de3f(0x4f3),Sprite_Battler[_0x33de3f(0x526)]),this[_0x33de3f(0x190)](_0x33de3f(0x735),_0xbb7507,_0x343e84[_0x33de3f(0x6be)](),_0x3a1eaa[_0x33de3f(0x9fc)]),this[_0x33de3f(0x190)](_0x33de3f(0x2c2));}for(const _0x308e55 of _0x343e84){if(!_0x308e55)continue;this['push'](_0x33de3f(0xc1b),_0xbb7507,_0x308e55);}},Window_BattleLog[_0x2dcaec(0xaf6)]['finishActionSet']=function(_0x3116c5,_0x2bcdef,_0x4d6b68){const _0x3e5d56=_0x2dcaec,_0x38c1b3=_0x2bcdef[_0x3e5d56(0x719)]();this['push'](_0x3e5d56(0x822),_0x3116c5,_0x4d6b68,![]),this['push']('waitForNewLine'),this['push'](_0x3e5d56(0x694)),this[_0x3e5d56(0x190)](_0x3e5d56(0xb7e)),this[_0x3e5d56(0x190)](_0x3e5d56(0xa57),_0x3116c5),this['push']('waitForMovement');},Window_BattleLog['prototype'][_0x2dcaec(0x773)]=function(_0x396e13){$subject=null,$action=null,$targets=[];},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x8a2)]=Window_BattleLog[_0x2dcaec(0xaf6)]['displayCurrentState'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x820)]=function(_0x476386){const _0x4ebbb5=_0x2dcaec;if(!VisuMZ[_0x4ebbb5(0xae3)][_0x4ebbb5(0xbeb)][_0x4ebbb5(0xa09)][_0x4ebbb5(0x1b2)])return;VisuMZ['BattleCore'][_0x4ebbb5(0x8a2)][_0x4ebbb5(0x390)](this,_0x476386);},Window_BattleLog['prototype'][_0x2dcaec(0x73e)]=function(_0x1f9dab){const _0x1afd49=_0x2dcaec;this[_0x1afd49(0x190)](_0x1afd49(0x580),_0x1f9dab);VisuMZ[_0x1afd49(0xae3)]['Settings']['ActionSequence'][_0x1afd49(0x746)]&&this[_0x1afd49(0x190)](_0x1afd49(0x735),_0x1f9dab,[BattleManager[_0x1afd49(0x173)]],-0x1);if(!VisuMZ[_0x1afd49(0xae3)][_0x1afd49(0xbeb)]['BattleLog'][_0x1afd49(0xb5f)])return;this[_0x1afd49(0x190)]('addText',TextManager[_0x1afd49(0x97f)][_0x1afd49(0xb60)](_0x1f9dab[_0x1afd49(0x321)]()));const _0x161735=VisuMZ[_0x1afd49(0xae3)][_0x1afd49(0xbeb)]['BattleLog'][_0x1afd49(0x993)]??0x0;if(_0x161735>0x0)this[_0x1afd49(0x190)](_0x1afd49(0x4f3),_0x161735);;},Window_BattleLog[_0x2dcaec(0xaf6)]['displayReflection']=function(_0x582f10){const _0x50e468=_0x2dcaec;this['push'](_0x50e468(0x240),_0x582f10);if(!VisuMZ['BattleCore']['Settings'][_0x50e468(0xa09)]['ShowReflect'])return;this[_0x50e468(0x190)](_0x50e468(0x59f),TextManager[_0x50e468(0xc61)][_0x50e468(0xb60)](_0x582f10[_0x50e468(0x321)]()));const _0x43f1c2=VisuMZ[_0x50e468(0xae3)]['Settings']['BattleLog'][_0x50e468(0xc2e)]??0x0;if(_0x43f1c2>0x0)this[_0x50e468(0x190)](_0x50e468(0x4f3),_0x43f1c2);;},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x913)]=function(_0x201c44,_0x314849){const _0x157940=_0x2dcaec;if(VisuMZ[_0x157940(0xae3)][_0x157940(0xbeb)][_0x157940(0x709)]['ReflectPlayback']){const _0x136d9e=_0x314849[_0x157940(0x719)]();this['push'](_0x157940(0x735),_0x201c44,[_0x201c44],_0x136d9e[_0x157940(0x9fc)]);}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xc56)]=function(_0x269ca8,_0x54070d){const _0x410ce0=_0x2dcaec;this['push'](_0x410ce0(0xc08),_0x269ca8,_0x54070d);if(!VisuMZ[_0x410ce0(0xae3)][_0x410ce0(0xbeb)][_0x410ce0(0xa09)][_0x410ce0(0xb4a)])return;const _0x2fe3b2=_0x269ca8['name'](),_0x10d398=TextManager['substitute'][_0x410ce0(0xb60)](_0x2fe3b2,_0x54070d[_0x410ce0(0x321)]());this['push']('addText',_0x10d398);const _0x38729c=VisuMZ[_0x410ce0(0xae3)][_0x410ce0(0xbeb)][_0x410ce0(0xa09)][_0x410ce0(0x2fc)]??0x0;if(_0x38729c>0x0)this['push'](_0x410ce0(0x4f3),_0x38729c);;},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleLog_displayActionResults']=Window_BattleLog[_0x2dcaec(0xaf6)]['displayActionResults'],Window_BattleLog[_0x2dcaec(0xaf6)]['displayActionResults']=function(_0x4e8686,_0x28f285){const _0xa67c0b=_0x2dcaec;VisuMZ[_0xa67c0b(0xae3)][_0xa67c0b(0x87a)][_0xa67c0b(0x390)](this,_0x4e8686,_0x28f285);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x1b7)]=Window_BattleLog['prototype'][_0x2dcaec(0x598)],Window_BattleLog['prototype'][_0x2dcaec(0x598)]=function(_0x425293){const _0x48d33b=_0x2dcaec;if(!VisuMZ['BattleCore']['Settings'][_0x48d33b(0xa09)]['ShowFailure'])return;VisuMZ[_0x48d33b(0xae3)][_0x48d33b(0x1b7)][_0x48d33b(0x390)](this,_0x425293);},VisuMZ['BattleCore']['Window_BattleLog_displayCritical']=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x323)],Window_BattleLog[_0x2dcaec(0xaf6)]['displayCritical']=function(_0x2fab39){const _0x392c52=_0x2dcaec;if(!VisuMZ[_0x392c52(0xae3)][_0x392c52(0xbeb)][_0x392c52(0xa09)]['ShowCritical'])return;VisuMZ[_0x392c52(0xae3)]['Window_BattleLog_displayCritical'][_0x392c52(0x390)](this,_0x2fab39);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x198)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x54a)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x54a)]=function(_0x49f0bb){const _0x5e4194=_0x2dcaec;!VisuMZ[_0x5e4194(0xae3)]['Settings'][_0x5e4194(0xa09)][_0x5e4194(0xafe)]?this[_0x5e4194(0x190)]('performMiss',_0x49f0bb):VisuMZ[_0x5e4194(0xae3)][_0x5e4194(0x198)][_0x5e4194(0x390)](this,_0x49f0bb);},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc2a)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x345)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x345)]=function(_0x1a3322){const _0x2c52c8=_0x2dcaec;!VisuMZ[_0x2c52c8(0xae3)][_0x2c52c8(0xbeb)][_0x2c52c8(0xa09)]['ShowMissEvasion']?_0x1a3322[_0x2c52c8(0x1b5)]()[_0x2c52c8(0x54c)]?this[_0x2c52c8(0x190)](_0x2c52c8(0xa04),_0x1a3322):this[_0x2c52c8(0x190)](_0x2c52c8(0x697),_0x1a3322):VisuMZ[_0x2c52c8(0xae3)]['Window_BattleLog_displayEvasion'][_0x2c52c8(0x390)](this,_0x1a3322);},Window_BattleLog['prototype'][_0x2dcaec(0x437)]=function(_0x2df64f){const _0x4ca5d7=_0x2dcaec;_0x2df64f['result']()[_0x4ca5d7(0x6c7)]&&(_0x2df64f['_lastHpDamage']=0x0,_0x2df64f[_0x4ca5d7(0x1b5)]()[_0x4ca5d7(0x414)]>0x0&&!_0x2df64f['result']()['drain']&&(_0x2df64f['_lastHpDamage']=_0x2df64f[_0x4ca5d7(0x1b5)]()['hpDamage'],this['push'](_0x4ca5d7(0xb72),_0x2df64f)),_0x2df64f[_0x4ca5d7(0x1b5)]()['hpDamage']<0x0&&this[_0x4ca5d7(0x190)](_0x4ca5d7(0x2d3),_0x2df64f),VisuMZ[_0x4ca5d7(0xae3)][_0x4ca5d7(0xbeb)][_0x4ca5d7(0xa09)][_0x4ca5d7(0x392)]&&this['push']('addText',this[_0x4ca5d7(0x969)](_0x2df64f)));},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbbf)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x957)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x957)]=function(_0x644e95){const _0xb95e03=_0x2dcaec;if(!VisuMZ[_0xb95e03(0xae3)][_0xb95e03(0xbeb)][_0xb95e03(0xa09)]['ShowMpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayMpDamage'][_0xb95e03(0x390)](this,_0x644e95);},VisuMZ['BattleCore'][_0x2dcaec(0x5e1)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x4cf)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x4cf)]=function(_0x1bf5a3){const _0x2b32b6=_0x2dcaec;if(!VisuMZ['BattleCore'][_0x2b32b6(0xbeb)][_0x2b32b6(0xa09)]['ShowTpDmg'])return;VisuMZ['BattleCore']['Window_BattleLog_displayTpDamage'][_0x2b32b6(0x390)](this,_0x1bf5a3);},Window_BattleLog['prototype']['displayAffectedStatus']=function(_0x27b1a3){const _0x1b1d6f=_0x2dcaec;_0x27b1a3[_0x1b1d6f(0x1b5)]()['isStatusAffected']()&&(this[_0x1b1d6f(0x190)]('pushBaseLine'),this['displayChangedStates'](_0x27b1a3),this['displayChangedBuffs'](_0x27b1a3),this[_0x1b1d6f(0x190)](_0x1b1d6f(0xbbd)));},Window_BattleLog['prototype'][_0x2dcaec(0x311)]=function(_0x40b90c){const _0x2ee520=_0x2dcaec,_0x5710d1=_0x40b90c[_0x2ee520(0x1b5)](),_0x1bdecf=_0x5710d1['addedStateObjects']();for(const _0x20cec1 of _0x1bdecf){const _0x122337=_0x40b90c['isActor']()?_0x20cec1['message1']:_0x20cec1[_0x2ee520(0x727)];_0x122337&&VisuMZ[_0x2ee520(0xae3)]['Settings'][_0x2ee520(0xa09)][_0x2ee520(0xb40)]&&(this[_0x2ee520(0x190)]('popBaseLine'),this[_0x2ee520(0x190)](_0x2ee520(0x328)),this[_0x2ee520(0x190)](_0x2ee520(0x59f),_0x122337[_0x2ee520(0xb60)](_0x40b90c['name']())),this['push'](_0x2ee520(0x275))),_0x20cec1['id']===_0x40b90c[_0x2ee520(0x636)]()&&this[_0x2ee520(0x190)](_0x2ee520(0x8b7),_0x40b90c);}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x299)]=function(_0x48366a){const _0x911443=_0x2dcaec;if(!VisuMZ[_0x911443(0xae3)][_0x911443(0xbeb)][_0x911443(0xa09)]['ShowRemovedState'])return;const _0x16f06=_0x48366a[_0x911443(0x1b5)](),_0x57dade=_0x16f06['removedStateObjects']();for(const _0x5e37cb of _0x57dade){_0x5e37cb[_0x911443(0x94f)]&&(this['push'](_0x911443(0x3ee)),this[_0x911443(0x190)]('pushBaseLine'),this[_0x911443(0x190)](_0x911443(0x59f),_0x5e37cb['message4'][_0x911443(0xb60)](_0x48366a[_0x911443(0x321)]())),this[_0x911443(0x190)](_0x911443(0x275)));}},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x3f3)]=function(_0x43f17a){const _0x364e1b=_0x2dcaec,_0x38e494=VisuMZ[_0x364e1b(0xae3)][_0x364e1b(0xbeb)][_0x364e1b(0xa09)],_0x1d1530=_0x43f17a[_0x364e1b(0x1b5)]();if(_0x38e494[_0x364e1b(0x3f1)])this[_0x364e1b(0x44b)](_0x43f17a,_0x1d1530[_0x364e1b(0x513)],TextManager[_0x364e1b(0x958)]);if(_0x38e494['ShowAddedDebuff'])this[_0x364e1b(0x44b)](_0x43f17a,_0x1d1530[_0x364e1b(0xacd)],TextManager['debuffAdd']);if(_0x38e494[_0x364e1b(0x41a)])this[_0x364e1b(0x44b)](_0x43f17a,_0x1d1530[_0x364e1b(0x379)],TextManager[_0x364e1b(0x7d1)]);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x44b)]=function(_0x31fb63,_0x11101b,_0x228aae){const _0x183a08=_0x2dcaec;for(const _0x1c1059 of _0x11101b){const _0x474d6c=_0x228aae[_0x183a08(0xb60)](_0x31fb63[_0x183a08(0x321)](),TextManager[_0x183a08(0x8e0)](_0x1c1059));this[_0x183a08(0x190)](_0x183a08(0x3ee)),this[_0x183a08(0x190)](_0x183a08(0x328)),this['push']('addText',_0x474d6c),this[_0x183a08(0x190)](_0x183a08(0x275));}},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xb5a)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xb7e)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xb7e)]=function(){const _0x3a7e31=_0x2dcaec;VisuMZ[_0x3a7e31(0xae3)][_0x3a7e31(0xb5a)][_0x3a7e31(0x390)](this),this[_0x3a7e31(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xc3f)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x328)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x328)]=function(){const _0x2b4369=_0x2dcaec;VisuMZ[_0x2b4369(0xae3)][_0x2b4369(0xc3f)][_0x2b4369(0x390)](this),this[_0x2b4369(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x158)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x3ee)],Window_BattleLog['prototype'][_0x2dcaec(0x3ee)]=function(){const _0x4484c4=_0x2dcaec;VisuMZ['BattleCore'][_0x4484c4(0x158)][_0x4484c4(0x390)](this),this[_0x4484c4(0x324)](),this[_0x4484c4(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x271)]=Window_BattleLog['prototype']['popupDamage'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xbd2)]=function(_0x52a306){const _0x78b752=_0x2dcaec;VisuMZ[_0x78b752(0xae3)][_0x78b752(0x271)][_0x78b752(0x390)](this,_0x52a306),this[_0x78b752(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)]['waitForNewLine']=function(){const _0x273fb7=_0x2dcaec;let _0x333289=0x0;this[_0x273fb7(0x8d9)][_0x273fb7(0x7ce)]>0x0&&(_0x333289=this['_baseLineStack'][this['_baseLineStack'][_0x273fb7(0x7ce)]-0x1]),this[_0x273fb7(0x416)]['length']>_0x333289?this[_0x273fb7(0x275)]():this['callNextMethod']();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xb25)]=Window_BattleLog['prototype']['performActionStart'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x9fe)]=function(_0x5a6021,_0x55e000){const _0x53e67c=_0x2dcaec;VisuMZ[_0x53e67c(0xae3)][_0x53e67c(0xb25)][_0x53e67c(0x390)](this,_0x5a6021,_0x55e000),this[_0x53e67c(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x3be)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x79c)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x79c)]=function(_0x4beeb6,_0x40ce36){const _0x2ca580=_0x2dcaec;VisuMZ['BattleCore'][_0x2ca580(0x3be)][_0x2ca580(0x390)](this,_0x4beeb6,_0x40ce36),this[_0x2ca580(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7de)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa57)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa57)]=function(_0x2a081d){const _0x5a950f=_0x2dcaec;VisuMZ[_0x5a950f(0xae3)][_0x5a950f(0x7de)][_0x5a950f(0x390)](this,_0x2a081d);for(const _0x203453 of BattleManager[_0x5a950f(0xb96)]()){if(!_0x203453)continue;if(_0x203453['isDead']())continue;_0x203453[_0x5a950f(0x18f)]();}this['callNextMethod']();},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleLog_performDamage']=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xb72)],Window_BattleLog[_0x2dcaec(0xaf6)]['performDamage']=function(_0xd708d7){const _0x15e92d=_0x2dcaec;VisuMZ[_0x15e92d(0xae3)][_0x15e92d(0x703)][_0x15e92d(0x390)](this,_0xd708d7),this[_0x15e92d(0x925)]();},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleLog_performMiss']=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x3bf)],Window_BattleLog['prototype'][_0x2dcaec(0x3bf)]=function(_0x16425c){const _0x3f5a6c=_0x2dcaec;VisuMZ['BattleCore'][_0x3f5a6c(0x9d7)][_0x3f5a6c(0x390)](this,_0x16425c),this[_0x3f5a6c(0x925)]();},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleLog_performRecovery']=Window_BattleLog[_0x2dcaec(0xaf6)]['performRecovery'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x2d3)]=function(_0x4c93f5){const _0x567555=_0x2dcaec;VisuMZ[_0x567555(0xae3)][_0x567555(0xa91)][_0x567555(0x390)](this,_0x4c93f5),this['callNextMethod']();},VisuMZ['BattleCore'][_0x2dcaec(0x565)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa04)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xa04)]=function(_0x342949){const _0x13d947=_0x2dcaec;VisuMZ[_0x13d947(0xae3)][_0x13d947(0x565)][_0x13d947(0x390)](this,_0x342949),this[_0x13d947(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x46f)]=Window_BattleLog[_0x2dcaec(0xaf6)]['performMagicEvasion'],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x697)]=function(_0x39eea4){const _0x2590b7=_0x2dcaec;VisuMZ[_0x2590b7(0xae3)][_0x2590b7(0x46f)]['call'](this,_0x39eea4),this[_0x2590b7(0x925)]();},VisuMZ[_0x2dcaec(0xae3)]['Window_BattleLog_performCounter']=Window_BattleLog[_0x2dcaec(0xaf6)]['performCounter'],Window_BattleLog[_0x2dcaec(0xaf6)]['performCounter']=function(_0x3ef005){const _0x21eda4=_0x2dcaec;VisuMZ[_0x21eda4(0xae3)][_0x21eda4(0x974)][_0x21eda4(0x390)](this,_0x3ef005),this[_0x21eda4(0x925)]();},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x766)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x240)],Window_BattleLog[_0x2dcaec(0xaf6)]['performReflection']=function(_0x4e245d){const _0x53506f=_0x2dcaec;VisuMZ[_0x53506f(0xae3)][_0x53506f(0x766)][_0x53506f(0x390)](this,_0x4e245d),this[_0x53506f(0x925)]();},VisuMZ['BattleCore']['Window_BattleLog_performSubstitute']=Window_BattleLog['prototype'][_0x2dcaec(0xc08)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0xc08)]=function(_0xb6c89b,_0x279202){const _0x4bc910=_0x2dcaec;VisuMZ[_0x4bc910(0xae3)][_0x4bc910(0x3dc)]['call'](this,_0xb6c89b,_0x279202),this['callNextMethod']();},VisuMZ['BattleCore'][_0x2dcaec(0x9c2)]=Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x8b7)],Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x8b7)]=function(_0xd11736){const _0x201dea=_0x2dcaec;VisuMZ[_0x201dea(0xae3)][_0x201dea(0x9c2)][_0x201dea(0x390)](this,_0xd11736),this[_0x201dea(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x65e)]=function(_0x49085e,_0x3ef51f){const _0x1853eb=_0x2dcaec;_0x49085e[_0x1853eb(0x65e)](_0x3ef51f),this[_0x1853eb(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x2e9)]=function(_0x36b789,_0x2f6e94){const _0x57cb57=_0x2dcaec,_0x31f5be=_0x36b789[_0x57cb57(0xb66)]();_0x31f5be<=0x0?SoundManager[_0x57cb57(0x45b)]():this[_0x57cb57(0x93b)](_0x2f6e94,_0x31f5be);},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x822)]=function(_0x249c32,_0xe7005b,_0x1ef51b){const _0x5a1637=_0x2dcaec,_0x247f30=[_0x249c32]['concat'](_0xe7005b);for(const _0x5de0ef of _0x247f30){if(!_0x5de0ef)continue;_0x5de0ef[_0x5a1637(0x44c)](_0x1ef51b);}this['callNextMethod']();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x4f3)]=function(_0x22fec1){const _0x197b62=_0x2dcaec;this[_0x197b62(0x680)]=_0x22fec1;},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x4a5)]=function(_0xf61f44,_0x21feda){const _0x58fee9=_0x2dcaec;for(const _0x552fc3 of _0xf61f44){if(!_0x552fc3)continue;_0x552fc3[_0x58fee9(0x4a5)](_0x21feda);}this['callNextMethod']();},Window_BattleLog[_0x2dcaec(0xaf6)]['performMoveToPoint']=function(_0x34be0d,_0x2ada66,_0x4b1e07,_0x4f0902,_0x58d8d0,_0x3ef5d6){const _0x34450d=_0x2dcaec;_0x34be0d[_0x34450d(0x241)](_0x2ada66,_0x4b1e07,_0x4f0902,_0x58d8d0,_0x3ef5d6,-0x1),this[_0x34450d(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)]['performMoveToTargets']=function(_0x4c7172,_0x218bcb,_0x35c522,_0xc509db,_0x2eb507,_0x3bc138,_0x293533){const _0x270e9b=_0x2dcaec,_0x5945a6=Math[_0x270e9b(0xaf1)](..._0x218bcb[_0x270e9b(0xc20)](_0x47683a=>_0x47683a[_0x270e9b(0xbc2)]()[_0x270e9b(0xae9)]-_0x47683a[_0x270e9b(0xbc2)]()['mainSpriteWidth']()/0x2)),_0x499e89=Math[_0x270e9b(0x959)](..._0x218bcb[_0x270e9b(0xc20)](_0x1ddf8c=>_0x1ddf8c[_0x270e9b(0xbc2)]()[_0x270e9b(0xae9)]+_0x1ddf8c['battler']()[_0x270e9b(0x74d)]()/0x2)),_0x2bd1d9=Math[_0x270e9b(0xaf1)](..._0x218bcb[_0x270e9b(0xc20)](_0x531586=>_0x531586[_0x270e9b(0xbc2)]()['_baseY']-_0x531586['battler']()['mainSpriteHeight']())),_0x2adb79=Math[_0x270e9b(0x959)](..._0x218bcb[_0x270e9b(0xc20)](_0x179cce=>_0x179cce[_0x270e9b(0xbc2)]()[_0x270e9b(0xa19)])),_0x1a2bd7=_0x218bcb['filter'](_0x4a5296=>_0x4a5296[_0x270e9b(0x8d6)]())['length'],_0x4dd37c=_0x218bcb[_0x270e9b(0x5ed)](_0x2bcffa=>_0x2bcffa[_0x270e9b(0x5d1)]())[_0x270e9b(0x7ce)];let _0x7f3cf5=0x0,_0xa44603=0x0;if(_0x35c522[_0x270e9b(0xb9e)](/front/i))_0x7f3cf5=_0x1a2bd7>=_0x4dd37c?_0x5945a6:_0x499e89;else{if(_0x35c522['match'](/middle/i))_0x7f3cf5=(_0x5945a6+_0x499e89)/0x2,_0x293533=-0x1;else _0x35c522[_0x270e9b(0xb9e)](/back/i)&&(_0x7f3cf5=_0x1a2bd7>=_0x4dd37c?_0x499e89:_0x5945a6);}if(_0x35c522['match'](/head/i))_0xa44603=_0x2bd1d9;else{if(_0x35c522['match'](/center/i)){_0xa44603=(_0x2bd1d9+_0x2adb79)/0x2;if(_0x4c7172[_0x270e9b(0xbc2)]())_0xa44603+=_0x4c7172[_0x270e9b(0xbc2)]()['height']/0x2;}else _0x35c522[_0x270e9b(0xb9e)](/base/i)&&(_0xa44603=_0x2adb79);}_0x4c7172[_0x270e9b(0x241)](_0x7f3cf5,_0xa44603,_0xc509db,_0x2eb507,_0x3bc138,_0x293533),this[_0x270e9b(0x925)]();},Window_BattleLog[_0x2dcaec(0xaf6)][_0x2dcaec(0x61f)]=function(_0x112817,_0x2d188a,_0x2dfe76){const _0x1a0d34=_0x2dcaec;for(const _0x2f5b79 of _0x112817){if(!_0x2f5b79)continue;_0x2f5b79[_0x1a0d34(0x138)](_0x2d188a,_0x2dfe76);}this['callNextMethod']();};function Window_BattleMultiTarget(){const _0x246dee=_0x2dcaec;this[_0x246dee(0x970)](...arguments);}Window_BattleMultiTarget[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Window_Command[_0x2dcaec(0xaf6)]),Window_BattleMultiTarget['prototype'][_0x2dcaec(0x61d)]=Window_BattleMultiTarget,VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)]||{},Window_BattleMultiTarget[_0x2dcaec(0xbb9)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)][_0x2dcaec(0x292)]??0x118,Window_BattleMultiTarget[_0x2dcaec(0xb04)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['MultiTarget']['BgType']??0x2,Window_BattleMultiTarget[_0x2dcaec(0x256)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)]['ShowButton']??!![],Window_BattleMultiTarget['ALL_ACTORS']=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['MultiTarget'][_0x2dcaec(0xb3a)]??'All\x20Allies',Window_BattleMultiTarget[_0x2dcaec(0x184)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['MultiTarget'][_0x2dcaec(0x715)]??_0x2dcaec(0x7ad),Window_BattleMultiTarget[_0x2dcaec(0x6c8)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['MultiTarget'][_0x2dcaec(0x1d9)]??0x0,Window_BattleMultiTarget['ACTOR_OFFSET_Y']=VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)][_0x2dcaec(0x49c)]??0x0,Window_BattleMultiTarget[_0x2dcaec(0xb4f)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['MultiTarget'][_0x2dcaec(0xc15)]??0x0,Window_BattleMultiTarget[_0x2dcaec(0x8ac)]=VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x295)][_0x2dcaec(0xa20)]??0x0,Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x39b908,_0x1d72ed){const _0x48d8bd=_0x2dcaec;this[_0x48d8bd(0x698)]=_0x1d72ed,Window_Command['prototype']['initialize'][_0x48d8bd(0x390)](this,_0x39b908),this[_0x48d8bd(0x178)](Window_BattleMultiTarget[_0x48d8bd(0xb04)]),this[_0x48d8bd(0x65a)](),this[_0x48d8bd(0x4df)](),this[_0x48d8bd(0xabf)]();},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x8f7)]=function(){return this['_forActor'];},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x4f1)]=function(){const _0x387ef9=_0x2dcaec;let _0x38a63f=this['forActor']()?Window_BattleMultiTarget[_0x387ef9(0x86a)]:Window_BattleMultiTarget[_0x387ef9(0x184)];if(Imported[_0x387ef9(0x6d3)]&&Window_BattleMultiTarget['SHOW_BUTTON']){this[_0x387ef9(0x3d1)]=this[_0x387ef9(0x8f7)]()?_0x387ef9(0xa9e):_0x387ef9(0x3fe),this[_0x387ef9(0xbb7)]=TextManager[_0x387ef9(0x768)](this[_0x387ef9(0x3d1)]);const _0x213b79=VisuMZ[_0x387ef9(0x785)]['Settings']['ButtonAssist'][_0x387ef9(0xbf8)];_0x38a63f=_0x213b79[_0x387ef9(0xb60)](this[_0x387ef9(0xbb7)],_0x38a63f);}this['addCommand'](_0x38a63f,_0x387ef9(0x5e8));},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x6e0)]=function(_0x4ec8bf){const _0x5f4710=_0x2dcaec,_0x25be91=this[_0x5f4710(0xb4c)](_0x4ec8bf);this[_0x5f4710(0x38c)](),this['changePaintOpacity'](this[_0x5f4710(0x487)](_0x4ec8bf));const _0x8c706=this[_0x5f4710(0x246)](_0x4ec8bf),_0x491ec4=this[_0x5f4710(0x8da)](_0x8c706)[_0x5f4710(0x64b)],_0x4716a2=_0x25be91['x']+Math['floor']((_0x25be91[_0x5f4710(0x64b)]-_0x491ec4)/0x2);this[_0x5f4710(0xa18)](_0x8c706,_0x4716a2,_0x25be91['y'],_0x25be91[_0x5f4710(0x64b)]);},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x23a)]=function(){const _0x74a51b=_0x2dcaec;Window_Command['prototype'][_0x74a51b(0x23a)][_0x74a51b(0x390)](this),this[_0x74a51b(0xb2d)](),this['updateKeyboardKeys']();},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0xb2d)]=function(){const _0xc13c5=_0x2dcaec;this[_0xc13c5(0xaba)]=this['visibilityState']();},Window_BattleMultiTarget[_0x2dcaec(0xaf6)][_0x2dcaec(0x3a3)]=function(){const _0x16807d=_0x2dcaec,_0xa3bab2=BattleManager[_0x16807d(0x524)](),_0x4e4ad9=_0xa3bab2&&_0xa3bab2[_0x16807d(0x8fc)]();if(!_0x4e4ad9)return![];const _0x508e49=SceneManager[_0x16807d(0x496)];if(this[_0x16807d(0x8f7)]()){if(_0x508e49['_actorWindow']['active']&&_0x508e49[_0x16807d(0x14a)]['_handlers'][_0x16807d(0xa9e)])return!![];if(_0x508e49[_0x16807d(0x6a2)][_0x16807d(0x1d7)]&&_0x508e49[_0x16807d(0x6a2)][_0x16807d(0x912)]['pagedown'])return!![];}else{if(_0x508e49[_0x16807d(0x6a2)][_0x16807d(0x1d7)]&&_0x508e49[_0x16807d(0x6a2)][_0x16807d(0x912)][_0x16807d(0x3fe)])return!![];}return![];},Window_BattleMultiTarget[_0x2dcaec(0xaf6)]['updateKeyboardKeys']=function(){const _0x15b40f=_0x2dcaec;if(!Imported['VisuMZ_0_CoreEngine'])return;this['_buttonText']!==TextManager[_0x15b40f(0x768)](this[_0x15b40f(0x3d1)])&&this[_0x15b40f(0xbc9)]();},Window_BattleMultiTarget[_0x2dcaec(0xaf6)]['processTouch']=function(){const _0x531a6d=_0x2dcaec;if(this[_0x531a6d(0xaba)]&&TouchInput['isClicked']()){const _0x1c79e6=this['hitIndex']();if(_0x1c79e6>=0x0){const _0xdf9cbe=this[_0x531a6d(0x8f7)]()?'pagedown':_0x531a6d(0x3fe);Input['virtualClick'](_0xdf9cbe);}}};function Window_DamageCounter(){const _0x97b0eb=_0x2dcaec;this[_0x97b0eb(0x970)](...arguments);}Window_DamageCounter[_0x2dcaec(0xaf6)]=Object['create'](Window_Base[_0x2dcaec(0xaf6)]),Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Window_DamageCounter,Window_DamageCounter[_0x2dcaec(0x7e9)]={'enabled':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)]['Enable']??!![],'customFontFace':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x5e6)]??'','textAlign':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['ComboWindow'][_0x2dcaec(0x6ac)]??_0x2dcaec(0x99d),'hitsDmgFmt':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x714)]??_0x2dcaec(0xc35),'hitsHealFmt':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x63f)]??'\x5cC[6]%1\x5c}\x20\x5cC[4]Heal\x20Combo\x5c{','totalDmgFmt':VisuMZ[_0x2dcaec(0xae3)]['Settings']['ComboWindow'][_0x2dcaec(0x154)]??_0x2dcaec(0x302),'totalHealFmt':VisuMZ[_0x2dcaec(0xae3)]['Settings']['ComboWindow'][_0x2dcaec(0x47c)]??'\x5c}\x5cC[21]Total\x20Healing:\x20\x5c{\x5cC[24]+%1','fadeShiftX':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x3ad)]??-0x2,'fadeShiftY':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)]['fadeShiftY']??0x0,'positionOffsetX':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)]['ComboWindow'][_0x2dcaec(0xb6b)]??0x0,'positionOffsetY':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x468)]['PosOffsetY']??0x0,'updateDuration':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x6d2)]??0x14,'minimumStayDuration':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x893)]??0x28,'minimumHits':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)]['ComboWindow'][_0x2dcaec(0x293)]??0x1,'opacitySpeed':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x468)][_0x2dcaec(0x758)]??0x10},Window_DamageCounter['prototype'][_0x2dcaec(0x970)]=function(_0x4aab9f){const _0x4c66db=_0x2dcaec;this[_0x4c66db(0xc42)]=0x0,Window_Base[_0x4c66db(0xaf6)][_0x4c66db(0x970)][_0x4c66db(0x390)](this,_0x4aab9f),this[_0x4c66db(0xbfd)]=_0x4aab9f['x'],this[_0x4c66db(0x360)]=_0x4aab9f['y'],this[_0x4c66db(0x904)](),this['setBackgroundType'](0x2);},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x904)]=function(){const _0x46d237=_0x2dcaec;this[_0x46d237(0x4ec)]=0x0,this[_0x46d237(0x3b2)]=0x0,this[_0x46d237(0x7f1)]=0x0,this[_0x46d237(0x8cb)]=0x0,this[_0x46d237(0x5ae)]=0x0;},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x2be)]=function(){const _0x395101=_0x2dcaec;Window_Base[_0x395101(0xaf6)]['resetFontSettings'][_0x395101(0x390)](this);const _0x5b2d12=Window_DamageCounter[_0x395101(0x7e9)];_0x5b2d12[_0x395101(0x8a7)]?this[_0x395101(0x2e1)][_0x395101(0x75b)]=_0x5b2d12[_0x395101(0x8a7)]:this[_0x395101(0x2e1)][_0x395101(0x75b)]=$gameSystem[_0x395101(0x1a9)]();};var $comboWindowReset=function(){const _0x277640=_0x2dcaec;if(!SceneManager[_0x277640(0xa2b)]())return;const _0x5ea831=SceneManager[_0x277640(0x496)]['_damageCounterWindow'];if(_0x5ea831)_0x5ea831[_0x277640(0x904)]();};Window_DamageCounter[_0x2dcaec(0xaf6)]['increaseHits']=function(_0x18297e){const _0x591eea=_0x2dcaec;this['_targetHits']+=Math['round'](_0x18297e);const _0x155870=Window_DamageCounter['SETTINGS'];this[_0x591eea(0x4ec)]=_0x155870[_0x591eea(0x6d2)],this[_0x591eea(0x8cb)]>=_0x155870[_0x591eea(0x293)]&&(this[_0x591eea(0xc42)]=_0x155870[_0x591eea(0x893)]);};var $comboWindowIncreaseHits=function(_0x51b1a0){const _0x329f6c=_0x2dcaec;if(!SceneManager[_0x329f6c(0xa2b)]())return;const _0x2fe07d=SceneManager[_0x329f6c(0x496)][_0x329f6c(0x2dd)];if(_0x2fe07d)_0x2fe07d[_0x329f6c(0x177)](_0x51b1a0);};Window_DamageCounter[_0x2dcaec(0xaf6)]['increaseTotal']=function(_0x116937){const _0x4455be=_0x2dcaec;this[_0x4455be(0x5ae)]+=Math[_0x4455be(0x976)](_0x116937);const _0x4bcebd=Window_DamageCounter['SETTINGS'];this['_updateDuration']=_0x4bcebd[_0x4455be(0x6d2)],this['_targetHits']>=_0x4bcebd['minimumHits']&&(this['_visibleDuration']=_0x4bcebd[_0x4455be(0x893)]);};function _0x4e7d(_0x443879,_0x5bde85){const _0x2f13d0=_0x2f13();return _0x4e7d=function(_0x4e7d29,_0x2fcf5d){_0x4e7d29=_0x4e7d29-0x134;let _0x518ec9=_0x2f13d0[_0x4e7d29];return _0x518ec9;},_0x4e7d(_0x443879,_0x5bde85);}var $comboWindowIncreaseDamage=function(_0x18ab51){const _0x3c4ff0=_0x2dcaec;if(!SceneManager[_0x3c4ff0(0xa2b)]())return;const _0x474abc=SceneManager[_0x3c4ff0(0x496)][_0x3c4ff0(0x2dd)];if(_0x474abc)_0x474abc['increaseTotal'](_0x18ab51);},$comboWindowIncreaseHealing=function(_0x493fe7){const _0x268483=_0x2dcaec;if(!SceneManager[_0x268483(0xa2b)]())return;const _0x1349d3=SceneManager[_0x268483(0x496)][_0x268483(0x2dd)];if(_0x1349d3)_0x1349d3[_0x268483(0x8b6)](-_0x493fe7);};VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x7a4)]=Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0xb90)],Scene_Battle[_0x2dcaec(0xaf6)]['createAllWindows']=function(){const _0xb6ff33=_0x2dcaec;this[_0xb6ff33(0x595)](),VisuMZ[_0xb6ff33(0xae3)]['Scene_Battle_createAllWindows_ComboWindow']['call'](this);},Scene_Battle['prototype'][_0x2dcaec(0x595)]=function(){const _0x188297=_0x2dcaec;if(!Window_DamageCounter[_0x188297(0x7e9)]['enabled'])return;const _0x27f51b=this[_0x188297(0x977)](),_0x9095e4=new Window_DamageCounter(_0x27f51b);this['addWindow'](_0x9095e4),this['_damageCounterWindow']=_0x9095e4;},Scene_Battle['prototype'][_0x2dcaec(0x977)]=function(){const _0x298221=_0x2dcaec;if(VisuMZ[_0x298221(0xae3)][_0x298221(0xbeb)]['ComboWindow'][_0x298221(0x779)])return VisuMZ['BattleCore'][_0x298221(0xbeb)]['ComboWindow'][_0x298221(0x779)]['call'](this);const _0x58a0bd=Math['ceil'](Graphics['width']/0x4),_0x2335f0=this[_0x298221(0x14b)](0x2,!![]),_0x1203f0=0x0+this[_0x298221(0x84d)](),_0x2f5da9=Math['round'](Graphics[_0x298221(0xab4)]*0x1/0x3)+this[_0x298221(0xa3a)]();return new Rectangle(_0x1203f0,_0x2f5da9,_0x58a0bd,_0x2335f0);},Scene_Battle[_0x2dcaec(0xaf6)][_0x2dcaec(0x84d)]=function(){const _0x1301ab=_0x2dcaec;return Window_DamageCounter[_0x1301ab(0x7e9)][_0x1301ab(0xa3e)];},Scene_Battle['prototype'][_0x2dcaec(0xa3a)]=function(){return Window_DamageCounter['SETTINGS']['positionOffsetY'];},Window_DamageCounter['prototype'][_0x2dcaec(0x23a)]=function(){const _0x2eb2db=_0x2dcaec;Window_Base[_0x2eb2db(0xaf6)][_0x2eb2db(0x23a)][_0x2eb2db(0x390)](this),this[_0x2eb2db(0x3b4)](),this['updateOpacity']();},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x3b4)]=function(){const _0x34cc50=_0x2dcaec;if(this['_updateDuration']<=0x0)return;const _0x5b3fc6=this[_0x34cc50(0x4ec)];this['_totalHits']=this['_targetHits'],this[_0x34cc50(0x7f1)]=(this['_totalDamage']*(_0x5b3fc6-0x1)+this[_0x34cc50(0x5ae)])/_0x5b3fc6,this[_0x34cc50(0x4ec)]--,this['_updateDuration']<=0x0&&(this[_0x34cc50(0x3b2)]=this[_0x34cc50(0x8cb)],this['_totalDamage']=this[_0x34cc50(0x5ae)]),this['refresh']();},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x5af)]=function(){const _0x2e1846=_0x2dcaec,_0x3b2ee4=Window_DamageCounter[_0x2e1846(0x7e9)],_0x2cd8d1=this['visibilityState'](),_0x11ad93=_0x3b2ee4[_0x2e1846(0x758)]||0x1;if(_0x2cd8d1&&this['contentsOpacity']<0xff)this['contentsOpacity']+=_0x11ad93;else!_0x2cd8d1&&this[_0x2e1846(0x3b6)]>0x0&&(this['contentsOpacity']-=_0x11ad93,this['x']+=_0x3b2ee4['fadeShiftX']||0x0,this['y']+=_0x3b2ee4[_0x2e1846(0xb8c)]||0x0);},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x3a3)]=function(){const _0x512adc=_0x2dcaec,_0x499d60=Window_DamageCounter[_0x512adc(0x7e9)];if(this[_0x512adc(0x8cb)]>=_0x499d60[_0x512adc(0x293)])return!![];if(this['_visibleDuration']-->0x0)return!![];return![];},VisuMZ['BattleCore'][_0x2dcaec(0xaf2)]=Game_Action[_0x2dcaec(0xaf6)][_0x2dcaec(0x847)],Game_Action['prototype']['executeHpDamage']=function(_0x236c72,_0x3ddc33){const _0x4bbe03=_0x2dcaec;$comboWindowIncreaseHits(0x1),$comboWindowIncreaseDamage(_0x3ddc33),VisuMZ['BattleCore'][_0x4bbe03(0xaf2)][_0x4bbe03(0x390)](this,_0x236c72,_0x3ddc33);},VisuMZ['BattleCore'][_0x2dcaec(0x1f6)]=BattleManager[_0x2dcaec(0x773)],BattleManager[_0x2dcaec(0x773)]=function(){const _0x5e7344=_0x2dcaec;$comboWindowReset(),VisuMZ[_0x5e7344(0xae3)][_0x5e7344(0x1f6)]['call'](this);},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0xbc9)]=function(){const _0x145c47=_0x2dcaec;this['contents'][_0x145c47(0xb7e)](),this[_0x145c47(0x22d)](),this['x']=this[_0x145c47(0xbfd)],this['y']=this[_0x145c47(0x360)];},Window_DamageCounter['prototype'][_0x2dcaec(0x2de)]=function(){const _0xb0501c=_0x2dcaec,_0xc340b0=Window_DamageCounter[_0xb0501c(0x7e9)];return _0xc340b0[_0xb0501c(0xc4d)]||_0xb0501c(0x99d);},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0xab6)]=function(){const _0x3a01b0=_0x2dcaec,_0x2ec33c=Window_DamageCounter[_0x3a01b0(0x7e9)];let _0x3c50de=this[_0x3a01b0(0x7f1)]>=0x0?_0x2ec33c[_0x3a01b0(0x714)]:_0x2ec33c[_0x3a01b0(0x63f)];return _0x3c50de[_0x3a01b0(0xb60)](Math['abs'](Math[_0x3a01b0(0xbd6)](this[_0x3a01b0(0x3b2)])));},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x791)]=function(){const _0x2e795e=_0x2dcaec,_0x2f3b7b=Window_DamageCounter[_0x2e795e(0x7e9)];let _0x37430c=this[_0x2e795e(0x7f1)]>=0x0?_0x2f3b7b[_0x2e795e(0x154)]:_0x2f3b7b[_0x2e795e(0x47c)];return _0x37430c[_0x2e795e(0xb60)](Math['abs'](Math[_0x2e795e(0x976)](this[_0x2e795e(0x7f1)])));},Window_DamageCounter[_0x2dcaec(0xaf6)][_0x2dcaec(0x22d)]=function(){const _0x302dd3=_0x2dcaec;if(VisuMZ[_0x302dd3(0xae3)]['Settings'][_0x302dd3(0x468)]['ComboWindow_DrawJS'])return VisuMZ[_0x302dd3(0xae3)][_0x302dd3(0xbeb)][_0x302dd3(0x468)][_0x302dd3(0x197)][_0x302dd3(0x390)](this);let _0x102712=0x0,_0x49edb3=0x0;const _0x1798c2=this[_0x302dd3(0xab6)](),_0x272d38=this[_0x302dd3(0x8da)](_0x1798c2);if(this['textAlignment']()===_0x302dd3(0x185))_0x102712=this['innerWidth']-this[_0x302dd3(0x407)]()-_0x272d38[_0x302dd3(0x64b)];else this['textAlignment']()===_0x302dd3(0xc43)?_0x102712=Math['floor']((this['innerWidth']-_0x272d38[_0x302dd3(0x64b)])/0x2):_0x102712=this['itemPadding']();this[_0x302dd3(0xa18)](_0x1798c2,_0x102712,_0x49edb3),_0x49edb3+=Math[_0x302dd3(0xbd6)](this[_0x302dd3(0x90d)]()*0x2/0x3);const _0x31f649=this[_0x302dd3(0x791)](),_0x5d2e0f=this[_0x302dd3(0x8da)](_0x31f649);if(this[_0x302dd3(0x2de)]()===_0x302dd3(0x185))_0x102712=this[_0x302dd3(0x86d)]-this[_0x302dd3(0x407)]()-_0x5d2e0f[_0x302dd3(0x64b)];else this[_0x302dd3(0x2de)]()===_0x302dd3(0xc43)?_0x102712=Math[_0x302dd3(0x6eb)]((this['innerWidth']-_0x5d2e0f[_0x302dd3(0x64b)])/0x2):_0x102712=this[_0x302dd3(0x407)]();this[_0x302dd3(0xa18)](_0x31f649,_0x102712,_0x49edb3);};function Window_InBattleStatus(){const _0x3c6634=_0x2dcaec;this[_0x3c6634(0x970)](...arguments);}Window_InBattleStatus[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Window_StatusBase['prototype']),Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Window_InBattleStatus,Window_InBattleStatus[_0x2dcaec(0x7e9)]={'bgType':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x48b)][_0x2dcaec(0xb80)]??0x0,'statusGraphic':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x4f2)]??'face','statusHelpDesc':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0xb97)]??_0x2dcaec(0x854),'pageButtons':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x48b)][_0x2dcaec(0x775)]??!![],'pageButtonPosition':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x2dcaec(0x26e)]??_0x2dcaec(0x99d),'pageOffsetX':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x172)]??0x0,'pageOffsetY':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x48b)]['pageOffsetY']??0x0,'buffValueFmt':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x47b)]??_0x2dcaec(0x204),'debuffValueFmt':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x2dcaec(0x741)]??_0x2dcaec(0xc0e),'enemyStatus':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0xa68)]??!![],'enemyShowLevel':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)]['InBattleStatus'][_0x2dcaec(0x1fa)]??!![],'enemyHpGaugeRate':!![],'enemyMpGaugeRate':!![],'enemyTpGaugeRate':!![],'enemyHiddenParameter':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['enemyHiddenParameter']??_0x2dcaec(0x8e3),'enemyShowParametersAlways':VisuMZ['BattleCore']['Settings']['InBattleStatus'][_0x2dcaec(0xc53)]??![],'enemyShowParametersIfBattleTest':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x306)]??!![],'enemyShowParametersIfDefeated':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x954)]??!![]},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x4d3252){const _0x4d44c4=_0x2dcaec;Window_StatusBase[_0x4d44c4(0xaf6)]['initialize'][_0x4d44c4(0x390)](this,_0x4d3252),this[_0x4d44c4(0x178)](Window_InBattleStatus['SETTINGS'][_0x4d44c4(0x729)]),this[_0x4d44c4(0xb0f)](),this[_0x4d44c4(0x3db)](),this[_0x4d44c4(0x62e)]();},Window_InBattleStatus['prototype']['setBattler']=function(_0x507d37){const _0x119cdc=_0x2dcaec;this[_0x119cdc(0x386)]=_0x507d37,this[_0x119cdc(0xbc9)](),this[_0x119cdc(0x238)]&&this[_0x119cdc(0x238)]['setBattler'](_0x507d37);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x8d4)]=function(){const _0x2dd2f0=_0x2dcaec;Window_StatusBase[_0x2dd2f0(0xaf6)][_0x2dd2f0(0x8d4)][_0x2dd2f0(0x390)](this);if(this[_0x2dd2f0(0x238)])this[_0x2dd2f0(0x238)][_0x2dd2f0(0x8d4)]();this['updatePageButtonVisibility'](),Imported[_0x2dd2f0(0x832)]&&SceneManager[_0x2dd2f0(0xa36)](null);},Window_InBattleStatus[_0x2dcaec(0xaf6)]['close']=function(){const _0x4f2d90=_0x2dcaec;Window_StatusBase[_0x4f2d90(0xaf6)][_0x4f2d90(0x4d1)][_0x4f2d90(0x390)](this);if(this[_0x4f2d90(0x238)])this['_statesWindow'][_0x4f2d90(0x4d1)]();},Window_InBattleStatus[_0x2dcaec(0xaf6)]['setReturnWindow']=function(_0x40f44f){const _0x167566=_0x2dcaec;this[_0x167566(0x88f)]=_0x40f44f;},Window_InBattleStatus[_0x2dcaec(0xaf6)]['getReturnWindow']=function(){const _0x401460=_0x2dcaec;return this[_0x401460(0x88f)]||SceneManager[_0x401460(0x496)][_0x401460(0x4f5)];},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x16c)]=function(){const _0x5bb237=_0x2dcaec;Window_StatusBase[_0x5bb237(0xaf6)][_0x5bb237(0x16c)][_0x5bb237(0x390)](this),this['loadOtherActorImages']();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d7)]=function(){const _0x121c05=_0x2dcaec;for(const _0x5e96f5 of $gameParty[_0x121c05(0x963)]()){if(!_0x5e96f5)continue;_0x5e96f5['characterName']()&&ImageManager[_0x121c05(0x980)](_0x5e96f5[_0x121c05(0x601)]()),_0x5e96f5[_0x121c05(0x6e3)]()&&ImageManager['loadSvActor'](_0x5e96f5[_0x121c05(0x6e3)]()),Imported[_0x121c05(0x446)]&&_0x5e96f5[_0x121c05(0x9b4)]()&&ImageManager[_0x121c05(0x39f)](_0x5e96f5[_0x121c05(0x9b4)]());}},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xb0f)]=function(){const _0x44608e=_0x2dcaec;this['_enemySprite']=new Sprite(),this[_0x44608e(0x29d)][_0x44608e(0x156)]['x']=0.5,this['_enemySprite'][_0x44608e(0x156)]['y']=0x1,this[_0x44608e(0x83f)](this[_0x44608e(0x29d)]);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x3db)]=function(){const _0x24e42e=_0x2dcaec,_0x5be3df=this['statesWindowRect'](),_0x5d7941=new Window_InBattleStatusStates(_0x5be3df);this['addChild'](_0x5d7941),_0x5d7941[_0x24e42e(0x4bb)](SceneManager['_scene'][_0x24e42e(0x6ca)]),this[_0x24e42e(0x238)]=_0x5d7941;},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x27b)]=function(){const _0x5e7144=_0x2dcaec,_0x27dc28=Window_InBattleStatusStates[_0x5e7144(0x7e9)][_0x5e7144(0x69b)],_0x55533d=Math[_0x5e7144(0xaf1)](_0x27dc28,Math['floor'](this['width']/0x2)),_0x4b65b4=Graphics['boxWidth']>0x44c?this['height']:this[_0x5e7144(0x90d)]()*0x4+this[_0x5e7144(0xb4b)]*0x2,_0x4859ce=this[_0x5e7144(0x64b)]-_0x55533d,_0x23a4bb=this[_0x5e7144(0x75c)]-_0x4b65b4;return new Rectangle(_0x4859ce,_0x23a4bb,_0x55533d,_0x4b65b4);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x62e)]=function(){const _0x5e1766=_0x2dcaec;if(!ConfigManager['touchUI'])return;if(!Window_InBattleStatus[_0x5e1766(0x7e9)][_0x5e1766(0x775)])return;this[_0x5e1766(0x8e4)]=new Sprite_Button(_0x5e1766(0x3fe)),this[_0x5e1766(0x8e4)]['x']=this[_0x5e1766(0x1f7)]()+Window_InBattleStatus[_0x5e1766(0x7e9)][_0x5e1766(0x172)],this['_pageupButton']['y']=this[_0x5e1766(0x504)]()+Window_InBattleStatus[_0x5e1766(0x7e9)][_0x5e1766(0x902)];const _0x51bf78=this[_0x5e1766(0x8e4)]['x']+this[_0x5e1766(0x8e4)][_0x5e1766(0x64b)];this[_0x5e1766(0x65d)]=new Sprite_Button(_0x5e1766(0xa9e)),this[_0x5e1766(0x65d)]['x']=_0x51bf78+0x4,this[_0x5e1766(0x65d)]['y']=this[_0x5e1766(0x8e4)]['y'],this[_0x5e1766(0x83f)](this[_0x5e1766(0x8e4)]),this[_0x5e1766(0x83f)](this[_0x5e1766(0x65d)]),this[_0x5e1766(0x8e4)]['setClickHandler'](this[_0x5e1766(0xa4e)][_0x5e1766(0x558)](this)),this['_pagedownButton'][_0x5e1766(0x482)](this[_0x5e1766(0x522)][_0x5e1766(0x558)](this));},Window_InBattleStatus['prototype']['pageButtonX']=function(){const _0x1d1274=_0x2dcaec;if(Graphics[_0x1d1274(0x555)]>0x44c&&Graphics['boxHeight']>0x2bc){if(Window_InBattleStatus['SETTINGS'][_0x1d1274(0x26e)]===_0x1d1274(0x99d)){let _0xd7bf6f=Math[_0x1d1274(0xbd6)]((-this['x']-0x64)/0x2);if(_0xd7bf6f>=-0x64)_0xd7bf6f=this[_0x1d1274(0xb4b)];return _0xd7bf6f;}else{const _0x4cb8e3=Graphics[_0x1d1274(0x555)]-this['x']-this[_0x1d1274(0x64b)];let _0x295f33=Math[_0x1d1274(0x6eb)]((_0x4cb8e3-0x64)/0x2)+this[_0x1d1274(0x64b)];return _0x295f33;}}else return this[_0x1d1274(0x64b)]-0x64-this[_0x1d1274(0xb4b)]/0x2;},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x504)]=function(){const _0x36e46f=_0x2dcaec;return Graphics[_0x36e46f(0x555)]>0x44c&&Graphics[_0x36e46f(0xab4)]>0x2bc?this[_0x36e46f(0x75c)]-0x30-this[_0x36e46f(0xb4b)]:0x30+this[_0x36e46f(0xb4b)];},Window_InBattleStatus['prototype']['previousActor']=function(){const _0x884737=_0x2dcaec;let _0x5d5ba3=this[_0x884737(0x1a6)]();if(_0x5d5ba3['length']<=0x1&&!Window_InBattleStatus[_0x884737(0x7e9)]['enemyStatus'])return;let _0x22c0a6=_0x5d5ba3[_0x884737(0x7bc)](this[_0x884737(0x386)]);_0x22c0a6--;_0x22c0a6<0x0&&(Window_InBattleStatus[_0x884737(0x7e9)]['enemyStatus']&&(_0x5d5ba3=this['getBattleMembers'](!![])),_0x22c0a6=_0x5d5ba3[_0x884737(0x7ce)]-0x1);const _0x2cbcbd=_0x5d5ba3[_0x22c0a6];this[_0x884737(0x9a3)](_0x2cbcbd),SoundManager['playCursor']();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x522)]=function(){const _0x380c21=_0x2dcaec;let _0x4b1795=this['getBattleMembers']();if(_0x4b1795[_0x380c21(0x7ce)]<=0x1&&!Window_InBattleStatus['SETTINGS'][_0x380c21(0xa68)])return;let _0x2e9fc5=_0x4b1795['indexOf'](this[_0x380c21(0x386)]);_0x2e9fc5++;_0x2e9fc5>=_0x4b1795['length']&&(Window_InBattleStatus[_0x380c21(0x7e9)][_0x380c21(0xa68)]&&(_0x4b1795=this[_0x380c21(0x1a6)](!![])),_0x2e9fc5=0x0);const _0x41b4a4=_0x4b1795[_0x2e9fc5];this[_0x380c21(0x9a3)](_0x41b4a4),SoundManager[_0x380c21(0xb78)]();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x1a6)]=function(_0x22d9f5){const _0x5c484c=_0x2dcaec;let _0x139e55=[];const _0x1f7601=_0x22d9f5?this[_0x5c484c(0x386)]['opponentsUnit']():this['_battler'][_0x5c484c(0x630)]();return _0x1f7601===$gameParty?_0x139e55=$gameParty[_0x5c484c(0x429)]():_0x139e55=$gameTroop[_0x5c484c(0x9ef)](),_0x139e55[_0x5c484c(0xb8d)](null);},Window_InBattleStatus['prototype'][_0x2dcaec(0x23a)]=function(){const _0x52fd3f=_0x2dcaec;Window_Base[_0x52fd3f(0xaf6)][_0x52fd3f(0x23a)]['call'](this),this[_0x52fd3f(0xa85)]();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xa85)]=function(){const _0x196e15=_0x2dcaec;if(this[_0x196e15(0xad4)]()){if(this[_0x196e15(0x84a)]())return this[_0x196e15(0x1d8)]();if(Input[_0x196e15(0x6ba)]('right'))return this['nextActor']();if(Input['isRepeated'](_0x196e15(0x99d)))return this['previousActor']();}},SoundManager[_0x2dcaec(0xb78)]=function(){const _0x49d29b=_0x2dcaec;this[_0x49d29b(0x28c)](0x0);},Window_InBattleStatus['prototype']['isOpenAndActive']=function(){const _0x3a3b50=_0x2dcaec;return this[_0x3a3b50(0x445)]()&&this[_0x3a3b50(0xaba)];},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x84a)]=function(){const _0x15ec92=_0x2dcaec;if(Input[_0x15ec92(0x89e)](_0x15ec92(0x473)))return!![];if(TouchInput[_0x15ec92(0x493)]())return!![];return![];},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x1d8)]=function(){const _0x11f2d9=_0x2dcaec;SoundManager['playCancel'](),this[_0x11f2d9(0x65a)](),this[_0x11f2d9(0x238)]&&(this['_statesWindow'][_0x11f2d9(0xabf)](),this[_0x11f2d9(0x238)][_0x11f2d9(0x65a)]()),SceneManager[_0x11f2d9(0x496)]['endInBattleStatus']();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x76b)]=function(){const _0x12bd3f=_0x2dcaec;if(!this[_0x12bd3f(0x8e4)])return;if(!this[_0x12bd3f(0x65d)])return;const _0x3332b0=$gameParty['battleMembers']()[_0x12bd3f(0x7ce)]>0x0||Window_InBattleStatus[_0x12bd3f(0x7e9)]['enemyStatus'];this[_0x12bd3f(0x8e4)][_0x12bd3f(0xaba)]=_0x3332b0,this[_0x12bd3f(0x65d)]['visible']=_0x3332b0;},Window_InBattleStatus['prototype'][_0x2dcaec(0xbc9)]=function(){const _0x4a81e8=_0x2dcaec;Window_StatusBase[_0x4a81e8(0xaf6)][_0x4a81e8(0xbc9)][_0x4a81e8(0x390)](this);if(this[_0x4a81e8(0x29d)])this['_enemySprite'][_0x4a81e8(0x4df)]();this['contents'][_0x4a81e8(0xb7e)](),this[_0x4a81e8(0x554)][_0x4a81e8(0xb7e)]();if(!this[_0x4a81e8(0x386)])return;this[_0x4a81e8(0x765)]();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x765)]=function(){const _0xef06fd=_0x2dcaec;if(VisuMZ[_0xef06fd(0xae3)][_0xef06fd(0xbeb)]['InBattleStatus'][_0xef06fd(0x40b)])return VisuMZ[_0xef06fd(0xae3)]['Settings'][_0xef06fd(0x48b)][_0xef06fd(0x40b)][_0xef06fd(0x390)](this);{const _0x463705=this[_0xef06fd(0x858)]()/0x2,_0x360344=ImageManager[_0xef06fd(0x5b8)],_0x446bac=_0x360344/0x2-this[_0xef06fd(0x90d)]()*1.5;this[_0xef06fd(0x6f5)](this['_battler'],_0x463705+0x1,0x0,ImageManager[_0xef06fd(0xaaf)],_0x360344),this[_0xef06fd(0x37f)](this[_0xef06fd(0x386)],_0x463705+0xb4,_0x446bac);}{let _0x4f7b43=this[_0xef06fd(0x8f0)](),_0x36875b=0x0,_0x215e10=Math[_0xef06fd(0xbd6)](this['drawingAreaWidth']()/0x2),_0x418279=0x0;const _0x2c5369=this[_0xef06fd(0x7bd)]();let _0x279f12=_0x36875b;const _0x29edb5=this[_0xef06fd(0x74b)]-ImageManager['faceHeight'],_0x544c83=Math['ceil'](_0x2c5369[_0xef06fd(0x7ce)]/0x2)*this['lineHeight']();let _0x5b5ba2=Math[_0xef06fd(0xbd6)]((_0x29edb5-_0x544c83)/0x2)+ImageManager['faceHeight'],_0x2d93d3=Math[_0xef06fd(0x6eb)](_0x4f7b43/0x2);this[_0xef06fd(0x238)]['y']!==0x0&&(this['_statesWindow']['y']=_0x5b5ba2);for(const _0x52f360 of _0x2c5369){this[_0xef06fd(0x8bf)](_0x279f12,_0x5b5ba2,_0x2d93d3,this[_0xef06fd(0x90d)]()),this[_0xef06fd(0x898)](_0x52f360,_0x279f12,_0x5b5ba2,_0x2d93d3),_0x418279++,_0x418279%0x2===0x0?(_0x279f12=_0x36875b,_0x5b5ba2+=this[_0xef06fd(0x90d)]()):_0x279f12=_0x215e10;}}},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x6d9)]=function(){const _0x383f84=_0x2dcaec;return VisuMZ[_0x383f84(0xae3)][_0x383f84(0xbeb)][_0x383f84(0x48b)][_0x383f84(0x4f2)];},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x6f5)]=function(_0x1b6fb8,_0xa1484f,_0x32f5a0,_0x280e58,_0x437b60){const _0x5f3d41=_0x2dcaec;if(_0x1b6fb8[_0x5f3d41(0x8d6)]())switch(this[_0x5f3d41(0x6d9)]()){case _0x5f3d41(0x26b):break;case _0x5f3d41(0xc44):this[_0x5f3d41(0xa92)](_0x1b6fb8,_0xa1484f,_0x32f5a0+0x1,_0x280e58,_0x437b60-0x2);break;case'svbattler':this[_0x5f3d41(0x804)](_0x1b6fb8,_0xa1484f,_0x32f5a0+0x1,_0x280e58,_0x437b60-0x2);break;default:this['drawItemActorFace'](_0x1b6fb8,_0xa1484f,_0x32f5a0,_0x280e58,_0x437b60);break;}else this[_0x5f3d41(0x385)](_0x1b6fb8,_0xa1484f,_0x32f5a0,_0x280e58,_0x437b60);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xbe6)]=function(_0x1a97e5,_0x39eacb,_0x429f7a,_0x1b2d19,_0x51687f){const _0x10e989=_0x2dcaec;_0x1b2d19=_0x1b2d19||ImageManager['faceWidth'],_0x51687f=_0x51687f||ImageManager[_0x10e989(0x5b8)];const _0xb3059b=ImageManager['faceWidth'],_0x4aae41=_0x51687f-0x2,_0x3b5e0a=_0x39eacb+Math['floor']((_0x1b2d19-_0xb3059b)/0x2);this[_0x10e989(0x61d)]===Window_MenuStatus&&this[_0x10e989(0xb7d)](_0x1a97e5[_0x10e989(0x19e)]()),this[_0x10e989(0xba9)](_0x1a97e5,_0x3b5e0a,_0x429f7a,_0xb3059b,_0x4aae41),this['changePaintOpacity'](!![]);},Window_InBattleStatus[_0x2dcaec(0xaf6)]['drawItemActorSprite']=function(_0x50ba66,_0xb32c81,_0x3cb668,_0x104fe6,_0x517e34){const _0x5179ed=_0x2dcaec;_0x104fe6=_0x104fe6||ImageManager[_0x5179ed(0xaaf)],_0x517e34=_0x517e34||ImageManager[_0x5179ed(0x5b8)];const _0x31f131=_0x50ba66[_0x5179ed(0x601)](),_0x53b35a=_0x50ba66['characterIndex'](),_0x2ad611=ImageManager[_0x5179ed(0x980)](_0x31f131),_0x5f02d9=ImageManager[_0x5179ed(0x525)](_0x31f131),_0x543942=_0x2ad611[_0x5179ed(0x64b)]/(_0x5f02d9?0x3:0xc),_0x1b0ab2=_0x2ad611[_0x5179ed(0x75c)]/(_0x5f02d9?0x4:0x8),_0xffb384=_0x104fe6,_0x1e7f93=_0x517e34-0x2,_0x29c3ff=_0xb32c81+Math[_0x5179ed(0x6eb)](_0xffb384/0x2),_0x238c60=_0x3cb668+Math[_0x5179ed(0xbd6)]((_0x517e34+_0x1b0ab2)/0x2);this['constructor']===Window_MenuStatus&&this[_0x5179ed(0xb7d)](_0x50ba66[_0x5179ed(0x19e)]());const _0x10ab6e=Math[_0x5179ed(0xaf1)](_0x104fe6,_0x543942),_0x351fdd=Math[_0x5179ed(0xaf1)](_0x517e34,_0x1b0ab2),_0x27b96d=Math[_0x5179ed(0x6eb)](_0xb32c81+Math[_0x5179ed(0x959)](_0x104fe6-_0x543942,0x0)/0x2),_0x21be95=Math[_0x5179ed(0x6eb)](_0x3cb668+Math[_0x5179ed(0x959)](_0x517e34-_0x1b0ab2,0x0)/0x2),_0x29339e=_0x5f02d9?0x0:_0x53b35a,_0x4c41a2=(_0x29339e%0x4*0x3+0x1)*_0x543942,_0x231ae5=Math[_0x5179ed(0x6eb)](_0x29339e/0x4)*0x4*_0x1b0ab2;this[_0x5179ed(0x2e1)][_0x5179ed(0x66f)](_0x2ad611,_0x4c41a2,_0x231ae5,_0x10ab6e,_0x351fdd,_0x27b96d,_0x21be95),this[_0x5179ed(0xb7d)](!![]);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x804)]=function(_0x3bf26c,_0x187d89,_0x3d8f24,_0x16e4f8,_0x4febbc,_0x59c79b){const _0x1d904d=_0x2dcaec;_0x16e4f8=_0x16e4f8||ImageManager[_0x1d904d(0xaaf)],_0x4febbc=_0x4febbc||ImageManager[_0x1d904d(0x5b8)];const _0x8f396e=ImageManager['loadSvActor'](_0x59c79b?_0x3bf26c['svBattlerName']():_0x3bf26c[_0x1d904d(0x6e3)]()),_0x584701=_0x8f396e[_0x1d904d(0x64b)]/ImageManager[_0x1d904d(0x890)],_0x4f0ee3=_0x8f396e['height']/ImageManager['svActorVertCells'],_0x5bda49=_0x16e4f8,_0x5afd75=_0x4febbc-0x2,_0x1b90da=_0x187d89+Math[_0x1d904d(0x6eb)](_0x5bda49/0x2),_0x39fdc7=_0x3d8f24+Math['ceil']((_0x4febbc+_0x4f0ee3)/0x2);this[_0x1d904d(0x61d)]===Window_MenuStatus&&this[_0x1d904d(0xb7d)](_0x3bf26c[_0x1d904d(0x19e)]());const _0x4c9dc6=_0x3bf26c[_0x1d904d(0x42f)]&&_0x3bf26c['hasStaticSvBattler'](),_0x8226f1=0x0,_0x1e8cc9=0x0,_0x14bf94=_0x4c9dc6?_0x8f396e['width']:_0x584701,_0x505e31=_0x4c9dc6?_0x8f396e[_0x1d904d(0x75c)]:_0x4f0ee3,_0x2a55bb=Math[_0x1d904d(0xaf1)](0x1,_0x16e4f8/_0x14bf94,_0x4febbc/_0x505e31),_0x5d95be=_0x2a55bb*_0x14bf94,_0x1f1131=_0x2a55bb*_0x505e31,_0x10ba9d=Math['floor'](_0x187d89+Math[_0x1d904d(0x959)](_0x16e4f8-_0x5d95be,0x0)/0x2),_0x36cfed=Math[_0x1d904d(0x6eb)](_0x3d8f24+Math[_0x1d904d(0x959)](_0x4febbc-_0x1f1131,0x0)/0x2);this[_0x1d904d(0x2e1)][_0x1d904d(0x66f)](_0x8f396e,_0x8226f1,_0x1e8cc9,_0x14bf94,_0x505e31,_0x10ba9d,_0x36cfed,_0x5d95be,_0x1f1131),this[_0x1d904d(0xb7d)](!![]);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x385)]=function(_0x535a7d,_0x1d4961,_0x5c5f0f,_0x58f386,_0x5f3d7c){const _0x17e5ff=_0x2dcaec;if(_0x535a7d[_0x17e5ff(0x5c7)]()){this['drawItemActorSvBattler'](_0x535a7d,_0x1d4961,_0x5c5f0f+0x1,_0x58f386,_0x5f3d7c-0x2,!![]);return;}const _0x1e6e7d=_0x535a7d[_0x17e5ff(0x6e3)](),_0x26900f=$gameSystem[_0x17e5ff(0x334)]()?ImageManager['loadSvEnemy'](_0x1e6e7d):ImageManager[_0x17e5ff(0x9d4)](_0x1e6e7d);_0x26900f[_0x17e5ff(0x612)](this[_0x17e5ff(0xc6d)][_0x17e5ff(0x558)](this,_0x535a7d,_0x26900f,_0x1d4961,_0x5c5f0f,_0x58f386,_0x5f3d7c));},Window_InBattleStatus['prototype'][_0x2dcaec(0xc6d)]=function(_0x449479,_0x5848fd,_0x32d864,_0x5ca6b8,_0x28c5a1,_0x3b41b2){const _0x2fef72=_0x2dcaec;if(this[_0x2fef72(0x386)]!==_0x449479)return;this['_enemySprite'][_0x2fef72(0xbc5)](),this[_0x2fef72(0x29d)][_0x2fef72(0x4ca)]=new Bitmap(_0x28c5a1,_0x3b41b2);const _0x74240f=_0x28c5a1,_0x4c82d0=_0x3b41b2,_0x4bf82f=Math['min'](_0x74240f,_0x4c82d0),_0x4d2f52=this[_0x2fef72(0x29d)][_0x2fef72(0x4ca)],_0x306533=Math[_0x2fef72(0xaf1)](0x1,_0x4bf82f/_0x5848fd[_0x2fef72(0x64b)],_0x4bf82f/_0x5848fd[_0x2fef72(0x75c)]),_0x4ed48f=_0x5848fd[_0x2fef72(0x64b)]*_0x306533,_0x1362b8=_0x5848fd['height']*_0x306533,_0x21c4fc=Math[_0x2fef72(0x976)]((_0x74240f-_0x4ed48f)/0x2),_0x21900c=Math[_0x2fef72(0x976)]((_0x4c82d0-_0x1362b8)/0x2);_0x4d2f52[_0x2fef72(0x66f)](_0x5848fd,0x0,0x0,_0x5848fd[_0x2fef72(0x64b)],_0x5848fd[_0x2fef72(0x75c)],_0x21c4fc,_0x21900c,_0x4ed48f,_0x1362b8),this[_0x2fef72(0x29d)][_0x2fef72(0x156)]['x']=0.5,this[_0x2fef72(0x29d)][_0x2fef72(0x156)]['y']=0x1,this[_0x2fef72(0x29d)]['x']=_0x32d864+_0x28c5a1/0x2+this[_0x2fef72(0xb4b)],this[_0x2fef72(0x29d)]['y']=_0x5ca6b8+_0x3b41b2+this['padding'],this[_0x2fef72(0x29d)]['setHue'](this['_battler'][_0x2fef72(0x8b1)]());},Window_InBattleStatus['prototype'][_0x2dcaec(0x933)]=function(_0x424621,_0x2bb05a,_0x521afb,_0xbb8b37){const _0x1b23f5=_0x2dcaec;if(_0x424621['isEnemy']())_0xbb8b37=this[_0x1b23f5(0x86d)]-_0x2bb05a;Window_StatusBase[_0x1b23f5(0xaf6)]['drawActorName'][_0x1b23f5(0x390)](this,_0x424621,_0x2bb05a,_0x521afb,_0xbb8b37);},Window_InBattleStatus[_0x2dcaec(0xaf6)]['drawActorClass']=function(_0x1b291c,_0x216104,_0x37cdb7,_0x48aaa2){const _0x2f1d57=_0x2dcaec;if(!_0x1b291c[_0x2f1d57(0x8d6)]())return;Window_StatusBase[_0x2f1d57(0xaf6)]['drawActorClass']['call'](this,_0x1b291c,_0x216104,_0x37cdb7,_0x48aaa2);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0xbf7)]=function(_0x5a4415,_0x29d34f,_0x5c19c2){const _0x443960=_0x2dcaec;if(_0x5a4415[_0x443960(0x5d1)]()&&!Window_InBattleStatus[_0x443960(0x7e9)][_0x443960(0x1fa)])return;Window_StatusBase[_0x443960(0xaf6)][_0x443960(0xbf7)][_0x443960(0x390)](this,_0x5a4415,_0x29d34f,_0x5c19c2);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x2f6)]=function(_0x22dd05,_0x6e6438,_0x23ceb7,_0x294a06){const _0x5cc279=_0x2dcaec;_0x22dd05[_0x5cc279(0x16e)]=!![],Window_StatusBase[_0x5cc279(0xaf6)]['drawActorIcons'][_0x5cc279(0x390)](this,_0x22dd05,_0x6e6438,_0x23ceb7,_0x294a06),_0x22dd05[_0x5cc279(0x16e)]=undefined;},VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0x441)]=Game_BattlerBase[_0x2dcaec(0xaf6)][_0x2dcaec(0x363)],Game_BattlerBase[_0x2dcaec(0xaf6)]['allIcons']=function(){const _0x60d517=_0x2dcaec;if(this[_0x60d517(0x16e)])return[];return VisuMZ[_0x60d517(0xae3)][_0x60d517(0x441)][_0x60d517(0x390)](this);},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x27d)]=function(_0x43d1c5,_0x17c403,_0x34b097,_0x25148d){const _0xb243f7=_0x2dcaec,_0x2abfb4=_0xb243f7(0x818)['format'](_0x43d1c5[_0xb243f7(0x233)](),_0x17c403);let _0x2295a4=![];if(_0x43d1c5[_0xb243f7(0x5d1)]()){const _0x1e90be=Window_InBattleStatus[_0xb243f7(0x7e9)];if(_0x17c403==='hp'&&_0x1e90be[_0xb243f7(0x449)])_0x2295a4=!![];if(_0x17c403==='mp'&&_0x1e90be['enemyMpGaugeRate'])_0x2295a4=!![];if(_0x17c403==='tp'&&_0x1e90be[_0xb243f7(0x6ae)])_0x2295a4=!![];}const _0x45434f=this['createInnerSprite'](_0x2abfb4,_0x2295a4?Sprite_GaugeRate:Sprite_Gauge);_0x45434f[_0xb243f7(0xb15)](_0x43d1c5,_0x17c403),_0x45434f['move'](_0x34b097,_0x25148d),_0x45434f[_0xb243f7(0xbc5)]();},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x8f0)]=function(){const _0x1457c8=_0x2dcaec,_0xf4722f=this['_statesWindow']?this[_0x1457c8(0x238)]['width']:0x0;return this[_0x1457c8(0x86d)]-_0xf4722f+this[_0x1457c8(0xb4b)]*0x2;},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x7bd)]=function(){const _0x313952=_0x2dcaec;return Imported[_0x313952(0x6d3)]?VisuMZ[_0x313952(0x785)][_0x313952(0xbeb)][_0x313952(0x609)][_0x313952(0x2b8)]:[_0x313952(0x7d4),'MaxMP',_0x313952(0x82f),'DEF','MAT',_0x313952(0xb20),_0x313952(0xa06),_0x313952(0xbee)];},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x898)]=function(_0x3b66d6,_0xf24067,_0x3ed3d8,_0x1d06a0){const _0x37744c=_0x2dcaec,_0x3d8837=Window_InBattleStatus['SETTINGS'],_0x3a8d03=Imported[_0x37744c(0x6d3)];this['resetFontSettings']();let _0x5de30e='',_0xba68fe=0x0,_0x364124=['MAXHP',_0x37744c(0x4c5),_0x37744c(0x82f),_0x37744c(0xa0b),'MAT','MDF','AGI',_0x37744c(0xbee)]['indexOf'](String(_0x3b66d6)['toUpperCase']()[_0x37744c(0x651)]());if(_0x3a8d03)_0x5de30e=TextManager['paramName'](_0x3b66d6),_0xba68fe=VisuMZ[_0x37744c(0xa3f)](_0x3b66d6);else{if(_0x364124>=0x0&&_0x364124<0x8)_0x5de30e=TextManager[_0x37744c(0x8e0)](_0x364124);}if(_0x364124>=0x0&&_0x364124<0x8){const _0x817bd2=this['_battler'][_0x37744c(0x6fd)][_0x364124];this[_0x37744c(0x386)][_0x37744c(0x7f6)](_0x817bd2,_0x364124)!==0x0&&(_0xba68fe=this[_0x37744c(0x386)]['buffIconIndex'](_0x817bd2,_0x364124));}if(_0x5de30e){let _0x40bcd1=_0x37744c(0xa45)[_0x37744c(0xb60)](_0x5de30e,_0xba68fe);_0x1d06a0<=0xd4&&(_0x40bcd1=_0x37744c(0xa4a)['format'](_0x5de30e));const _0x248217=_0x1d06a0<=0xd4?'\x20':'\x20\x20';this['drawTextEx'](_0x248217+_0x40bcd1,_0xf24067,_0x3ed3d8);}this[_0x37744c(0x38c)]();let _0x13f885='';_0x3a8d03?_0x13f885=this[_0x37744c(0x386)][_0x37744c(0x1dd)](_0x3b66d6,!![]):_0x13f885=String(this['_battler'][_0x37744c(0x8e0)](_0x364124));if(this[_0x37744c(0x386)][_0x37744c(0x5d1)]()){let _0x1462f9=!![];if(_0x3d8837[_0x37744c(0xc53)])_0x1462f9=![];if(_0x3d8837[_0x37744c(0x306)]&&BattleManager[_0x37744c(0xb36)]())_0x1462f9=![];if(_0x3d8837[_0x37744c(0x954)]&&$gameSystem['getDefeatedEnemies']()['includes'](this[_0x37744c(0x386)]['enemyId']()))_0x1462f9=![];_0x1462f9&&(_0x13f885=_0x3d8837['enemyHiddenParameter']);}if(_0x364124>=0x0&&_0x364124<0x8){if(this[_0x37744c(0x386)][_0x37744c(0x262)](_0x364124)>0x1)_0x13f885=_0x3d8837[_0x37744c(0x47b)][_0x37744c(0xb60)](_0x13f885),Imported['VisuMZ_1_SkillsStatesCore']?this[_0x37744c(0xaa8)](ColorManager['buffColor']()):this['changeTextColor'](ColorManager['powerUpColor']());else this[_0x37744c(0x386)][_0x37744c(0x262)](_0x364124)<0x1&&(_0x13f885=_0x3d8837['debuffValueFmt']['format'](_0x13f885),Imported[_0x37744c(0xb3c)]?this[_0x37744c(0xaa8)](ColorManager['debuffColor']()):this[_0x37744c(0xaa8)](ColorManager[_0x37744c(0xb22)]()));}if(String(_0x13f885)){const _0x50c78b=_0x1d06a0<=0xd4?'\x20':'\x20\x20';this[_0x37744c(0x225)](_0x13f885+_0x50c78b,_0xf24067,_0x3ed3d8,_0x1d06a0,'right');}},Window_InBattleStatus[_0x2dcaec(0xaf6)][_0x2dcaec(0x8bf)]=function(_0x4f4d70,_0x9ccf82,_0x3d953b,_0x11b122){const _0x2505db=_0x2dcaec;_0x11b122=_0x11b122||this[_0x2505db(0x90d)](),this[_0x2505db(0x554)][_0x2505db(0x68d)]=0xa0;const _0x22e24a=ColorManager[_0x2505db(0x626)]();this[_0x2505db(0x554)][_0x2505db(0x179)](_0x4f4d70+0x1,_0x9ccf82+0x1,_0x3d953b-0x2,_0x11b122-0x2,_0x22e24a),this[_0x2505db(0x554)][_0x2505db(0x68d)]=0xff;},Game_BattlerBase[_0x2dcaec(0xaf6)]['getParamBuffAndStateRate']=function(_0x1a282e){const _0x336754=_0x2dcaec;let _0x3f0f0f=0x1;_0x3f0f0f*=this['paramBuffRate'](_0x1a282e);for(const _0x31ca09 of this[_0x336754(0x7d6)]()){if(!_0x31ca09)continue;for(const _0x277f8e of _0x31ca09[_0x336754(0x71e)]){if(!_0x277f8e)continue;if(_0x277f8e[_0x336754(0x812)]!==Game_BattlerBase[_0x336754(0x54d)])continue;if(_0x277f8e['dataId']!==_0x1a282e)continue;_0x3f0f0f*=_0x277f8e[_0x336754(0x2df)];}}return _0x3f0f0f;};function Window_InBattleStatusStates(){const _0x54ca4a=_0x2dcaec;this[_0x54ca4a(0x970)](...arguments);}Window_InBattleStatusStates[_0x2dcaec(0xaf6)]=Object[_0x2dcaec(0x2f5)](Window_Command[_0x2dcaec(0xaf6)]),Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x61d)]=Window_InBattleStatusStates,Window_InBattleStatusStates[_0x2dcaec(0x7e9)]={'maxWidth':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x48b)]['statesMaxWidth']??0x180,'drawStates':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x9ee)]??!![],'drawBuffs':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['drawBuffs']??!![],'drawDebuffs':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['drawDebuffs']??!![],'normalIcon':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['normalIcon']??0x54,'normalText':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x320)]??_0x2dcaec(0x97b),'normalHelp':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['normalHelp']??_0x2dcaec(0x331),'stateHelpFmt':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x312)]??'%1\x20%2','buffNameFmt':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x229)]??_0x2dcaec(0x4fb),'buffHelpFmt':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)]['buffHelpFmt']??_0x2dcaec(0x5ad),'debuffNameFmt':VisuMZ['BattleCore']['Settings'][_0x2dcaec(0x48b)][_0x2dcaec(0x7b9)]??'%1▼','debuffHelpFmt':VisuMZ['BattleCore'][_0x2dcaec(0xbeb)]['InBattleStatus'][_0x2dcaec(0x658)]??_0x2dcaec(0x965),'actionsFmt':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0xbc7)]??_0x2dcaec(0x42c),'turnsFmt':VisuMZ[_0x2dcaec(0xae3)][_0x2dcaec(0xbeb)][_0x2dcaec(0x48b)][_0x2dcaec(0x923)]??_0x2dcaec(0xc58),'passiveText':VisuMZ[_0x2dcaec(0xae3)]['Settings'][_0x2dcaec(0x48b)][_0x2dcaec(0x9ff)]??_0x2dcaec(0xb55)},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x970)]=function(_0x3052d1){const _0x3badd8=_0x2dcaec;this['_battler']=null,Window_Command[_0x3badd8(0xaf6)]['initialize']['call'](this,_0x3052d1),this[_0x3badd8(0x65a)](),this[_0x3badd8(0xabf)](),this['setBackgroundType'](0x2);},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x9a3)]=function(_0x201487){const _0x6c050d=_0x2dcaec;this[_0x6c050d(0x386)]=_0x201487||null,this['refresh'](),this[_0x6c050d(0x214)](0x0),this['scrollTo'](0x0,0x0),this[_0x6c050d(0x1f3)]();},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x5d0)]=function(){},Window_InBattleStatusStates[_0x2dcaec(0xaf6)]['makeCommandList']=function(){const _0x2a8f4c=_0x2dcaec;if(!this[_0x2a8f4c(0x386)])return;this[_0x2a8f4c(0x5a9)](),this[_0x2a8f4c(0x6df)](),this[_0x2a8f4c(0xa3d)](),this[_0x2a8f4c(0x512)]();},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x5a9)]=function(){const _0x37d785=_0x2dcaec;if(!this[_0x37d785(0x386)]['isEnemy']())return;if(!this[_0x37d785(0x386)]['hasAspectData']())return;const _0x4aca71=this[_0x37d785(0x386)][_0x37d785(0x83a)]()[_0x37d785(0x321)],_0x163a30=this[_0x37d785(0x386)][_0x37d785(0x83a)]()['iconIndex'],_0x792833=this[_0x37d785(0x386)]['getAspectData']()['nameColor'];let _0x253b25='';_0x792833[_0x37d785(0xb9e)](/#(.*?)/gi)&&Imported['VisuMZ_1_MessageCore']?_0x253b25=_0x37d785(0xb98)[_0x37d785(0xb60)](_0x163a30,_0x4aca71,_0x792833):_0x253b25=_0x37d785(0x166)[_0x37d785(0xb60)](_0x163a30,_0x4aca71,_0x792833),this['addCommand'](_0x253b25,_0x37d785(0x2a7),!![]);},Window_InBattleStatusStates['prototype'][_0x2dcaec(0x6df)]=function(){const _0x1d51ae=_0x2dcaec;if(!Window_InBattleStatusStates[_0x1d51ae(0x7e9)][_0x1d51ae(0x9ee)])return;for(const _0x25648f of this['_battler']['states']()){if(!this[_0x1d51ae(0x7b0)](_0x25648f))continue;const _0x800640=this['makeStateName'](_0x25648f);this['addCommand'](_0x800640,_0x1d51ae(0xa88),!![],_0x25648f['id']);}},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x7b0)]=function(_0x12b64a){const _0x5c6cd8=_0x2dcaec;if(!_0x12b64a)return![];if(_0x12b64a[_0x5c6cd8(0x321)][_0x5c6cd8(0x651)]()==='')return![];if(_0x12b64a[_0x5c6cd8(0x321)]['includes']('-----'))return![];if(_0x12b64a['iconIndex']<=0x0)return![];if(_0x12b64a[_0x5c6cd8(0x56a)])return![];return!![];},Window_InBattleStatusStates[_0x2dcaec(0xaf6)]['makeStateName']=function(_0x1507f4){const _0x1f9c72=_0x2dcaec;let _0x332d37=_0x1507f4[_0x1f9c72(0x448)],_0x160684=_0x1507f4[_0x1f9c72(0x321)],_0x540235='0';return Imported[_0x1f9c72(0xb3c)]&&Imported[_0x1f9c72(0x2a9)]&&(_0x540235=String(ColorManager[_0x1f9c72(0x506)](_0x1507f4))),_0x540235[_0x1f9c72(0xb9e)](/#(.*?)/gi)?'\x5cI[%1]\x5cHEXCOLOR<%3>%2'['format'](_0x332d37,_0x160684,_0x540235):'\x5cI[%1]\x5cC[%3]%2'[_0x1f9c72(0xb60)](_0x332d37,_0x160684,_0x540235);},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0xa3d)]=function(){const _0xc620bd=_0x2dcaec;for(let _0x190abc=0x0;_0x190abc<0x8;_0x190abc++){const _0x1e02aa=this['makeBuffName'](_0x190abc);if(!_0x1e02aa)continue;this[_0xc620bd(0x529)](_0x1e02aa,_0xc620bd(0x66a),!![],_0x190abc);}},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x782)]=function(_0x2f3ebd){const _0x1f9a2e=_0x2dcaec;if(!this[_0x1f9a2e(0x386)][_0x1f9a2e(0x571)](_0x2f3ebd)&&!this['_battler'][_0x1f9a2e(0x91a)](_0x2f3ebd))return'';const _0x297db0=Window_InBattleStatusStates[_0x1f9a2e(0x7e9)];if(this[_0x1f9a2e(0x386)][_0x1f9a2e(0x571)](_0x2f3ebd)&&!_0x297db0['drawBuffs'])return'';if(this['_battler']['isDebuffAffected'](_0x2f3ebd)&&!_0x297db0[_0x1f9a2e(0x1f9)])return'';const _0x5519e7=this[_0x1f9a2e(0x386)][_0x1f9a2e(0x6fd)][_0x2f3ebd];let _0x52ba5c=this['_battler']['buffIconIndex'](_0x5519e7,_0x2f3ebd),_0x19db20=TextManager[_0x1f9a2e(0x8e0)](_0x2f3ebd);_0x5519e7>0x0?_0x19db20=_0x297db0[_0x1f9a2e(0x229)][_0x1f9a2e(0xb60)](_0x19db20):_0x19db20=_0x297db0[_0x1f9a2e(0x7b9)]['format'](_0x19db20);let _0x44a6cd=0x0;return Imported[_0x1f9a2e(0xb3c)]&&(_0x44a6cd=_0x5519e7>0x0?ColorManager[_0x1f9a2e(0x413)]():ColorManager[_0x1f9a2e(0x142)]()),String(_0x44a6cd)[_0x1f9a2e(0xb9e)](/#(.*?)/gi)?_0x1f9a2e(0xb98)[_0x1f9a2e(0xb60)](_0x52ba5c,_0x19db20,_0x44a6cd):'\x5cI[%1]\x5cC[%3]%2'[_0x1f9a2e(0xb60)](_0x52ba5c,_0x19db20,_0x44a6cd);},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x512)]=function(){const _0x433e62=_0x2dcaec;if(this['_list'][_0x433e62(0x7ce)]>0x0)return;const _0x2e2b8c=Window_InBattleStatusStates[_0x433e62(0x7e9)],_0x1af647=_0x2e2b8c[_0x433e62(0x297)],_0x32051c=_0x2e2b8c[_0x433e62(0x320)],_0x3794f9=_0x433e62(0xa8b)['format'](_0x1af647,_0x32051c);this[_0x433e62(0x529)](_0x3794f9,_0x433e62(0x1c0));},Window_InBattleStatusStates[_0x2dcaec(0xaf6)]['drawItem']=function(_0x27389f){const _0xa195c6=_0x2dcaec,_0x66b640=this[_0xa195c6(0xb4c)](_0x27389f);this[_0xa195c6(0xb7d)](0xff),this[_0xa195c6(0xa18)](this[_0xa195c6(0x246)](_0x27389f),_0x66b640['x'],_0x66b640['y']),this[_0xa195c6(0xc16)](_0x27389f,_0x66b640);},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0xc16)]=function(_0x45e79e,_0x5b7af9){const _0x108f0b=_0x2dcaec;if(!Imported['VisuMZ_1_SkillsStatesCore'])return;const _0x50268c=this[_0x108f0b(0x53e)](_0x45e79e),_0x149b4d=_0x5b7af9['x']+0x2;if(_0x50268c==='state'){const _0x3f6e07=$dataStates[this[_0x108f0b(0x144)][_0x45e79e][_0x108f0b(0x792)]||0x0];this[_0x108f0b(0x9d2)](this[_0x108f0b(0x386)],_0x3f6e07,_0x149b4d,_0x5b7af9['y']),this[_0x108f0b(0x223)](this[_0x108f0b(0x386)],_0x3f6e07,_0x149b4d,_0x5b7af9['y']);}else{if(_0x50268c===_0x108f0b(0x66a)){const _0x569524=this[_0x108f0b(0x144)][_0x45e79e][_0x108f0b(0x792)];this['drawActorBuffTurns'](this[_0x108f0b(0x386)],_0x569524,_0x149b4d,_0x5b7af9['y']),this[_0x108f0b(0x30a)](this[_0x108f0b(0x386)],_0x569524,_0x149b4d,_0x5b7af9['y']);}}},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x590)]=function(){const _0x3ca551=_0x2dcaec,_0x408d3c=this['currentSymbol']();let _0x2d3d7d='';if(_0x408d3c===_0x3ca551(0x2a7))_0x2d3d7d=this[_0x3ca551(0x386)][_0x3ca551(0x83a)]()['description'];else{if(_0x408d3c==='state')_0x2d3d7d=this[_0x3ca551(0x433)]();else{if(_0x408d3c==='buff')_0x2d3d7d=this[_0x3ca551(0x1c1)]();else _0x408d3c===_0x3ca551(0x1c0)&&(_0x2d3d7d=Window_InBattleStatusStates[_0x3ca551(0x7e9)][_0x3ca551(0x36a)]);}}_0x2d3d7d?this['_helpWindow'][_0x3ca551(0xa9d)](_0x2d3d7d):this[_0x3ca551(0x6ca)]['clear']();},Window_InBattleStatusStates[_0x2dcaec(0xaf6)]['makeStateHelpText']=function(){const _0x1c902e=_0x2dcaec,_0x1a62e8=Window_InBattleStatusStates['SETTINGS'],_0x140391=this['currentExt']();let _0x516856='';const _0x15f98f=$dataStates[_0x140391]||null;if(_0x15f98f){const _0x9a509e=_0x1a62e8[_0x1c902e(0x312)];let _0x4c53ac=_0x15f98f[_0x1c902e(0xa14)]||_0x15f98f[_0x1c902e(0x7c3)]||'';Imported[_0x1c902e(0xb3c)]&&(_0x4c53ac=_0x4c53ac[_0x1c902e(0xb60)](this['_battler'][_0x1c902e(0xbad)](_0x140391)));let _0xace41=_0x1c902e(0xa7e);if(this[_0x1c902e(0x386)][_0x1c902e(0x485)](_0x140391)){if(_0x15f98f[_0x1c902e(0x48d)]===0x0)_0xace41=_0x1c902e(0x26b);if(_0x15f98f[_0x1c902e(0x48d)]===0x1)_0xace41='actions';if(_0x15f98f[_0x1c902e(0x48d)]===0x2)_0xace41=_0x1c902e(0x286);}const _0x231bc1=this[_0x1c902e(0x386)][_0x1c902e(0x6c5)][_0x140391]||0x0;let _0x3ee008='\x5cC[0]';Imported[_0x1c902e(0xb3c)]&&Imported[_0x1c902e(0x2a9)]&&(_0x3ee008=ColorManager['stateColor'](_0x15f98f),_0x3ee008[_0x1c902e(0xb9e)](/#(.*?)/gi)?_0x3ee008=_0x1c902e(0x8f1)['format'](_0x3ee008):_0x3ee008=_0x1c902e(0x521)[_0x1c902e(0xb60)](_0x3ee008)),_0x516856=_0x9a509e['format'](_0x4c53ac,this[_0x1c902e(0x150)](_0xace41,_0x231bc1,_0x3ee008));}return _0x516856;},Window_InBattleStatusStates['prototype'][_0x2dcaec(0x1c1)]=function(){const _0x52c635=_0x2dcaec,_0x170134=Window_InBattleStatusStates[_0x52c635(0x7e9)],_0x477458=this['currentExt']();let _0x599fd5='';const _0x3e6a55=this[_0x52c635(0x386)][_0x52c635(0x571)](_0x477458),_0x11ad9=_0x3e6a55?_0x52c635(0x326):_0x52c635(0x658),_0x5638dc=_0x170134[_0x11ad9];let _0x2bb8ac=_0x52c635(0x9ae);Imported[_0x52c635(0xb3c)]&&Imported[_0x52c635(0x2a9)]&&(_0x2bb8ac=_0x3e6a55?ColorManager[_0x52c635(0x413)]():ColorManager[_0x52c635(0x142)](),_0x2bb8ac[_0x52c635(0xb9e)](/#(.*?)/gi)?_0x2bb8ac='\x5cHEXCOLOR<%1>'['format'](_0x2bb8ac):_0x2bb8ac=_0x52c635(0x521)[_0x52c635(0xb60)](_0x2bb8ac));const _0x4f68c3=this['_battler'][_0x52c635(0x267)][_0x477458]||0x0;return _0x599fd5=_0x5638dc['format'](TextManager[_0x52c635(0x8e0)](_0x477458),Math[_0x52c635(0x6eb)](this[_0x52c635(0x386)][_0x52c635(0x2b7)](_0x477458)*0x64)+'%',_0x2bb8ac,this[_0x52c635(0x150)](_0x52c635(0x286),_0x4f68c3,_0x2bb8ac)),_0x599fd5;},Window_InBattleStatusStates[_0x2dcaec(0xaf6)][_0x2dcaec(0x150)]=function(_0x2f879a,_0x5512dc,_0x3ace3f){const _0x750488=_0x2dcaec,_0x20b8d7=Window_InBattleStatusStates['SETTINGS'];let _0x2520fa=_0x20b8d7[_0x750488(0x9ff)];if(_0x2f879a==='actions')_0x2520fa=_0x20b8d7[_0x750488(0xbc7)];if(_0x2f879a===_0x750488(0x286))_0x2520fa=_0x20b8d7[_0x750488(0xc4a)];if(_0x2f879a===_0x750488(0x26b))return'';return _0x2520fa[_0x750488(0xb60)](_0x5512dc,_0x3ace3f);};